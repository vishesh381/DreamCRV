var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/lwr/src/cli/commands/mrt-dev.ts
__markAsModule(exports);
__export(exports, {
  createExperimentalMrtDevCommand: () => createExperimentalMrtDevCommand
});
var import_commander = __toModule(require("commander"));
var import_utils = __toModule(require("../utils.cjs"));
var import_api = __toModule(require("@lwrjs/api"));
function createExperimentalMrtDevCommand() {
  return new import_commander.Command("experimental-mrt-dev").description("[experimental] local development with HMR for an MRT bundle").addOption((0, import_utils.getPortOption)()).addOption((0, import_utils.getSiteDirOption)()).addOption((0, import_utils.getSiteZipOption)()).addOption((0, import_utils.getSsrTimeoutOption)()).addOption((0, import_utils.getAuthTokenOption)()).option("-o, --open", `[boolean] open browser on startup`, false).action(async (options, cmd) => {
    const {authToken, logLevel, open, port, siteDir, siteZip, timeout} = cmd.optsWithGlobals();
    await (0, import_api.expDev)({
      authToken,
      logLevel,
      mode: "dev",
      open,
      port,
      siteDir,
      siteZip,
      timeout
    });
  });
}
