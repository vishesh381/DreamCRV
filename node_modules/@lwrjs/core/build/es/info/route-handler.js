import { LWC_VERSION, LWR_VERSION, PWA_KIT_RUNTIME_VERSION, NODE_VERSION } from '@lwrjs/config';
import fs from 'fs';
const baseHtml = `<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="utf-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0, viewport-fit=cover" />
        <title>Site Information</title>
        <style>
            body {
                font-family: Arial, sans-serif;
                margin: 0;
                padding: 20px;
                background-color: #f9f9f9;
                color: #333;
                display: flex;
            }

            .container {
                max-width: 800px;
                width: 100%;
            }

            h1, h2 {
                color: #555;
                margin-bottom: 16px;
            }

            ul {
                list-style-type: none;
                padding: 0;
            }

            li {
                background-color: #fff;
                border: 1px solid #ddd;
                margin-bottom: 10px;
                padding: 10px;
                border-radius: 4px;
                box-shadow: 0 2px 4px rgba(0,0,0,0.1);
                display: flex;
            }

            .key {
                margin-right: 10px;
                color: #777;
                font-weight: normal;
                min-width: 200px;
            }

            .val {
                font-weight: bold;
                color: steelblue;
                font-size: 1.1em;
                flex-grow: 1;
                text-align: left;
            }

            .data-container {
                padding: 20px;
                border: 1px solid #333;
                border-radius: 5px;
                white-space: pre;
                font-family: monospace;
                text-align: justify;
              };
        </style>
    </head>
    <body>
        <div class="container">
            <h1>Site Information</h1>
            <h2>Environment</h2>
            {{ versionInfo }}
            {{ mrtInfo }}
            <h2>Metadata</h2>
            {{ metadata }}
        </div>
    </body>
</html>
`;
export default async function siteInfoHandler(_request, context) {
    const versionInfo = {
        'LWR Version': LWR_VERSION,
        'LWC Version': LWC_VERSION,
        'Node Version': NODE_VERSION,
        'PWA Kit Runtime Version': PWA_KIT_RUNTIME_VERSION,
    };
    let versionInfoString = '<ul>';
    for (const key in versionInfo) {
        if (versionInfo[key] !== 'not-provided') {
            versionInfoString += `<li><span class="key">${key}:</span><span class="val">${versionInfo[key]}</span></li>\n`;
        }
    }
    versionInfoString += '</ul>';
    // If MRT add the support info
    let mrtInfoString = '';
    if (process.env.MRT_ORGANIZATION_SLUG || process.env.MOBIFY_PROPERTY_ID || process.env.DEPLOY_TARGET) {
        const mrtInfo = {
            'MRT Tenant': process.env.MRT_ORGANIZATION_SLUG,
            'MRT Project Id': process.env.MOBIFY_PROPERTY_ID,
            'MRT Environment': process.env.DEPLOY_TARGET,
            'MRT Bundle Id': process.env.BUNDLE_ID,
        };
        mrtInfoString = '<ul>';
        for (const key in mrtInfo) {
            mrtInfoString += `<li><span class="key">${key}:</span><span class="val">${mrtInfo[key]}</span></li>\n`;
        }
        mrtInfoString += '</ul>';
    }
    // Get any provided metadata from site/.metadata/runtime-info.json
    const providedMetadataPath = `${context.rootDir}/site/.metadata/runtime-info.json`;
    let providedMetadata = {};
    if (fs.existsSync(providedMetadataPath)) {
        providedMetadata = JSON.parse(fs.readFileSync(providedMetadataPath, 'utf-8'));
    }
    let providedInfoString = '<ul>';
    for (const key in providedMetadata) {
        if (providedMetadata[key] !== 'not-provided') {
            const value = typeof providedMetadata[key] === 'object'
                ? `<div class="data-container val">${JSON.stringify(providedMetadata[key], null, 2)}</div>`
                : `<span class="val">${providedMetadata[key]}</span>`;
            providedInfoString += `<li><span class="key">${key}:</span>${value}</li>\n`;
        }
    }
    providedInfoString += '</ul>';
    let infoHtml = baseHtml;
    infoHtml = infoHtml.replace('{{ versionInfo }}', versionInfoString);
    infoHtml = infoHtml.replace('{{ mrtInfo }}', mrtInfoString);
    infoHtml = infoHtml.replace('{{ metadata }}', providedInfoString);
    return {
        body: infoHtml,
        headers: {
            'content-type': `text/html; charset=utf-8`,
        },
        cache: {
            ttl: '200s',
        },
    };
}
//# sourceMappingURL=route-handler.js.map