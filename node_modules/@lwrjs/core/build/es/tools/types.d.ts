import type { Endpoints, FeatureFlags, I18NConfig, ImportMetadata, RenderedAssetReference, SiteMetadata } from '@lwrjs/types';
export interface BaseResourceContextOpts {
    resourceType: 'route' | 'asset' | 'js' | 'resource' | 'mapping';
}
export interface RouteResourceOpts extends BaseResourceContextOpts {
    resourceType: 'route';
}
export interface AssetResourceOpts extends BaseResourceContextOpts {
    resourceType: 'asset';
    asset?: RenderedAssetReference;
}
export interface JsResourceOpts extends BaseResourceContextOpts {
    resourceType: 'js';
}
export interface ResResourceOpts extends BaseResourceContextOpts {
    resourceType: 'resource';
}
export interface MappingResourceOpts extends BaseResourceContextOpts {
    resourceType: 'mapping';
}
export type ResourceContextOpts = RouteResourceOpts | AssetResourceOpts | JsResourceOpts | ResResourceOpts | MappingResourceOpts;
export interface ViewImportMetadata {
    /**
     * Get the additional import metadata collected while generating this view
     * @returns
     */
    getAdditionalImportMetadata(): ImportMetadata;
    /**
     * Adds any new imports found to the additional metadata map.  Returns a filtered
     * map of imports not in the initial view
     */
    addAdditionalMetadata(newMetadata: ImportMetadata): ImportMetadata;
}
export interface SiteConfig {
    outputDir: string;
    viewPaths: Set<string>;
    visitedUrls: Set<string>;
    locale: string;
    i18n: I18NConfig;
    urlRewriteMap: Map<string, string>;
    endpoints?: Endpoints;
    importMetadata?: ViewImportMetadata;
    viewConfigPath?: string;
    featureFlags?: FeatureFlags;
    legacyDefaultMappingEndpoint?: string;
    skipBaseDocumentGeneration?: boolean;
    siteMetadata?: SiteMetadata;
}
//# sourceMappingURL=types.d.ts.map