import { descriptions } from '@lwrjs/diagnostics';
import { LATEST_SIGNATURE, serializeModuleToJson } from '@lwrjs/shared-utils';
import { RequestHandlerSpan, getTracer } from '@lwrjs/instrumentation';
import { getRequestImporter } from './utils/request.js';
import { getModuleIdentity } from './utils/identity.js';
import { createUnsignedModuleRedirect } from './redirects/unsigned-module-redirect.js';
import { handleErrors } from './utils/error-handling.js';
function createModuleMiddleware(context) {
    const { appConfig, moduleRegistry, runtimeEnvironment: defaultRuntimeEnvironment } = context;
    const unsignedRedirect = createUnsignedModuleRedirect(moduleRegistry);
    return async (req, res) => {
        if (!req.validateEnvironmentRequest(appConfig)) {
            res.status(400);
            res.send(descriptions.UNRESOLVABLE.INVALID_ENVIRONMENT(req.params.environment).message);
            return;
        }
        if (!req.validateJsonRequest()) {
            res.status(400);
            res.send(descriptions.UNRESOLVABLE.INVALID_JSON().message);
            return;
        }
        if (!req.validateApiVersion(appConfig)) {
            res.status(400);
            res.send(descriptions.UNRESOLVABLE.INVALID_API_VERSION(req.params.apiVersion, appConfig.apiVersion)
                .message);
            return;
        }
        const { runtimeEnvironment, runtimeParams } = req.getRuntimeContext(defaultRuntimeEnvironment);
        const importer = req.query.importer
            ? await getRequestImporter(req, moduleRegistry, runtimeParams)
            : undefined;
        const { moduleId, signature } = getModuleIdentity(req, importer);
        if (moduleId.importer || !signature) {
            await unsignedRedirect(req, res, moduleId, runtimeEnvironment, runtimeParams);
            return;
        }
        const moduleDefinition = await getTracer().trace({
            name: RequestHandlerSpan.GetModule,
            attributes: {
                specifier: moduleId.specifier,
                url: req.originalUrl,
            },
        }, () => {
            return moduleRegistry.getLinkedModule(moduleId, 
            // bundle must be `false` to resolve amd modules in `prod-compat` mode
            { ...runtimeEnvironment, bundle: false }, runtimeParams);
        });
        const { ownHash, linkedSource } = moduleDefinition;
        // validate the requested instances exists
        if (signature !== LATEST_SIGNATURE && ownHash !== signature) {
            res.status(404).send(descriptions.UNRESOLVABLE.SIGNED_MODULE(moduleId.specifier, signature).message);
            return;
        }
        if (req.isSiteGeneration()) {
            res.setSiteGenerationMetadata({ moduleDefinition });
        }
        if (req.isJsonRequest()) {
            const json = await serializeModuleToJson(linkedSource, moduleDefinition, moduleRegistry, runtimeParams);
            res.status(200).type('application/json').send(json);
            return;
        }
        res.status(200).type('application/javascript').send(linkedSource);
    };
}
export function moduleMiddleware(app, context) {
    app.get([
        `/:apiVersion/module/:format/:compat/l/:locale/e/:environment/mi/:specifier/latest/:prettyUrl?`,
        `/:apiVersion/module/:format/:compat/l/:locale/e/:environment/mi/:specifier/s/:signature/:prettyUrl?`,
        `/:apiVersion/module/:format/:compat/l/:locale/mi/:specifier/latest/:prettyUrl?`,
        `/:apiVersion/module/:format/:compat/l/:locale/mi/:specifier/s/:signature/:prettyUrl?`,
        `/:apiVersion/module/:format/:compat/e/:environment/mi/:specifier/latest/:prettyUrl?`,
        `/:apiVersion/module/:format/:compat/e/:environment/mi/:specifier/s/:signature/:prettyUrl?`,
        `/:apiVersion/module/:format/:compat/mi/:specifier/latest/:prettyUrl?`,
        `/:apiVersion/module/:format/:compat/mi/:specifier/s/:signature/:prettyUrl?`,
        `/:apiVersion/module/:format/:compat/l/:locale/e/:environment/mi/:specifier`,
        `/:apiVersion/module/:format/:compat/l/:locale/mi/:specifier`,
        `/:apiVersion/module/:format/:compat/e/:environment/mi/:specifier`,
        `/:apiVersion/module/:format/:compat/mi/:specifier`,
    ], handleErrors(createModuleMiddleware(context)));
}
//# sourceMappingURL=module-middleware.js.map