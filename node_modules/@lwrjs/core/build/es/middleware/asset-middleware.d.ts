import type { InternalAppServer, ServerContext, ServerTypes } from '@lwrjs/types';
export declare function assetMiddleware<T extends ServerTypes>(app: InternalAppServer<T>, context: ServerContext): void;
/**
 * Parses a semicolon-separated string of key-value pairs into an object.
 *
 * The input string must contain key-value pairs in the format `key:value;key2:value2`.
 * This function validates the format of each pair and logs errors for malformed entries.
 * If no errors are encountered, the function returns an object representing the parsed pairs.
 * Otherwise, errors are logged, and only valid pairs are included in the result.
 *
 * @param {string | undefined} assetHeadersString - The semicolon-separated string to parse. Can be undefined.
 * @returns {Record<string, string> | undefined} - A key-value pair object if valid pairs are found,
 * or `undefined` if the input is invalid or empty.
 *
 * ### Example Usage:
 * ```typescript
 * const input = "key1:value1;key2:value2";
 * const result = parseHeaderStringToObject(input);
 * console.log(result);
 * // Output: { key1: "value1", key2: "value2" }
 * ```
 *
 * ### Error Logging Example:
 * For an input like `key1:value1;invalidpair;key3:`, the function logs:
 * ```
 * {
 *   label: 'asset-middleware',
 *   message: 'Parse Errors: Error at Header 2: Malformed Header "invalidpair"\nError at Header 3: Malformed Header "key3:"'
 * }
 * ```
 */
export declare function parseHeaderStringToObject(assetHeadersString: string | undefined): Record<string, string> | undefined;
//# sourceMappingURL=asset-middleware.d.ts.map