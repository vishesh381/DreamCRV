import { explodeSpecifier, explodeSpecifiers, LATEST_SIGNATURE } from '@lwrjs/shared-utils';
import { createSingleDiagnosticError, descriptions, LwrUnresolvableError } from '@lwrjs/diagnostics';
function validateSpecifier(specifer) {
    return specifer.indexOf('../') < 0;
}
export function getModuleIdentity(req, importer) {
    const { specifier, signature } = req.params;
    if (validateSpecifier(specifier) === false) {
        throw createSingleDiagnosticError({
            description: descriptions.UNRESOLVABLE.INVALID_SPECIFIER(specifier),
        }, LwrUnresolvableError);
    }
    const moduleId = explodeSpecifier(specifier);
    return {
        moduleId: {
            ...moduleId,
            importer,
        },
        signature,
    };
}
export function getMappingIdentity(req) {
    const { specifiers } = req.params;
    const moduleIds = explodeSpecifiers(specifiers).map((obj) => ({
        ...obj,
        importer: req.query.importer,
    }));
    return {
        moduleIds,
    };
}
export function getResourceIdentity(req) {
    const { specifier, signature = LATEST_SIGNATURE } = req.params;
    if (validateSpecifier(specifier) === false) {
        throw createSingleDiagnosticError({
            description: descriptions.UNRESOLVABLE.INVALID_SPECIFIER(specifier),
        }, LwrUnresolvableError);
    }
    const resourceId = explodeSpecifier(specifier);
    return {
        resourceId,
        signature,
    };
}
export function getAssetIdentity(req) {
    const { signature, immutable, assetType: type } = req.params;
    const specifier = type
        ? process.platform === 'win32'
            ? req.params[0]
            : '/' + req.params[0]
        : req.originalUrl.split('?')[0];
    if (validateSpecifier(specifier) === false) {
        throw createSingleDiagnosticError({
            description: descriptions.UNRESOLVABLE.INVALID_SPECIFIER(specifier),
        }, LwrUnresolvableError);
    }
    return {
        immutable,
        assetId: {
            specifier,
            type,
        },
        signature: signature || LATEST_SIGNATURE,
    };
}
//# sourceMappingURL=identity.js.map