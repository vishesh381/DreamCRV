import { descriptions, DiagnosticsError, LwrUnresolvableError } from '@lwrjs/diagnostics';
import { logger } from '@lwrjs/diagnostics';
function createReturnStatus(error, url) {
    if (error instanceof LwrUnresolvableError &&
        error.diagnostics[0].description.category === 'lwrUnresolvable/invalid') {
        return { status: 400, message: error.message };
    }
    if (error instanceof LwrUnresolvableError) {
        return { status: 404, message: error.message };
    }
    return { status: 500, message: `${descriptions.SERVER.SERVER_ERROR(url).message}: ${error.message}` };
}
export function handleErrors(middleware) {
    return async (req, res, next) => {
        try {
            await middleware(req, res, next);
        }
        catch (err) {
            if (err instanceof DiagnosticsError) {
                logger.error('LWR Diagnostic Error: ' + err.message);
                logger.error(err.diagnostics);
                logger.error(err.stack);
            }
            else {
                logger.error(err);
            }
            const { status, message } = createReturnStatus(err, req.originalUrl);
            res.status(status);
            res.send(message);
        }
    };
}
//# sourceMappingURL=error-handling.js.map