import { descriptions } from '@lwrjs/diagnostics';
import { getResourceIdentity } from './utils/identity.js';
import { handleErrors } from './utils/error-handling.js';
function createResourceMiddleware(context) {
    const { appConfig, resourceRegistry, runtimeEnvironment: defaultRuntimeEnvironment } = context;
    return async (req, res) => {
        if (!req.validateEnvironmentRequest(appConfig)) {
            res.status(400).send(descriptions.UNRESOLVABLE.INVALID_ENVIRONMENT(req.params.environment).message);
            return;
        }
        const { runtimeEnvironment, runtimeParams } = req.getRuntimeContext(defaultRuntimeEnvironment);
        const { resourceId } = getResourceIdentity(req);
        const resource = await resourceRegistry.getResource(resourceId, runtimeEnvironment, runtimeParams);
        if (req.isSiteGeneration()) {
            res.setSiteGenerationMetadata({ resource });
        }
        if (resource && resource.content) {
            const type = resource.type === 'text/css' ? resource.type : 'application/javascript';
            res.status(200).type(type).send(resource.content);
            return;
        }
        if (resource && resource.stream) {
            res.status(200).type(resource.type).stream(resource.stream());
            return;
        }
        res.status(404).send(descriptions.UNRESOLVABLE.RESOURCE(resourceId.specifier, resourceId.version).message);
    };
}
export function resourceMiddleware(app, context) {
    app.get([
        `/:apiVersion/resource/:format/l/:locale/e/:environment/:specifier/:prettyUrl?`,
        `/:apiVersion/resource/:format/l/:locale/:specifier/:prettyUrl?`,
        `/:apiVersion/resource/:format/e/:environment/:specifier/:prettyUrl?`,
        `/:apiVersion/resource/:format/:specifier/:prettyUrl?`,
    ], handleErrors(createResourceMiddleware(context)));
}
//# sourceMappingURL=resource-middleware.js.map