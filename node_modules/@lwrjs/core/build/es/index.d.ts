import type { LwrGlobalConfig, NormalizedLwrGlobalConfig, ServerTypeImpl, ServerTypes, RuntimeEnvironment, GlobalData, MiddlewareFunction } from '@lwrjs/types';
export declare class LwrApp {
    private app;
    private server;
    private initialized;
    private config;
    private runtimeEnvironment;
    private globalData;
    serverType: ServerTypes;
    use: (m: MiddlewareFunction) => void;
    all: (path: string | string[], m: MiddlewareFunction) => void;
    get: (path: string | string[], m: MiddlewareFunction) => void;
    post: (path: string | string[], m: MiddlewareFunction) => void;
    constructor(configs: {
        appConfig: NormalizedLwrGlobalConfig;
        runtimeEnvironment: RuntimeEnvironment;
        globalData: GlobalData;
    });
    getConfig(): NormalizedLwrGlobalConfig;
    init(): Promise<void>;
    listen(callback?: ((opts: {
        serverMode: string;
        port: number;
    }) => void) | undefined): Promise<{
        serverMode: string;
        port: number;
    }>;
    close(): void;
    getInternalServer<S extends ServerTypes>(): ServerTypeImpl<S>;
}
export declare function createServer(config?: LwrGlobalConfig): LwrApp;
export declare function generateStaticSite(config?: LwrGlobalConfig): Promise<NormalizedLwrGlobalConfig>;
//# sourceMappingURL=index.d.ts.map