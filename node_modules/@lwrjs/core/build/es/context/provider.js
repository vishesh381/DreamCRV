import fs from 'fs';
import { deepFreeze } from '@lwrjs/shared-utils';
import { SiteMetadataImpl } from '@lwrjs/static/site-metadata';
export function createProviderContext(serverContext) {
    // This is a subset of config to user-land code
    const { assets, cacheDir, i18n, lwc: { modules = [] }, routes, errorRoutes, rootDir, contentDir, layoutsDir, locker, amdLoader, esmLoader, environment, basePath, bundleConfig, staticSiteGenerator, } = serverContext.appConfig;
    const { onModuleDefinitionChange, onModuleSourceChange } = serverContext.appObserver;
    const { notifyModuleDefinitionChanged, notifyModuleSourceChanged, notifyViewSourceChanged, notifyAssetSourceChanged, } = serverContext.appEmitter;
    const siteMetadata = staticSiteGenerator.outputDir && fs.existsSync(staticSiteGenerator.outputDir)
        ? new SiteMetadataImpl({ rootDir: staticSiteGenerator.outputDir, i18n })
        : undefined;
    return {
        appObserver: deepFreeze({ onModuleDefinitionChange, onModuleSourceChange }),
        appEmitter: {
            notifyModuleDefinitionChanged: (payload) => notifyModuleDefinitionChanged.call(serverContext.appEmitter, payload),
            notifyModuleSourceChanged: (payload) => notifyModuleSourceChanged.call(serverContext.appEmitter, payload),
            notifyViewSourceChanged: (payload) => notifyViewSourceChanged.call(serverContext.appEmitter, payload),
            notifyAssetSourceChanged: (payload) => notifyAssetSourceChanged.call(serverContext.appEmitter, payload),
        },
        moduleRegistry: serverContext.moduleRegistry.getPublicApi(),
        moduleBundler: serverContext.moduleBundler.getPublicApi(),
        resourceRegistry: serverContext.resourceRegistry.getPublicApi(),
        viewRegistry: serverContext.viewRegistry.getPublicApi(),
        assetRegistry: serverContext.assetRegistry.getPublicApi(),
        config: deepFreeze({
            assets,
            cacheDir,
            i18n,
            modules,
            routes,
            errorRoutes,
            rootDir,
            basePath,
            contentDir,
            layoutsDir,
            locker,
            amdLoader,
            esmLoader,
            environment,
            bundleConfig,
        }),
        runtimeEnvironment: deepFreeze(serverContext.runtimeEnvironment),
        watcherFactory: serverContext.watcherFactory,
        siteMetadata,
    };
}
//# sourceMappingURL=provider.js.map