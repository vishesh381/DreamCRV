var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/core/src/context/server.ts
__markAsModule(exports);
__export(exports, {
  createServerContext: () => createServerContext
});
var import_asset_registry = __toModule(require("@lwrjs/asset-registry"));
var import_module_bundler = __toModule(require("@lwrjs/module-bundler"));
var import_module_registry = __toModule(require("@lwrjs/module-registry"));
var import_resource_registry = __toModule(require("@lwrjs/resource-registry"));
var import_shared_utils = __toModule(require("@lwrjs/shared-utils"));
var import_view_registry = __toModule(require("@lwrjs/view-registry"));
var import_fs_watch = __toModule(require("@lwrjs/fs-watch"));
function createServerContext(appConfig, runtimeEnvironment, globalData) {
  const appObserver = new import_shared_utils.LwrApplicationObserver();
  const appEmitter = appObserver.createLwrEmitter();
  const assetRegistry = new import_asset_registry.LwrAssetRegistry({
    appObserver,
    appEmitter,
    runtimeEnvironment
  }, appConfig);
  const moduleRegistry = new import_module_registry.LwrModuleRegistry({
    appObserver,
    appEmitter,
    runtimeEnvironment
  }, appConfig);
  const moduleBundler = new import_module_bundler.LwrModuleBundler({moduleRegistry, appObserver}, appConfig);
  moduleRegistry.setBundleSigner((0, import_shared_utils.createBundleSigner)(moduleBundler));
  const resourceRegistry = new import_resource_registry.LwrResourceRegistry();
  const viewRegistry = new import_view_registry.LwrViewRegistry({
    moduleRegistry,
    moduleBundler,
    resourceRegistry,
    assetRegistry,
    appObserver,
    appEmitter,
    globalData,
    runtimeEnvironment
  }, appConfig);
  const watcherFactory = new import_fs_watch.WatcherFactoryImpl();
  return {
    appObserver,
    appEmitter,
    moduleRegistry,
    moduleBundler,
    resourceRegistry,
    assetRegistry,
    viewRegistry,
    watcherFactory,
    appConfig,
    runtimeEnvironment,
    routeHandlers: {}
  };
}
