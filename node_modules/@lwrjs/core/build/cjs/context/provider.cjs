var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/core/src/context/provider.ts
__markAsModule(exports);
__export(exports, {
  createProviderContext: () => createProviderContext
});
var import_fs = __toModule(require("fs"));
var import_shared_utils = __toModule(require("@lwrjs/shared-utils"));
var import_site_metadata = __toModule(require("@lwrjs/static/site-metadata"));
function createProviderContext(serverContext) {
  const {
    assets,
    cacheDir,
    i18n,
    lwc: {modules = []},
    routes,
    errorRoutes,
    rootDir,
    contentDir,
    layoutsDir,
    locker,
    amdLoader,
    esmLoader,
    environment,
    basePath,
    bundleConfig,
    staticSiteGenerator
  } = serverContext.appConfig;
  const {onModuleDefinitionChange, onModuleSourceChange} = serverContext.appObserver;
  const {
    notifyModuleDefinitionChanged,
    notifyModuleSourceChanged,
    notifyViewSourceChanged,
    notifyAssetSourceChanged
  } = serverContext.appEmitter;
  const siteMetadata = staticSiteGenerator.outputDir && import_fs.default.existsSync(staticSiteGenerator.outputDir) ? new import_site_metadata.SiteMetadataImpl({rootDir: staticSiteGenerator.outputDir, i18n}) : void 0;
  return {
    appObserver: (0, import_shared_utils.deepFreeze)({onModuleDefinitionChange, onModuleSourceChange}),
    appEmitter: {
      notifyModuleDefinitionChanged: (payload) => notifyModuleDefinitionChanged.call(serverContext.appEmitter, payload),
      notifyModuleSourceChanged: (payload) => notifyModuleSourceChanged.call(serverContext.appEmitter, payload),
      notifyViewSourceChanged: (payload) => notifyViewSourceChanged.call(serverContext.appEmitter, payload),
      notifyAssetSourceChanged: (payload) => notifyAssetSourceChanged.call(serverContext.appEmitter, payload)
    },
    moduleRegistry: serverContext.moduleRegistry.getPublicApi(),
    moduleBundler: serverContext.moduleBundler.getPublicApi(),
    resourceRegistry: serverContext.resourceRegistry.getPublicApi(),
    viewRegistry: serverContext.viewRegistry.getPublicApi(),
    assetRegistry: serverContext.assetRegistry.getPublicApi(),
    config: (0, import_shared_utils.deepFreeze)({
      assets,
      cacheDir,
      i18n,
      modules,
      routes,
      errorRoutes,
      rootDir,
      basePath,
      contentDir,
      layoutsDir,
      locker,
      amdLoader,
      esmLoader,
      environment,
      bundleConfig
    }),
    runtimeEnvironment: (0, import_shared_utils.deepFreeze)(serverContext.runtimeEnvironment),
    watcherFactory: serverContext.watcherFactory,
    siteMetadata
  };
}
