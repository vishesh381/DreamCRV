var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/core/src/tools/server-warmup.ts
__markAsModule(exports);
__export(exports, {
  warmupServer: () => warmupServer
});
var import_static_generation = __toModule(require("./static-generation.cjs"));
var import_dir = __toModule(require("./utils/dir.cjs"));
var import_network_dispatcher = __toModule(require("./utils/network-dispatcher.cjs"));
var import_config = __toModule(require("@lwrjs/config"));
var import_diagnostics = __toModule(require("@lwrjs/diagnostics"));
async function warmupServer(config, internalRequestKey) {
  if (import_diagnostics.logger.isWarnEnabled()) {
    import_diagnostics.logger.setOptions({dedupe: new Set(["warn"])});
  }
  import_diagnostics.logger.info({label: `server-warmup`, message: `starting`});
  const {basePath, port, routes, staticSiteGenerator} = config;
  staticSiteGenerator.outputDir = import_dir.skipDirCreation;
  const urlRewriteMap = new Map();
  const runtimeEnvironment = (0, import_config.getRuntimeEnvironment)(config);
  await new import_static_generation.default().generateRoutes(runtimeEnvironment, staticSiteGenerator, routes, basePath, new import_network_dispatcher.default(port, internalRequestKey), staticSiteGenerator.outputDir, urlRewriteMap);
  import_diagnostics.logger.info({label: `server-warmup`, message: `complete`});
}
