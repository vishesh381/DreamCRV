var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/core/src/tools/utils/network-dispatcher.ts
__markAsModule(exports);
__export(exports, {
  default: () => network_dispatcher_default
});
var import_http = __toModule(require("http"));
var import_https = __toModule(require("https"));
var import_diagnostics = __toModule(require("@lwrjs/diagnostics"));
var import_shared_utils = __toModule(require("@lwrjs/shared-utils"));
var NetworkDispatcher = class {
  constructor(port, internalRequestKey) {
    this.port = port || 3e3;
    const httpClient = this.port == 443 ? import_https.default : import_http.default;
    this.pool = new httpClient.Agent({
      maxSockets: 25
    });
    this.internalRequestKey = internalRequestKey || "";
  }
  dispatchUrl(url, method, lang) {
    const options = this.createRequestOptions(url, method, lang);
    return this.handleRequest(options, url, method, lang);
  }
  createRequestOptions(url, method, lang) {
    return {
      method,
      host: "localhost",
      port: this.port,
      path: url,
      agent: this.pool,
      headers: {
        "Accept-Language": lang,
        "lwr-metadata-request": this.internalRequestKey
      }
    };
  }
  handleRequest(options, url, method, lang) {
    return new Promise((resolve, reject) => {
      const httpClient = options.port == 443 ? import_https.default : import_http.default;
      const bodyChunks = [];
      import_diagnostics.logger.verbose({
        label: `NetworkDispatcher`,
        message: `Request: [${method}][${lang}] ${url}`
      });
      const req = httpClient.request(options, (res) => {
        res.on("data", (chunk) => {
          bodyChunks.push(chunk);
        });
        res.on("end", () => {
          import_diagnostics.logger.verbose({
            label: `NetworkDispatcher`,
            message: `[END] Request: [${method}][${lang}] ${url}`
          });
          if (!res.statusCode || res.statusCode >= 200 && res.statusCode < 300) {
            const body = Buffer.concat(bodyChunks).toString();
            try {
              const jsonResponse = JSON.parse(body);
              resolve(jsonResponse);
            } catch (err) {
              const message = !(0, import_shared_utils.isLocalDev)() ? `unexpected response body: [${method}][${lang}] ${url}: '${body}'` : `unexpected response body: [${method}][${lang}] ${url}`;
              if (import_diagnostics.logger.isDebugEnabled()) {
                import_diagnostics.logger.warn({
                  label: `NetworkDispatcher`,
                  message,
                  additionalInfo: err
                });
              } else {
                import_diagnostics.logger.warn({
                  label: `NetworkDispatcher`,
                  message
                });
              }
              resolve({});
            }
          } else if (res.statusCode === 301 || res.statusCode === 302) {
            if (res.headers?.location && (0, import_shared_utils.isModuleOrBundleUrl)(res.headers?.location)) {
              import_diagnostics.logger.debug({
                label: `NetworkDispatcher`,
                message: `Follow redirect: [${method}][${lang}][${res.statusCode}] ${url} -> ${res.headers.location}`
              });
              const location = res.headers.location;
              return this.handleRequest(this.createRequestOptions(location, method, lang), location, method, lang).then((resRedirect) => resolve(resRedirect)).catch((rejectRedirect) => reject(rejectRedirect));
            } else {
              import_diagnostics.logger.warn({
                label: `NetworkDispatcher`,
                message: `Redirect not followed: [${method}][${lang}][${res.statusCode}] ${url} -> ${res.headers.location}`
              });
              resolve({});
            }
          } else {
            import_diagnostics.logger.warn({
              label: `NetworkDispatcher`,
              message: `Unexpected status code: [${method}][${lang}][${res.statusCode}] ${url}`
            });
            resolve({});
          }
        });
      });
      req.on("error", (err) => {
        if (import_diagnostics.logger.isDebugEnabled()) {
          import_diagnostics.logger.warn({
            label: `NetworkDispatcher`,
            message: `Request Failed: [${method}][${lang}] ${url}`,
            additionalInfo: err
          });
        } else {
          import_diagnostics.logger.warn({
            label: `NetworkDispatcher`,
            message: `Request  Failed: [${method}][${lang}] ${url}`
          });
        }
        resolve({});
      });
      req.end();
    });
  }
};
var network_dispatcher_default = NetworkDispatcher;
