var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/core/src/middleware/utils/error-handling.ts
__markAsModule(exports);
__export(exports, {
  handleErrors: () => handleErrors
});
var import_diagnostics = __toModule(require("@lwrjs/diagnostics"));
var import_diagnostics2 = __toModule(require("@lwrjs/diagnostics"));
function createReturnStatus(error, url) {
  if (error instanceof import_diagnostics.LwrUnresolvableError && error.diagnostics[0].description.category === "lwrUnresolvable/invalid") {
    return {status: 400, message: error.message};
  }
  if (error instanceof import_diagnostics.LwrUnresolvableError) {
    return {status: 404, message: error.message};
  }
  return {status: 500, message: `${import_diagnostics.descriptions.SERVER.SERVER_ERROR(url).message}: ${error.message}`};
}
function handleErrors(middleware) {
  return async (req, res, next) => {
    try {
      await middleware(req, res, next);
    } catch (err) {
      if (err instanceof import_diagnostics.DiagnosticsError) {
        import_diagnostics2.logger.error("LWR Diagnostic Error: " + err.message);
        import_diagnostics2.logger.error(err.diagnostics);
        import_diagnostics2.logger.error(err.stack);
      } else {
        import_diagnostics2.logger.error(err);
      }
      const {status, message} = createReturnStatus(err, req.originalUrl);
      res.status(status);
      res.send(message);
    }
  };
}
