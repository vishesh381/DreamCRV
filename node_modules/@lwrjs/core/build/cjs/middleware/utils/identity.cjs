var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/core/src/middleware/utils/identity.ts
__markAsModule(exports);
__export(exports, {
  getAssetIdentity: () => getAssetIdentity,
  getMappingIdentity: () => getMappingIdentity,
  getModuleIdentity: () => getModuleIdentity,
  getResourceIdentity: () => getResourceIdentity
});
var import_shared_utils = __toModule(require("@lwrjs/shared-utils"));
var import_diagnostics = __toModule(require("@lwrjs/diagnostics"));
function validateSpecifier(specifer) {
  return specifer.indexOf("../") < 0;
}
function getModuleIdentity(req, importer) {
  const {specifier, signature} = req.params;
  if (validateSpecifier(specifier) === false) {
    throw (0, import_diagnostics.createSingleDiagnosticError)({
      description: import_diagnostics.descriptions.UNRESOLVABLE.INVALID_SPECIFIER(specifier)
    }, import_diagnostics.LwrUnresolvableError);
  }
  const moduleId = (0, import_shared_utils.explodeSpecifier)(specifier);
  return {
    moduleId: {
      ...moduleId,
      importer
    },
    signature
  };
}
function getMappingIdentity(req) {
  const {specifiers} = req.params;
  const moduleIds = (0, import_shared_utils.explodeSpecifiers)(specifiers).map((obj) => ({
    ...obj,
    importer: req.query.importer
  }));
  return {
    moduleIds
  };
}
function getResourceIdentity(req) {
  const {specifier, signature = import_shared_utils.LATEST_SIGNATURE} = req.params;
  if (validateSpecifier(specifier) === false) {
    throw (0, import_diagnostics.createSingleDiagnosticError)({
      description: import_diagnostics.descriptions.UNRESOLVABLE.INVALID_SPECIFIER(specifier)
    }, import_diagnostics.LwrUnresolvableError);
  }
  const resourceId = (0, import_shared_utils.explodeSpecifier)(specifier);
  return {
    resourceId,
    signature
  };
}
function getAssetIdentity(req) {
  const {signature, immutable, assetType: type} = req.params;
  const specifier = type ? process.platform === "win32" ? req.params[0] : "/" + req.params[0] : req.originalUrl.split("?")[0];
  if (validateSpecifier(specifier) === false) {
    throw (0, import_diagnostics.createSingleDiagnosticError)({
      description: import_diagnostics.descriptions.UNRESOLVABLE.INVALID_SPECIFIER(specifier)
    }, import_diagnostics.LwrUnresolvableError);
  }
  return {
    immutable,
    assetId: {
      specifier,
      type
    },
    signature: signature || import_shared_utils.LATEST_SIGNATURE
  };
}
