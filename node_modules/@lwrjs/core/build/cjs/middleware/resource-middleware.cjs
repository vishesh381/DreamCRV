var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/core/src/middleware/resource-middleware.ts
__markAsModule(exports);
__export(exports, {
  resourceMiddleware: () => resourceMiddleware
});
var import_diagnostics = __toModule(require("@lwrjs/diagnostics"));
var import_identity = __toModule(require("./utils/identity.cjs"));
var import_error_handling = __toModule(require("./utils/error-handling.cjs"));
function createResourceMiddleware(context) {
  const {appConfig, resourceRegistry, runtimeEnvironment: defaultRuntimeEnvironment} = context;
  return async (req, res) => {
    if (!req.validateEnvironmentRequest(appConfig)) {
      res.status(400).send(import_diagnostics.descriptions.UNRESOLVABLE.INVALID_ENVIRONMENT(req.params.environment).message);
      return;
    }
    const {runtimeEnvironment, runtimeParams} = req.getRuntimeContext(defaultRuntimeEnvironment);
    const {resourceId} = (0, import_identity.getResourceIdentity)(req);
    const resource = await resourceRegistry.getResource(resourceId, runtimeEnvironment, runtimeParams);
    if (req.isSiteGeneration()) {
      res.setSiteGenerationMetadata({resource});
    }
    if (resource && resource.content) {
      const type = resource.type === "text/css" ? resource.type : "application/javascript";
      res.status(200).type(type).send(resource.content);
      return;
    }
    if (resource && resource.stream) {
      res.status(200).type(resource.type).stream(resource.stream());
      return;
    }
    res.status(404).send(import_diagnostics.descriptions.UNRESOLVABLE.RESOURCE(resourceId.specifier, resourceId.version).message);
  };
}
function resourceMiddleware(app, context) {
  app.get([
    `/:apiVersion/resource/:format/l/:locale/e/:environment/:specifier/:prettyUrl?`,
    `/:apiVersion/resource/:format/l/:locale/:specifier/:prettyUrl?`,
    `/:apiVersion/resource/:format/e/:environment/:specifier/:prettyUrl?`,
    `/:apiVersion/resource/:format/:specifier/:prettyUrl?`
  ], (0, import_error_handling.handleErrors)(createResourceMiddleware(context)));
}
