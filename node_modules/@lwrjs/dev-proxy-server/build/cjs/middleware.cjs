var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/dev-proxy-server/src/middleware.ts
__markAsModule(exports);
__export(exports, {
  addLocalProxyMiddleware: () => addLocalProxyMiddleware,
  addRemoteProxyMiddleware: () => addRemoteProxyMiddleware
});
var import_http_proxy_middleware = __toModule(require("http-proxy-middleware"));
var import_diagnostics = __toModule(require("@lwrjs/diagnostics"));
var HOST = "host";
var ProxyLogLevels;
(function(ProxyLogLevels2) {
  ProxyLogLevels2["Debug"] = "debug";
  ProxyLogLevels2["Info"] = "info";
  ProxyLogLevels2["Warn"] = "warn";
  ProxyLogLevels2["Error"] = "error";
  ProxyLogLevels2["Silent"] = "silent";
})(ProxyLogLevels || (ProxyLogLevels = {}));
var PROXY_URL_REGEX = /^([a-z][a-z0-9+\-.]*):\/\/([^/]+)/i;
function getForwardedHeader(incomingRequest, remoteOrigin) {
  const {host: remoteHost, proto: remoteProto} = remoteOrigin ? parseHostAndProto(remoteOrigin) : {host: void 0, proto: void 0};
  const host = remoteHost ?? incomingRequest.headers.host;
  const proto = remoteProto ?? incomingRequest.protocol;
  return `host=${host};proto=${proto}`;
}
function parseHostAndProto(urlString) {
  if (!urlString) {
    return {};
  }
  const match = PROXY_URL_REGEX.exec(urlString);
  if (match) {
    const [, proto, host] = match;
    return {proto, host};
  }
  import_diagnostics.logger.warn({
    label: "dev-proxy-server",
    message: `Invalid remoteOrigin format: ${urlString}`
  });
  return {
    host: urlString,
    proto: "https"
  };
}
function addLocalProxyMiddleware(app, defaultHost, remoteOrigin) {
  const domainAndPort = parseHostAndProto(defaultHost).host;
  app.use("/", (0, import_http_proxy_middleware.createProxyMiddleware)({
    target: defaultHost,
    changeOrigin: true,
    onProxyReq: (proxyRequest, incomingRequest) => {
      const hostHeader = incomingRequest.headers.host;
      if (hostHeader !== domainAndPort) {
        proxyRequest.setHeader(HOST, domainAndPort);
        const forwarded = incomingRequest.headers.forwarded;
        proxyRequest.setHeader("Forwarded", forwarded ? forwarded : getForwardedHeader(incomingRequest, remoteOrigin));
        if (process.env.AUTH_TOKEN && !proxyRequest.path.startsWith("/mobify/bundle/")) {
          addAuthCookie(proxyRequest, process.env.AUTH_TOKEN);
        }
      }
    }
  }));
}
function addRemoteProxyMiddleware(app, proxyConfig) {
  const mobifyRules = process.env.ADD_MOBIFY_PROXY_RULES === "true";
  const {proxyConfigs} = proxyConfig;
  for (const entry of proxyConfigs) {
    const [path, target] = entry;
    const targetHost = parseHostAndProto(target).host;
    const pathRewrite = mobifyRules && (path.indexOf("/mobify/proxy") === 0 || path.indexOf("/mobify/caching") === 0) ? {[path]: ""} : void 0;
    app.use(path, (0, import_http_proxy_middleware.createProxyMiddleware)({
      target,
      pathRewrite,
      logLevel: resolveLogLevel(import_diagnostics.logger.getLogLevel()),
      logProvider: () => {
        return import_diagnostics.logger;
      },
      followRedirects: false,
      changeOrigin: true,
      autoRewrite: false,
      ignorePath: false,
      onProxyReq: (proxyRequest, incomingRequest) => {
        const hostHeader = incomingRequest.headers.host;
        if (hostHeader !== target) {
          proxyRequest.setHeader(HOST, targetHost);
        }
        proxyRequest.setHeader("Forwarded", getForwardedHeader(incomingRequest));
        const originalPath = incomingRequest.url;
        proxyRequest.path = originalPath;
        if (process.env.AUTH_TOKEN) {
          addAuthCookie(proxyRequest, process.env.AUTH_TOKEN);
        }
      }
    }));
  }
}
function resolveLogLevel(currentLevel) {
  if (import_diagnostics.logger.isDebugEnabled())
    return ProxyLogLevels.Debug;
  if (import_diagnostics.logger.isInfoEnabled())
    return ProxyLogLevels.Info;
  if (import_diagnostics.logger.isWarnEnabled())
    return ProxyLogLevels.Warn;
  if (import_diagnostics.logger.isErrorEnabled())
    return ProxyLogLevels.Error;
  return ProxyLogLevels.Silent;
}
function addAuthCookie(req, authToken) {
  let cookies = req.getHeader("cookie") || "";
  const sidCookie = `__Secure-has-sid=1; sid=${authToken};`;
  if (cookies) {
    cookies += `; ${sidCookie}`;
  } else {
    cookies = sidCookie;
  }
  req.setHeader("cookie", cookies);
}
