var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/dev-proxy-server/src/index.ts
__markAsModule(exports);
__export(exports, {
  DEFAULT_PROXY_PORT: () => DEFAULT_PROXY_PORT,
  addRemoteProxyMiddleware: () => import_middleware.addRemoteProxyMiddleware,
  createProxyServer: () => createProxyServer,
  findProxyConfiguration: () => findProxyConfiguration
});
var import_fs = __toModule(require("fs"));
var import_path = __toModule(require("path"));
var import_proxy_server = __toModule(require("./proxy-server.cjs"));
var import_middleware = __toModule(require("./middleware.cjs"));
var DEFAULT_PROXY_PORT = 4e3;
function createProxyServer(config) {
  return new import_proxy_server.LwrProxyServer(config);
}
function findProxyConfiguration(rootDir, buildDir) {
  const PROXY_CONFIG_ROOT = import_path.default.join("config", "_proxy");
  if (buildDir) {
    const buildProxyConfigFile = import_path.default.join(rootDir, buildDir, PROXY_CONFIG_ROOT);
    if (import_fs.default.existsSync(buildProxyConfigFile)) {
      return readAndProcessProxyConfiguration(buildProxyConfigFile);
    }
  }
  const proxyConfigFile = import_path.default.join(rootDir, PROXY_CONFIG_ROOT);
  if (import_fs.default.existsSync(proxyConfigFile)) {
    return readAndProcessProxyConfiguration(proxyConfigFile);
  }
  return;
}
function readAndProcessProxyConfiguration(proxyConfigFile) {
  const entries = import_fs.default.readFileSync(proxyConfigFile).toString().trim().split("\n");
  const proxyConfigs = entries.map((entry, idx) => {
    const config = entry.split(" ");
    if (config.length !== 2) {
      throw new Error(`malformed proxy configuration at index ${idx} - missing configuration columns`);
    }
    if (!config[0].startsWith("/")) {
      throw new Error(`malformed proxy configuration at index ${idx} - proxy path, must start with /`);
    }
    if (!config[1].match(/^([a-z][a-z0-9+\-.]*):\/\//)) {
      throw new Error(`malformed proxy configuration at index ${idx} - proxy origin, must start with http[s]://`);
    }
    return config;
  });
  return {
    proxyConfigs
  };
}
