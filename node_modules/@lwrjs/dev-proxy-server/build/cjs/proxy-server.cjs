var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/dev-proxy-server/src/proxy-server.ts
__markAsModule(exports);
__export(exports, {
  LwrProxyServer: () => LwrProxyServer
});
var import_express = __toModule(require("express"));
var import_middleware = __toModule(require("./middleware.cjs"));
var LwrProxyServer = class {
  constructor(config) {
    this.proxyServer = (0, import_express.default)();
    this.config = config;
    (0, import_middleware.addRemoteProxyMiddleware)(this.proxyServer, this.config);
    (0, import_middleware.addLocalProxyMiddleware)(this.proxyServer, this.config.defaultHost, this.config.remoteOrigin);
  }
  async listen(callback) {
    const {proxyServer, config} = this;
    const {port} = config;
    return new Promise((resolve, reject) => {
      const server = proxyServer.listen(port, async () => {
        const opts = {port};
        callback?.(opts);
        resolve(opts);
      });
      const handleError = (err) => {
        server.off("error", handleError);
        if (err.code === "EADDRINUSE") {
          err = new Error(`Port ${port} is already in use.`);
        }
        reject(err);
      };
      server.on("error", handleError);
    });
  }
};
