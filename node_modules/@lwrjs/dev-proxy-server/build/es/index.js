import fs from 'fs';
import path from 'path';
import { LwrProxyServer } from './proxy-server.js';
// Default Proxy server port
export const DEFAULT_PROXY_PORT = 4000;
export { addRemoteProxyMiddleware } from './middleware.js';
/**
 * Creates an Development Proxy Server using the provided `LwrProxyServerConfig` configuration.
 * @param config The configuration for the proxy
 * @returns  LwrProxyServer instance
 */
export function createProxyServer(config) {
    return new LwrProxyServer(config);
}
/**
 * Searches for a `_proxy` configuration resource using the following search logic:
 *  - ${rootDir}/${buildDir}/config/_proxy
 *  - ${rootDir}/config/_proxy
 * @param rootDir The root directory of the project
 * @param buildDir The built distribution directory/
 * @returns The found LwrProxyConfiguration object or undefined if no _proxy object could be found.
 */
export function findProxyConfiguration(rootDir, buildDir) {
    const PROXY_CONFIG_ROOT = path.join('config', '_proxy');
    if (buildDir) {
        // check the built/dist if its provided and exists
        const buildProxyConfigFile = path.join(rootDir, buildDir, PROXY_CONFIG_ROOT);
        if (fs.existsSync(buildProxyConfigFile)) {
            // read, parse, and return the configuration resource
            return readAndProcessProxyConfiguration(buildProxyConfigFile);
        }
    }
    const proxyConfigFile = path.join(rootDir, PROXY_CONFIG_ROOT);
    if (fs.existsSync(proxyConfigFile)) {
        // read, parse, and return the configuration resource
        return readAndProcessProxyConfiguration(proxyConfigFile);
    }
    return;
}
function readAndProcessProxyConfiguration(proxyConfigFile) {
    const entries = fs.readFileSync(proxyConfigFile).toString().trim().split('\n');
    const proxyConfigs = entries.map((entry, idx) => {
        const config = entry.split(' ');
        if (config.length !== 2) {
            throw new Error(`malformed proxy configuration at index ${idx} - missing configuration columns`);
        }
        if (!config[0].startsWith('/')) {
            throw new Error(`malformed proxy configuration at index ${idx} - proxy path, must start with /`);
        }
        if (!config[1].match(/^([a-z][a-z0-9+\-.]*):\/\//)) {
            throw new Error(`malformed proxy configuration at index ${idx} - proxy origin, must start with http[s]://`);
        }
        return config;
    });
    return {
        proxyConfigs,
    };
}
//# sourceMappingURL=index.js.map