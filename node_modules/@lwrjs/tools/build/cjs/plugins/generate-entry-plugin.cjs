var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/tools/src/plugins/generate-entry-plugin.ts
__markAsModule(exports);
__export(exports, {
  default: () => generateLwrEntry
});
var import_path = __toModule(require("path"));
function generateLwrEntry() {
  return {
    name: "lwr-entry",
    setup(build) {
      build.onResolve({filter: /.*\/lwr.entry.js$/}, ({kind, path: path2}) => {
        if (kind === "entry-point") {
          return {
            path: path2,
            namespace: "lwr-entry"
          };
        }
      });
      build.onLoad({filter: /.*/, namespace: "lwr-entry"}, (args) => ({
        contents: [
          `/* This module is generated */`,
          `import { createHandler } from '@lwrjs/lambda';`,
          `import * as build from './lwr.build.js';`,
          `const handler = !process.env.LOCAL ? createHandler(build) : undefined;`,
          `export { handler as get, build as MRT_APP_CONFIG };`
        ].join("\n"),
        loader: "ts",
        resolveDir: import_path.default.dirname(args.path)
      }));
    }
  };
}
