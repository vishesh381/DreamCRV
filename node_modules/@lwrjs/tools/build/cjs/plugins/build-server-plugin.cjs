var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/tools/src/plugins/build-server-plugin.ts
__markAsModule(exports);
__export(exports, {
  default: () => buildLwrServer
});
var import_path = __toModule(require("path"));
var import_config = __toModule(require("@lwrjs/config"));
var import_modules = __toModule(require("@lwrjs/config/modules"));
var import_diagnostics = __toModule(require("@lwrjs/diagnostics"));
var import_shared_utils = __toModule(require("@lwrjs/shared-utils"));
function getServices(t) {
  return t;
}
var services = getServices([
  "moduleProviders",
  "bundleProviders",
  "viewProviders",
  "viewTransformers",
  "resourceProviders",
  "assetProviders",
  "assetTransformers",
  "uriTransformers"
]);
function processServices(kind, entries, rootDir) {
  const output = {
    imports: [],
    entries: []
  };
  for (const [index, [entry, config]] of entries.entries()) {
    const name = kind + index;
    output.imports.push(`import ${name} from '${(0, import_shared_utils.normalizeDirectory)(entry, rootDir)}';`);
    output.entries.push([name, config]);
  }
  return output;
}
function processHooks(hooksConfig, hooks, rootDir) {
  const output = {
    imports: [],
    entries: []
  };
  for (const [index, [entry, config]] of hooksConfig.entries()) {
    if (!hooks[index].onStart && !hooks[index].initInstrumentation) {
      continue;
    }
    if (hooks[index].initConfigs) {
      import_diagnostics.logger.warn({
        label: `lwr-server-build`,
        message: `Consider splitting 'initConfigs' hooks to a separate file.`
      });
    }
    const name = "hook" + index;
    output.imports.push(`import ${name} from '${(0, import_shared_utils.normalizeDirectory)(entry, rootDir)}';`);
    output.entries.push([name, config]);
  }
  return output;
}
function processRouteHandlers(routeHandlers, rootDir) {
  const output = {
    imports: [],
    routeHandlers: {}
  };
  for (const [id, handler] of Object.entries(routeHandlers)) {
    if (!output.routeHandlers[id]) {
      const name = `routeHandler${output.imports.length}`;
      output.imports.push(`import ${name} from '${(0, import_shared_utils.normalizeDirectory)(handler || id, rootDir)}';`);
      output.routeHandlers[id] = name;
    }
  }
  return output;
}
function printServices(config) {
  return `{${Object.entries(config).map(([key, value]) => {
    const entries = value;
    return `${key}: [${entries.map(([ctor, config2 = {}]) => `[${ctor}, ${JSON.stringify(config2)}]`)}]`;
  }).join(",")}}`;
}
function printHooks(hooks) {
  return `[${hooks.map(([ctor, config = {}]) => {
    return `new ${ctor}(${JSON.stringify(config)})`;
  }).join(",")}]`;
}
function printRouteHandlers(routeHandlers) {
  return `{${Object.entries(routeHandlers).map(([id, handler]) => {
    return `'${id}': ${handler}`;
  }).join(",")}}`;
}
function buildLwrServer(config, buildDir) {
  return {
    name: "lwr-server-build",
    setup(build) {
      build.onResolve({filter: /.*\/lwr.build.js$/}, (args) => ({
        path: args.path,
        namespace: "lwr-server-build"
      }));
      build.onLoad({filter: /.*/, namespace: "lwr-server-build"}, async (args) => {
        const {appConfig, runtimeEnvironment, globalData} = (0, import_config.loadConfig)(config, {
          skipDirNormalization: true,
          useStaticProviders: true
        });
        const hooks = await (0, import_modules.loadHooks)(appConfig);
        if (hooks.length) {
          const skipValidation = true;
          await (0, import_config.executeConfigHooks)(hooks, appConfig, runtimeEnvironment, globalData, skipValidation);
        }
        const remoteAppConfig = {
          ...appConfig,
          ignoreLwrConfigFile: true,
          rootDir: void 0,
          port: void 0
        };
        const serviceImports = [];
        const serviceConfig = {};
        for (const service of services) {
          const entries = processServices(service, appConfig[service], appConfig.rootDir);
          serviceImports.push(...entries.imports);
          serviceConfig[service] = entries.entries;
        }
        const hooksConfig = processHooks(appConfig.hooks, hooks, appConfig.rootDir);
        const routeHandlersConfig = processRouteHandlers(appConfig.routeHandlers, appConfig.rootDir);
        return {
          contents: [
            ...serviceImports,
            ...hooksConfig.imports,
            ...routeHandlersConfig.imports,
            `export const buildDir = '${buildDir || "app"}';`,
            `export const appConfig = ${JSON.stringify(remoteAppConfig)};`,
            `export const runtimeEnvironment = ${JSON.stringify(runtimeEnvironment)};`,
            `export const globalData = ${JSON.stringify(globalData)};`,
            `export const services = ${printServices(serviceConfig)};`,
            `export const hooks = ${printHooks(hooksConfig.entries)};`,
            `export const routeHandlers = ${printRouteHandlers(routeHandlersConfig.routeHandlers)};`
          ].join("\n"),
          loader: "ts",
          resolveDir: import_path.default.dirname(args.path)
        };
      });
    }
  };
}
