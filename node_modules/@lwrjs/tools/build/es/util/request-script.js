export function getMainScriptContent() {
    return (getEnvironmentSetup() +
        getHandlerFunction() +
        getDefaultInput() +
        getDefaultContext() +
        getParseArguments() +
        getPrintHelpMessage() +
        getUpdateInput() +
        getMainExecution());
}
function getEnvironmentSetup() {
    return `
  // Overwrite Envs from SSR.js
  process.env.LWR_TRACING = process.env.LWR_TRACING ?? 'default';
  // Suppress TLS checking for now
  process.env.NODE_TLS_REJECT_UNAUTHORIZED = 0;
  // Set SSR timeout to 30 seconds (allow override)
  process.env.SSR_TIMEOUT = process.env.SSR_TIMEOUT ?? 30000;
  
  // Lambda Envs (required by pwa-kit runtime)
  process.env.AWS_LAMBDA_FUNCTION_NAME = 'get';
  process.env.BUNDLE_ID = '1';
  process.env.DEPLOY_TARGET = 'set';
  process.env.EXTERNAL_DOMAIN_NAME = 'mock-domain.example.com';
  process.env.MOBIFY_PROPERTY_ID = 'set';
    `;
}
function getHandlerFunction() {
    return `
  /**
   * Main handler function to be invoked by Java client.
   * @param {Object} input - The input object containing JavaScript code.
   * @returns {Promise<Object>} - The result object with linting results.
   */
  async function handler(input) {
    if (!input) {
      input = DEFAULT_INPUT;
    }
  
    // Import the SSR module
    const ssr = require('./ssr.js');
    return new Promise((resolve, reject) => {
      ssr.get(input, DEFAULT_CONTEXT, (error, result) => {
        if (error) {
          return reject(error);
        } else {
          // Check if we wanted to override the artifactPath
          if (input.artifactPath && result.body) {
            result.body = result.body.replaceAll(/\\/mobify\\/bundle\\/[a-z0-9]*\\//g, input.artifactPath);
          }
          resolve(result);
        }
      });
    });
  }
    `;
}
function getDefaultInput() {
    return `
  // Example Input
  const DEFAULT_INPUT = {
    path: '/',
    httpMethod: 'GET',
    headers: {
      host: 'mock-domain.example.com',
      'user-agent': 'curl/7.64.1',
    }
  };
    `;
}
function getDefaultContext() {
    return `
  // Define the context object (with basic properties, you can add more as needed)
  const DEFAULT_CONTEXT = {
    awsRequestId: 'test-request-id',
    logGroupName: '/aws/lambda/test',
    logStreamName: 'test-log-stream',
    functionName: 'get',
    functionVersion: '1',
    invokedFunctionArn: 'arn:aws:lambda:test-region:123456789012:function:test-function',
    memoryLimitInMB: '128',
  };
    `;
}
function getParseArguments() {
    return `
  // Parse command-line arguments
  function parseArguments() {
    const args = process.argv.slice(2);
    const options = {
      host: null,
      proto: null,
      basePath: null,
      path: DEFAULT_INPUT.path,
      output: null,
    };
  
    if (args.includes('--help') || args.includes('-h')) {
      printHelpMessage();
      process.exit(0); // Exit after printing help message
    }
  
    args.forEach((arg) => {
      const [key, value] = arg.split('=');
      switch (key) {
        case '--host':
        case '-H':
          options.host = value;
          break;
        case '--proto':
        case '-p':
          options.proto = value;
          break;
        case '--basePath':
        case '-b':
          options.basePath = value;
          break;
        case '--path':
        case '-P':
          options.path = value;
          break;
        case '--output':
        case '-o':
          options.output = value;
          break;
        case '--artifactPath':
        case '-a':
          options.artifactPath = value;
          break;
      }
    });
  
    return options;
  }
    `;
}
function getPrintHelpMessage() {
    return `
  function printHelpMessage() {
    console.log(
      'Usage: node index.js [options]\\n' +
      '\\n' +
      'Options:\\n' +
      '  -H, --host=<host>          Specify the host\\n' +
      '  -p, --proto=<protocol>     Specify the protocol (e.g., http, https)\\n' +
      '  -b, --basePath=<basePath>  Specify the base path\\n' +
      '  -P, --path=<path>          Specify the input path (default: ' + DEFAULT_INPUT.path + ')\\n' +
      '  -o, --output=<output>      Specify the output file path\\n' +
      '  -a, --artifactPath=<path>  Replace /mobify/bundle/xxx/ with a path provided (e.g. /webruntime/ssr-in-core/)\\n' +
      '  -h, --help                 Show this help message\\n' +
      '\\n' +
      'Example:\\n' +
      '  node index.js --host=localhost --proto=http --basePath=/api --path=/data --output=result.json\\n' +
      '  node index.js -H=localhost -p=http -b=/api -P=/data -o=result.json\\n'
    );
  }
    `;
}
function getUpdateInput() {
    return `
  // Update the DEFAULT_INPUT object based on arguments
  function updateInput(input, args) {
    if (args.host) {
      const proto = args.proto || 'https'; // Default to 'https' if proto is not provided
      input.headers.forwarded = 'host=' + args.host + ';proto=' + proto;
    }
  
    if (args.basePath !== null) {
      // Ensure basePath starts with a '/'
      const normalizedBasePath = args.basePath.startsWith('/') ? args.basePath : '/' + args.basePath;
      input.headers['x-mobify-request-class'] = 'basePath=' + normalizedBasePath;
    }
  
    if (args.path) {
      input.path = args.path;
    }

    if (args.artifactPath) {
      input.artifactPath = args.artifactPath;
    }
  
    return input;
  }
    `;
}
function getMainExecution() {
    return `
  // Automatically perform a request when this script is executed directly
  if (require.main === module) {
    const args = parseArguments();
    const updatedInput = updateInput(DEFAULT_INPUT, args);
    handler(updatedInput).then((result) => {
      const fs = require('fs');
      const path = require('path');
  
      // Write to a file
      if (args.output) {
        fs.writeFileSync(args.output, JSON.stringify(result, null, 2), 'utf-8');
  
        const outputPath = args.output;
        const isAbsolutePath = path.isAbsolute(outputPath);
        const filePath = isAbsolutePath ? outputPath : path.resolve(process.cwd(), outputPath);
  
        console.log('\\nRequest Saved: \\x1b[34mfile://' + filePath + '\\x1b[0m');
      } else {
        // Print to console
        console.log(result);
      }
      process.exit(0);
    }).catch(err => {
      console.error(err);
      process.exit(1);
    });
  }
  
  module.exports = handler;
    `;
}
//# sourceMappingURL=request-script.js.map