import path from 'path';
/**
 * Creates an esbuild plugin that generates the application entry point
 *
 * @remarks
 * The generated entry point includes a reference to a generated server build module.
 *
 * @returns esbuild plugin
 */
export default function generateLwrEntry() {
    return {
        name: 'lwr-entry',
        setup(build) {
            // This file is generated during the build, so it is mapped to a custom namespace
            // to prevent looking for it on the file system.
            build.onResolve({ filter: /.*\/lwr.entry.js$/ }, ({ kind, path }) => {
                if (kind === 'entry-point') {
                    return {
                        path,
                        namespace: 'lwr-entry',
                    };
                }
            });
            build.onLoad({ filter: /.*/, namespace: 'lwr-entry' }, (args) => ({
                contents: [
                    `/* This module is generated */`,
                    `import { createHandler } from '@lwrjs/lambda';`,
                    // Importing the server build module at this point enables support for ESM bundling.
                    // If the server build module was imported in `createHandler`, it would need to be exposed
                    // as CJS.
                    `import * as build from './lwr.build.js';`,
                    // The server build module MUST NOT require asynchronous initialization to support running on MRT
                    // Once MRT supports ESM, top-level await could be used at this point to perform some asynchronous
                    // initialization.
                    `const handler = !process.env.LOCAL ? createHandler(build) : undefined;`,
                    // MRT expects the handler to be a named export: `get`
                    `export { handler as get, build as MRT_APP_CONFIG };`,
                ].join('\n'),
                loader: 'ts',
                resolveDir: path.dirname(args.path),
            }));
        },
    };
}
//# sourceMappingURL=generate-entry-plugin.js.map