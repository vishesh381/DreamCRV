var __defProp = Object.defineProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};

// packages/@lwrjs/instrumentation/src/spans.ts
__markAsModule(exports);
__export(exports, {
  BundleSpan: () => BundleSpan,
  ConfigSpan: () => ConfigSpan,
  CoreSpan: () => CoreSpan,
  DefaultSpans: () => DefaultSpans,
  LambdaSpan: () => LambdaSpan,
  RequestHandlerSpan: () => RequestHandlerSpan,
  ServerTimingSupportedSpans: () => ServerTimingSupportedSpans,
  ViewSpan: () => ViewSpan
});
var ConfigSpan;
(function(ConfigSpan2) {
  ConfigSpan2["LoadConfig"] = "lwr.config.load";
  ConfigSpan2["ExecuteConfigHooks"] = "lwr.config.hooks.init";
  ConfigSpan2["ExecuteStartHooks"] = "lwr.config.hooks.start";
  ConfigSpan2["ExecuteInstrHooks"] = "lwr.config.hooks.instrumentation";
  ConfigSpan2["ResolveConfig"] = "lwr.config.resolve";
  ConfigSpan2["ValidateConfig"] = "lwr.config.validate";
})(ConfigSpan || (ConfigSpan = {}));
var CoreSpan;
(function(CoreSpan2) {
  CoreSpan2["CreateServer"] = "lwr.core.create";
  CoreSpan2["CreateServerContext"] = "lwr.core.context";
  CoreSpan2["InitServer"] = "lwr.core.init";
  CoreSpan2["StartServer"] = "lwr.core.start";
  CoreSpan2["UnhandledRejection"] = "lwr.core.unhandledRejection";
})(CoreSpan || (CoreSpan = {}));
var LambdaSpan;
(function(LambdaSpan2) {
  LambdaSpan2["CreateHandler"] = "lwr.lambda.create";
  LambdaSpan2["CreateServerContext"] = "lwr.lambda.context";
  LambdaSpan2["UnhandledRejection"] = "lwr.lambda.unhandledRejection";
})(LambdaSpan || (LambdaSpan = {}));
var RequestHandlerSpan;
(function(RequestHandlerSpan2) {
  RequestHandlerSpan2["GetView"] = "lwr.handle.view";
  RequestHandlerSpan2["GetAsset"] = "lwr.handle.asset";
  RequestHandlerSpan2["GetModule"] = "lwr.handle.module";
  RequestHandlerSpan2["GetBundle"] = "lwr.handle.bundle";
  RequestHandlerSpan2["GetResource"] = "lwr.handle.resource";
  RequestHandlerSpan2["GetMapping"] = "lwr.handle.mapping";
})(RequestHandlerSpan || (RequestHandlerSpan = {}));
var ViewSpan;
(function(ViewSpan2) {
  ViewSpan2["BootstrapService"] = "lwr.view.ssr.service";
  ViewSpan2["CreateLoader"] = "lwr.view.ssr.createLoader";
  ViewSpan2["ExecuteRouteHandler"] = "lwr.view.routeHandler";
  ViewSpan2["ExecuteServices"] = "lwr.view.ssr.services";
  ViewSpan2["Fetch"] = "lwr.view.ssr.fetch";
  ViewSpan2["Generate"] = "lwr.view.generate";
  ViewSpan2["GetServerData"] = "lwr.view.ssr.data";
  ViewSpan2["LoadAppCode"] = "lwr.view.ssr.loadAppCode";
  ViewSpan2["ParseView"] = "lwr.view.parse";
  ViewSpan2["PreloadData"] = "lwr.view.preload.data";
  ViewSpan2["RenderComponent"] = "lwr.view.ssr.renderComponent";
  ViewSpan2["RenderPage"] = "lwr.view.ssr.renderPage";
  ViewSpan2["RenderIsland"] = "lwr.view.ssr.island";
  ViewSpan2["RenderView"] = "lwr.view.render";
  ViewSpan2["ServerBundle"] = "lwr.view.ssr.bundle";
  ViewSpan2["Transform"] = "lwr.view.transform";
})(ViewSpan || (ViewSpan = {}));
var BundleSpan;
(function(BundleSpan2) {
  BundleSpan2["GetBundle"] = "lwr.bundle.get";
  BundleSpan2["ReadBundle"] = "lwr.bundle.read";
  BundleSpan2["Rollup"] = "lwr.bundle.rollup";
})(BundleSpan || (BundleSpan = {}));
var DefaultSpans = new Set([
  LambdaSpan.CreateHandler,
  LambdaSpan.UnhandledRejection,
  RequestHandlerSpan.GetView,
  RequestHandlerSpan.GetAsset,
  RequestHandlerSpan.GetModule,
  RequestHandlerSpan.GetBundle,
  RequestHandlerSpan.GetResource,
  RequestHandlerSpan.GetMapping,
  ViewSpan.BootstrapService,
  ViewSpan.CreateLoader,
  ViewSpan.ExecuteRouteHandler,
  ViewSpan.Fetch,
  ViewSpan.Generate,
  ViewSpan.GetServerData,
  ViewSpan.LoadAppCode,
  ViewSpan.ParseView,
  ViewSpan.ExecuteServices,
  ViewSpan.RenderComponent,
  ViewSpan.RenderView
]);
var ServerTimingSupportedSpans = new Set([
  RequestHandlerSpan.GetView,
  ViewSpan.ParseView,
  ViewSpan.CreateLoader,
  ViewSpan.LoadAppCode,
  ViewSpan.ExecuteServices,
  ViewSpan.RenderComponent,
  ViewSpan.Generate
]);
