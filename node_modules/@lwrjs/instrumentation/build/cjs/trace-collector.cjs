var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/instrumentation/src/trace-collector.ts
__markAsModule(exports);
__export(exports, {
  convertMetricsToString: () => convertMetricsToString,
  getTraceCollector: () => getTraceCollector
});
var import_api = __toModule(require("@opentelemetry/api"));
var import_core = __toModule(require("@opentelemetry/core"));
var import_spans = __toModule(require("./spans.cjs"));
function convertMetricsToString(traceObj) {
  if (!traceObj)
    return "";
  return Object.entries(traceObj).map(([spanName, duration]) => {
    const metricName = spanName.split("lwr.view.")[1];
    return `${metricName || spanName};dur=${duration}`;
  }).join(",");
}
var TraceCollector = class {
  constructor() {
    this.traceMap = {};
  }
  onStart(span) {
    import_api.context.with((0, import_core.suppressTracing)(import_api.context.active()), () => {
      if (!import_spans.ServerTimingSupportedSpans.has(span.name) || span.status.code !== 0) {
        return;
      }
      const {traceId} = span.spanContext();
      if (!this.traceMap[traceId]) {
        this.traceMap[traceId] = {};
      }
    });
  }
  shutdown() {
    return Promise.resolve();
  }
  forceFlush() {
    return Promise.resolve();
  }
  onEnd(span) {
    import_api.context.with((0, import_core.suppressTracing)(import_api.context.active()), () => {
      if (!import_spans.ServerTimingSupportedSpans.has(span.name) || span.status.code !== 0) {
        return;
      }
      const {traceId} = span.spanContext();
      const traceObj = this.traceMap[traceId], duration = traceObj?.[span.name] || 0;
      if (traceObj) {
        traceObj[span.name] = duration + Number((0, import_core.hrTimeToMilliseconds)(span.duration).toFixed(2));
      }
    });
  }
  getSpansInTrace(traceId) {
    return convertMetricsToString(this.traceMap[traceId]);
  }
  dropTrace(traceId) {
    delete this.traceMap[traceId];
  }
  clearAllTraces() {
    this.traceMap = {};
  }
};
var getTraceCollector = (() => {
  const traceCollector = new TraceCollector();
  return () => traceCollector;
})();
