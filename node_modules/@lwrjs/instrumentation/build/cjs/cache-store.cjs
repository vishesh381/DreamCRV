var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/instrumentation/src/cache-store.ts
__markAsModule(exports);
__export(exports, {
  cacheCountStore: () => cacheCountStore
});
var import_async_hooks = __toModule(require("async_hooks"));
var asyncLocalStorage = new import_async_hooks.AsyncLocalStorage();
var defaultCacheInfo = {missedDefs: 0, missedReads: 0};
var cacheCountStore = {
  startCacheContext: async (callback) => {
    return new Promise((resolve, reject) => {
      asyncLocalStorage.run({...defaultCacheInfo}, async () => {
        try {
          const result = await callback();
          resolve(result);
        } catch (error) {
          reject(error);
        }
      });
    });
  },
  getCache: () => {
    return asyncLocalStorage.getStore();
  },
  incrementCacheKey: (key) => {
    const cache = asyncLocalStorage.getStore();
    if (cache && typeof cache[key] === "number") {
      const current = cache[key];
      cache[key] = current + 1;
    }
  },
  getCacheValue: (key) => {
    const cache = asyncLocalStorage.getStore();
    return cache ? cache[key] : void 0;
  },
  resetCache: () => {
    const cache = asyncLocalStorage.getStore();
    if (cache) {
      Object.keys(defaultCacheInfo).forEach((key) => {
        cache[key] = defaultCacheInfo[key];
      });
    }
  }
};
