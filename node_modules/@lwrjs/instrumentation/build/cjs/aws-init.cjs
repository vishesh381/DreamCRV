var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/instrumentation/src/aws-init.ts
__markAsModule(exports);
__export(exports, {
  default: () => aws_init_default
});
var import_sdk_node = __toModule(require("@opentelemetry/sdk-node"));
var import_resources = __toModule(require("@opentelemetry/resources"));
var import_semantic_conventions = __toModule(require("@opentelemetry/semantic-conventions"));
var import_sdk_trace_node = __toModule(require("@opentelemetry/sdk-trace-node"));
var import_aws_exporter = __toModule(require("./aws-exporter.cjs"));
var import_instrumentation = __toModule(require("@lwrjs/instrumentation"));
var InstrumentationHook = class {
  initInstrumentation() {
    const exporter = new import_aws_exporter.AWSExporter();
    const processor = new import_sdk_trace_node.BatchSpanProcessor(exporter);
    const sdk = new import_sdk_node.NodeSDK({
      resource: new import_resources.Resource({
        [import_semantic_conventions.SemanticResourceAttributes.SERVICE_NAME]: "lwr-project"
      }),
      instrumentations: [],
      spanProcessors: [processor, (0, import_instrumentation.getTraceCollector)()]
    });
    sdk.start();
    return {
      flush() {
        processor.forceFlush();
      }
    };
  }
};
var aws_init_default = InstrumentationHook;
