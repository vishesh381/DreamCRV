import { AsyncLocalStorage } from 'async_hooks';
const asyncLocalStorage = new AsyncLocalStorage();
const defaultCacheInfo = { missedDefs: 0, missedReads: 0 };
export const cacheCountStore = {
    // Start a new cache context with AsyncLocalStorage and return the result of the callback
    startCacheContext: async (callback) => {
        return new Promise((resolve, reject) => {
            asyncLocalStorage.run({ ...defaultCacheInfo }, async () => {
                try {
                    const result = await callback();
                    resolve(result); // Resolve with the callback's result
                }
                catch (error) {
                    reject(error); // Reject if the callback throws an error
                }
            });
        });
    },
    // Retrieve the current cache store; returns undefined if context is not started
    getCache: () => {
        return asyncLocalStorage.getStore();
    },
    // Increment a specific cache key, no-op if context is not started
    incrementCacheKey: (key) => {
        const cache = asyncLocalStorage.getStore();
        // Only increment if cache[key] is already a number
        if (cache && typeof cache[key] === 'number') {
            const current = cache[key];
            cache[key] = current + 1;
        }
    },
    // Get the current value of a specific cache key; returns undefined if context is not started
    getCacheValue: (key) => {
        const cache = asyncLocalStorage.getStore();
        return cache ? cache[key] : undefined;
    },
    // Reset cache values if the context is active
    resetCache: () => {
        const cache = asyncLocalStorage.getStore();
        if (cache) {
            Object.keys(defaultCacheInfo).forEach((key) => {
                cache[key] = defaultCacheInfo[key];
            });
        }
    },
};
//# sourceMappingURL=cache-store.js.map