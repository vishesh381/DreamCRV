import { SpanStatusCode, context, trace } from '@opentelemetry/api';
import { version } from '@lwrjs/instrumentation/package';
import { DefaultSpans } from './spans.js';
import { LWR_TRACE_CONTEXT, getContextKey } from './context.js';
export var TraceLevel;
(function (TraceLevel) {
    TraceLevel["OFF"] = "off";
    TraceLevel["DEFAULT"] = "default";
    TraceLevel["VERBOSE"] = "verbose";
})(TraceLevel || (TraceLevel = {}));
function getTraceLevel() {
    const level = process.env.LWR_TRACING;
    if (!level) {
        return TraceLevel.OFF;
    }
    if (Object.values(TraceLevel).includes(level)) {
        return level;
    }
    return TraceLevel.DEFAULT;
}
function shouldTrace(level, name) {
    return level === TraceLevel.VERBOSE || (level === TraceLevel.DEFAULT && DefaultSpans.has(name));
}
function isPromise(promise) {
    return !!promise && typeof promise.then === 'function';
}
function handleError(span, error) {
    if (error) {
        span.recordException(error);
    }
    span.setStatus({ code: SpanStatusCode.ERROR, message: error?.message });
    span.end();
}
/**
 *  Tracer - encapsulates open-telemetry tracing apis
 */
class Tracer {
    constructor() {
        this.traceLevel = getTraceLevel();
    }
    startSpan(id, options) {
        if (!shouldTrace(this.traceLevel, id.name)) {
            return new DisabledSpan();
        }
        return new LwrSpanImpl(id, options);
    }
    trace(id, fn) {
        if (!shouldTrace(this.traceLevel, id.name)) {
            return fn(new DisabledSpan());
        }
        const api = trace.getTracer('lwr', version);
        const activeContext = context.active();
        return context.with(activeContext.setValue(LWR_TRACE_CONTEXT, getContextKey()), () => {
            return api.startActiveSpan(id.name, (span) => {
                if (id.attributes) {
                    span.setAttributes(id.attributes);
                }
                // Add LWR version to the attributes
                span.setAttribute('lwrVersion', version);
                try {
                    const lwrSpan = {
                        traceId: span.spanContext().traceId,
                        setAttributes: span.setAttributes.bind(span),
                        end: span.end,
                    };
                    const result = fn(lwrSpan);
                    if (isPromise(result)) {
                        result.then(() => span.end(), (err) => handleError(span, err));
                        return result;
                    }
                    span.end();
                    return result;
                }
                catch (err) {
                    handleError(span, err);
                    throw err;
                }
            });
        });
    }
}
/**
 * LwrSpan - encapsulates open-telemetry span functionality
 */
class LwrSpanImpl {
    constructor(id, options) {
        const api = trace.getTracer('lwr', version);
        const activeContext = context.active();
        this.span = api.startSpan(id.name, options, activeContext);
        if (id.attributes) {
            this.setAttributes(id.attributes);
        }
    }
    get traceId() {
        return this.span.spanContext().traceId;
    }
    setAttributes(attributes) {
        this.span.setAttributes(attributes);
        return this;
    }
    end(endTime) {
        this.span.end(endTime);
    }
}
/**
 *  Span that does nothing
 */
class DisabledSpan {
    constructor() {
        this.traceId = '';
    }
    setAttributes(attributes) {
        return this;
    }
    end() {
        return;
    }
}
/**
 * Tracer Singleton
 */
export const getTracer = (() => {
    const tracer = new Tracer();
    return () => tracer;
})();
//# sourceMappingURL=tracer.js.map