import { LWRSpan } from './spans.js';
export declare enum TraceLevel {
    OFF = "off",
    DEFAULT = "default",
    VERBOSE = "verbose"
}
export interface LwrSpan {
    traceId: string;
    setAttributes(attributes: Record<string, string | number | boolean | undefined>): void;
    end(endTime?: number): void;
}
interface TraceID {
    name: LWRSpan;
    attributes?: Record<string, string | number | boolean>;
}
export type TraceFn<T> = (traceId: TraceID, fn: (span: LwrSpan) => Promise<T>) => Promise<T>;
interface TraceOptions {
    startTime?: number;
}
/**
 *  Tracer - encapsulates open-telemetry tracing apis
 */
declare class Tracer {
    private traceLevel;
    startSpan(id: TraceID, options?: TraceOptions): LwrSpan;
    trace<T>(id: TraceID, fn: (span: LwrSpan) => T): T;
}
/**
 * Tracer Singleton
 */
export declare const getTracer: () => Tracer;
export {};
//# sourceMappingURL=tracer.d.ts.map