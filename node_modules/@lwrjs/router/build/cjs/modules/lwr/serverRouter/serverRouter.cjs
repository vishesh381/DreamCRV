var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/router/src/modules/lwr/serverRouter/serverRouter.ts
__markAsModule(exports);
__export(exports, {
  ServerRouter: () => ServerRouter,
  createServerRouter: () => createServerRouter
});
var import_contextProvider = __toModule(require("lwr/contextProvider"));
var import_metrics = __toModule(require("lwr/metrics"));
var import_navigation = __toModule(require("lwr/navigation"));
var import_navigationMixinHacks = __toModule(require("lwr/navigationMixinHacks"));
var import_profiler = __toModule(require("lwr/profiler"));
var import_router = __toModule(require("lwr/router"));
var import_routerErrors = __toModule(require("lwr/routerErrors"));
var import_routerUtils = __toModule(require("lwr/routerUtils"));
var ServerRouter = class {
  constructor(config, router, target) {
    this.contextId = Object.freeze(() => void 0);
    this.router = router;
    this.target = target;
    this.handleNavHook = config.handleNavigation;
    this.preNavHook = config.preNavigate;
    this.errorNavHook = config.errorNavigate;
    this.initWires(config.url);
  }
  async navigate(address, _replace, options) {
    if (import_routerUtils.hasDocument) {
      if (this.handleNavHook && !this.handleNavHook(address)) {
        return;
      }
      const url = await this.getValidatedUrl(address, options);
      if (url) {
        document.location.href = url;
      }
    }
  }
  generateUrl(address, options) {
    return this.router.generateUrl(address, options);
  }
  initWires(url) {
    if (!url && import_routerUtils.hasDocument) {
      url = document.location.href;
    }
    if (!url) {
      this.processError((0, import_routerErrors.generateMessageObject)(import_routerErrors.messages.NO_INIT_URL));
      return;
    }
    url = this.getRelativeUrl(url);
    this.currentRoute = this.router.matchRoute(url, {}) || void 0;
    (0, import_navigation.registerNavigationHelm)(this.contextId, {
      navigate: (address, replace, options) => this.navigate(address, replace, options),
      generateUrl: (address, options) => this.generateUrl(address, options),
      subscribe: () => {
        throw new Error("The server router does not support the subscribe API");
      }
    });
    (0, import_contextProvider.provideContext)(this.contextId, this.target, import_contextProvider.navigationContextContextualizer, import_navigation.NavigationContext);
    (0, import_contextProvider.provideContext)(this.currentRoute?.route.pageReference, this.target, import_contextProvider.currentPageReferenceContextualizer, import_navigation.CurrentPageReference);
    if (import_routerUtils.hasDocument) {
      this.target.addEventListener(import_navigationMixinHacks.CONTEXT_ID_BACKDOOR, (event) => {
        const navCtxEvent = event;
        if (navCtxEvent.detail.callback) {
          navCtxEvent.detail.callback(this.contextId);
        }
      });
    }
  }
  getRelativeUrl(url) {
    if (url.startsWith("http")) {
      const parsed = new URL(url);
      return `${parsed.pathname}${parsed.search}`;
    }
    return url;
  }
  async getValidatedUrl(address, options) {
    const routingMatch = this.router.matchRoute(address, {});
    if (!routingMatch) {
      this.processError((0, import_routerErrors.generateMessageObject)(import_routerErrors.messages.NO_ROUTE_MATCH, [JSON.stringify(address)]));
      return;
    }
    const valid = this.preNavHook && await this.preNavHook({
      current: this.currentRoute,
      next: routingMatch
    });
    if (!valid) {
      this.processError((0, import_routerErrors.generateMessageObject)(import_routerErrors.messages.PRENAV_FAILED, [JSON.stringify(address)]));
      return;
    }
    return this.router.generateUrl(address, options);
  }
  processError(messageObject) {
    (0, import_profiler.logOperationStart)({id: import_metrics.ROUTER_ERROR});
    this.errorNavHook && this.errorNavHook(messageObject);
  }
};
function createServerRouter(config, target) {
  new ServerRouter(config, (0, import_router.createRouter)(config), target);
}
