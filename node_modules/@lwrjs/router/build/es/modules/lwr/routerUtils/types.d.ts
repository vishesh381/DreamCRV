import type { Key, PathFunction } from './pathToRegexp.js';
import type { ContextId } from 'lwr/navigationContext';
import type { Unsubscriber } from 'lwr/observable';
export type Module = Record<string | symbol | number, unknown>;
export type Constructor<T = object> = new (...args: any[]) => T;
export interface Constructable<T = object> {
    constructor: Constructor<T>;
}
export type UrlMapper<TAddress> = {
    generateUrl(address: TAddress, options?: NavigateOptions): string | null;
    parseUrl(url: string): TAddress | null;
};
export type RouteMatcher<TAddress> = {
    matchRoute(address: TAddress, options?: NavigateOptions): RoutingMatch | null;
};
export type ViewMapper<TAddress> = {
    navigate(address: TAddress, options?: NavigateOptions): void;
    subscribe(callback: RouteCallback, replay?: boolean): Unsubscriber;
    resolveView(address: TAddress): Promise<RouteDestination>;
    contextId?: ContextId;
};
export type Router<TAddress = string> = ViewMapper<TAddress> & UrlMapper<TAddress> & RouteMatcher<TAddress>;
export type DEPRECATED_getRouteFromUrl<TAddress> = (url: string, defaultImpl: UrlMapper<TAddress>['parseUrl']) => TAddress | null;
export type DEPRECATED_getUrlFromRoute<TAddress> = (route: TAddress, defaultImpl: UrlMapper<TAddress>['generateUrl'], options?: NavigateOptions) => string | null;
export type I18nRouterConfig = {
    locale: string;
    defaultLocale: string;
};
export type RouterConfig<TAddress> = {
    basePath?: string;
    i18n?: I18nRouterConfig;
    routes?: RouteDefinition[];
    caseSensitive?: boolean;
    DEPRECATED_getRouteFromUrl?: DEPRECATED_getRouteFromUrl<TAddress>;
    DEPRECATED_getUrlFromRoute?: DEPRECATED_getUrlFromRoute<TAddress>;
};
export type RouterSerializationConfig<TAddress> = Required<Omit<RouterConfig<TAddress>, 'DEPRECATED_getRouteFromUrl' | 'DEPRECATED_getUrlFromRoute'> & UrlMapper<TAddress>>;
export type RouteParameterPatterns = {
    [paramName: string]: string;
};
export interface RouteDefinition<TMetadata = Record<string, any>> {
    id: string;
    uri: string;
    patterns?: RouteParameterPatterns;
    exact?: boolean;
    page: Partial<PageReference>;
    handler?: () => Promise<RouteHandlerModule>;
    metadata?: TMetadata;
}
export type PageBindings = {
    attributeBindings: NullableStringAttributes;
    stateBindings: NullableStringAttributes;
};
type CompiledQueryResult = {
    literalValue?: string | null;
    routeParamName?: string;
};
export type CompiledQuery = Record<string, CompiledQueryResult>;
type MatchedQueryResult = {
    value: string | null;
    routeParamName?: string;
};
export type MatchedQuery = Record<string, MatchedQueryResult>;
export type QueryMatcher = (queryObject: QueryObject) => MatchedQuery | null;
export interface CompiledRouteDefinition {
    original: RouteDefinition;
    regex: RegExp;
    params: Key[];
    toPath: PathFunction<object>;
    compiledQuery: CompiledQuery;
    queryMatcher: QueryMatcher;
}
export type RouteHandlerCallback = (routeDestination: RouteDestination) => void;
export type RouteHandlerClass = {
    new (callback: RouteHandlerCallback): RouteHandler;
};
export type RouteHandlerModule = {
    default: RouteHandlerClass;
};
export interface RouteInstance {
    id: string;
    attributes: NullableStringAttributes;
    state: NullableStringAttributes;
    pageReference: PageReference;
}
export type RouteDestination = {
    status?: 200 | 404 | 500;
    viewset: ViewSet;
    error?: Error;
};
export type RoutingMatch = {
    pathMatch: string;
    route: RouteInstance;
    routeDefinition: RouteDefinition;
};
export interface CompiledRoutingMatch {
    route: RouteInstance;
    routeDefinition: CompiledRouteDefinition;
}
export type RoutingResult = RoutingMatch & RouteDestination;
export interface ViewSet {
    [viewName: string]: (() => Promise<Module>) | ViewInfo;
}
export interface ViewInfo {
    module: () => Promise<Module>;
    specifier: string;
}
export type RouteCallback = (result: RoutingResult) => void;
export interface RouteHandler {
    dispose(): void;
    update(routeInfo: RouteInstance): void;
}
export interface PageReference {
    type: string;
    attributes: NullableStringAttributes;
    state: NullableStringAttributes;
}
export interface MessageObject {
    code: string | number;
    message: string;
    level: number;
    stack?: string;
    url?: string;
    address?: string;
}
export type QueryObject = NullableStringAttributes;
export interface StringAttributes {
    [key: string]: string;
}
export interface NullableStringAttributes {
    [key: string]: string | null;
}
export interface NavigateOptions {
    locale?: string;
}
export {};
//# sourceMappingURL=types.d.ts.map