var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { LightningElement, api, wire } from 'lwc';
import { CurrentView } from 'lwr/navigation';
export default class Outlet extends LightningElement {
    constructor() {
        super(...arguments);
        this.refocusOff = false;
        this.viewName = 'default';
        this.viewCtor = undefined;
        this.previousViewCtor = undefined;
        this.hasError = false;
    }
    // Get a reference to the current view
    setView(currentView) {
        this.hasError = false;
        this.viewCtor = currentView;
        this.refocus();
    }
    renderedCallback() {
        if (this.viewCtor !== this.previousViewCtor) {
            this.previousViewCtor = this.viewCtor;
            const viewChangedEvent = new CustomEvent('viewchange', { detail: this.viewCtor });
            this.dispatchEvent(viewChangedEvent);
        }
    }
    errorCallback(e, stack) {
        // when hosted view has unhandled error thrown:
        //  - display the error slot
        //  - dispatch the "viewchange" event
        //  - call the outletErrorCallback()
        this.hasError = true;
        const viewErrorEvent = new CustomEvent('viewerror', { detail: { error: e, stack } });
        this.dispatchEvent(viewErrorEvent);
        if (this.outletErrorCallback) {
            this.outletErrorCallback(e, stack);
        }
        else {
            console.error(e);
        }
    }
    refocus() {
        // If the feature is not turned off, put the browser focus onto the dynamic content.
        // This is done after a route change for accessibility.
        if (!this.refocusOff) {
            const region = this.querySelector(`div[role='region'].outlet`);
            if (region)
                region.focus();
        }
    }
}
Outlet.renderMode = 'light';
__decorate([
    api
], Outlet.prototype, "refocusOff", void 0);
__decorate([
    api
], Outlet.prototype, "outletErrorCallback", void 0);
__decorate([
    api
], Outlet.prototype, "viewName", void 0);
__decorate([
    wire(CurrentView, { viewName: '$viewName' })
], Outlet.prototype, "setView", null);
//# sourceMappingURL=outlet.js.map