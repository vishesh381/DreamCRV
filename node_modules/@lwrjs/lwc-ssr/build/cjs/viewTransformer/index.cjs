var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/lwc-ssr/src/viewTransformer/index.ts
__markAsModule(exports);
__export(exports, {
  default: () => lwcSsrViewTransformer
});
var import_diagnostics = __toModule(require("@lwrjs/diagnostics"));
var import_instrumentation = __toModule(require("@lwrjs/instrumentation"));
var import_shared_utils = __toModule(require("@lwrjs/shared-utils"));
var import_utils = __toModule(require("../utils.cjs"));
var import_renderer = __toModule(require("../renderer.cjs"));
function lwcSsrViewTransformer(options, {config, moduleBundler, resourceRegistry}) {
  const routes = [...config.routes, ...config.errorRoutes];
  return {
    name: "ssr-lwc-transformer",
    async link(stringBuilder, viewContext, metadata) {
      if (!viewContext.view.bootstrap?.ssr) {
        return {};
      }
      import_diagnostics.logger.debug({label: "lwcSsrViewTransformer", message: "link"});
      import_diagnostics.logger.verbose({
        label: "lwcSsrViewTransformer",
        message: "link input",
        additionalInfo: stringBuilder
      });
      if (!metadata.serverData) {
        metadata.serverData = {};
      }
      if (!metadata.serverDebug) {
        metadata.serverDebug = {};
      }
      const allBundles = new Set([...metadata.serverBundles ?? []]);
      const {customElements, serverData, serverDebug} = metadata;
      const {debug} = viewContext.runtimeEnvironment;
      const ssrModules = getComponentsToSSR(customElements, stringBuilder);
      const rootSpecifiers = Object.values(ssrModules).map((m) => m.specifier);
      if (!rootSpecifiers.length) {
        return {};
      }
      const islands = rootSpecifiers.join(",");
      let pageTtl;
      await (0, import_instrumentation.getTracer)().trace({name: import_instrumentation.ViewSpan.RenderIsland, attributes: {specifiers: islands}}, async () => {
        const route = routes.find((r) => r.id === viewContext.view.id);
        if (!route) {
          throw new Error(`Unable to resolve configuration for view: ${viewContext.view.id}`);
        }
        const {
          results,
          errors,
          bundles: islandBundles
        } = await (0, import_renderer.getRenderer)(config, moduleBundler, resourceRegistry).render(ssrModules, route, viewContext.runtimeEnvironment, viewContext.runtimeParams, metadata.serverData, false);
        for (const root in results) {
          const {html, props, cache} = results[root];
          const {tagName, startOffset, endOffset, hydrate} = ssrModules[root];
          pageTtl = (0, import_shared_utils.shortestTtl)(cache?.ttl, pageTtl);
          if (html) {
            let propsAttr = "";
            if (hydrate) {
              const propsId = (0, import_utils.getPropsId)();
              propsAttr = ` ${import_utils.SSR_PROPS_ATTR}="${propsId}"`;
              serverData[propsId] = props;
            }
            const [, remain] = html.split(`<${tagName}`);
            stringBuilder.overwrite(startOffset, endOffset, [`<${tagName}`, propsAttr, remain].join(""));
          }
        }
        metadata.serverBundles = islandBundles ? new Set([...allBundles, ...islandBundles]) : allBundles;
        results && (0, import_utils.addHeadMarkup)(Object.values(results), stringBuilder);
        errors && handleErrors(errors, customElements, islands, debug, serverDebug);
      });
      import_diagnostics.logger.verbose({
        label: "lwcSsrViewTransformer",
        message: "response",
        additionalInfo: stringBuilder
      });
      return {cache: {ttl: pageTtl}};
    }
  };
}
function getComponentsToSSR(customElements, stringBuilder) {
  const cmpInfo = {};
  for (const {tagName, location, props: rawProps = {}} of customElements.values()) {
    const isCsr = (0, import_shared_utils.isCsrIsland)(rawProps);
    if (isCsr && location) {
      const {startOffset, endOffset} = location;
      stringBuilder.overwrite(startOffset, endOffset, `<${tagName}></${tagName}>`);
    }
    if (!isCsr && !rawProps?.["lwc:external"] && location) {
      const {startOffset, endOffset} = location;
      const specifier = (0, import_shared_utils.kebabCaseToModuleSpecifier)(tagName);
      const hydrate = (0, import_shared_utils.isHydrateOnLoad)(rawProps);
      const props = {...rawProps};
      delete props[import_shared_utils.HYDRATE_DIRECTIVE];
      cmpInfo[specifier] = {startOffset, endOffset, props, tagName, specifier, hydrate};
    }
  }
  return cmpInfo;
}
function handleErrors(errors, customElements, specifiers, debug, serverDebug) {
  const allErrors = Object.values(errors).join(", ");
  if ((!debug || (0, import_shared_utils.isLocalDev)()) && !(0, import_shared_utils.getFeatureFlags)().SSR_WITH_CSR_FALLBACK) {
    throw (0, import_diagnostics.createSingleDiagnosticError)({
      description: import_diagnostics.descriptions.APPLICATION.SSR_ERROR(specifiers, allErrors)
    }, import_diagnostics.LwrApplicationError);
  }
  Object.entries(errors).forEach(([specifier, err]) => {
    const ce = customElements.find(({tagName}) => specifier === (0, import_shared_utils.kebabCaseToModuleSpecifier)(tagName));
    if (ce) {
      ce.props === void 0 ? ce.props = {
        [import_shared_utils.HYDRATE_DIRECTIVE]: import_shared_utils.HYDRATE_CLIENT_VALUE
      } : ce.props[import_shared_utils.HYDRATE_DIRECTIVE] = import_shared_utils.HYDRATE_CLIENT_VALUE;
    }
    const errMessage = (0, import_utils.createSsrErrorMessage)(specifier, err);
    import_diagnostics.logger.warn(errMessage, err);
  });
  if (debug) {
    serverDebug.message = (0, import_utils.createSsrErrorMessage)(specifiers, allErrors);
  }
}
