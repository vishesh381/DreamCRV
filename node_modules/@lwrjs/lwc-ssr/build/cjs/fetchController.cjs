var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/lwc-ssr/src/fetchController.ts
__markAsModule(exports);
__export(exports, {
  FetchController: () => FetchController
});
var import_undici = __toModule(require("undici"));
var import_diagnostics = __toModule(require("@lwrjs/diagnostics"));
var import_instrumentation = __toModule(require("@lwrjs/instrumentation"));
var import_shared_utils = __toModule(require("@lwrjs/shared-utils"));
var ROUTE_CORE_HEADER = "X-SFDC-Route-Core";
var CORE_CLIENTS = new Map();
var FetchController = class {
  constructor(context) {
    this.controlledFetch = (request, init) => {
      if (this.killSwitchActivated) {
        return this.handleAbortError(request, void 0);
      }
      if (!this.abortController) {
        this.abortController = new AbortController();
      }
      const signal = this.abortController?.signal;
      const updatedInit = {
        ...init,
        headers: {...init?.headers, ...this.headers},
        signal
      };
      const fetchFunction = this.noOpActivated ? this.fetchNoOp(request, updatedInit) : this.fetchEndowment(request, updatedInit);
      const fetchPromise = fetchFunction.catch((error) => {
        if (error && error?.stack.startsWith("AbortError")) {
          return this.handleAbortError(request, error);
        } else {
          throw error;
        }
      });
      return fetchPromise;
    };
    this.activateKillSwitch = () => {
      this.killSwitchActivated = true;
      this.abortController?.abort();
      this.abortController = void 0;
    };
    this.deactivateKillSwitch = () => {
      this.killSwitchActivated = false;
    };
    this.activateNoOp = () => {
      this.noOpActivated = true;
    };
    this.deactivateNoOp = () => {
      this.noOpActivated = false;
    };
    this.setFetchRequestContext = (context) => {
      const {abortController, host, headers, requestDepth, coreProxy} = context;
      this.host = host;
      this.headers = headers;
      this.requestDepth = requestDepth;
      this.coreProxy = coreProxy;
      this.abortController = abortController;
    };
    this.killSwitchActivated = false;
    this.noOpActivated = false;
    this.setFetchRequestContext(context);
    this.fetchEndowment = this.createFetchEndowment();
  }
  handleAbortError(request, error) {
    const message = `Orphaned ${String(request)} request was killed. Either the request timed out or it was dispatched during SSR. Async processes are not supported during SSR. For more information, see: https://developer.salesforce.com/docs/platform/lwr/guide/lwr-configure-component-ssr.html.`;
    import_diagnostics.logger.warn({label: `Server-side Rendering`, message}, error);
    return Promise.resolve(new Response(message, {status: 500}));
  }
  fetchNoOp(request, init) {
    return new Promise((resolve) => {
      if (!init?.signal) {
        resolve(this.handleAbortError(request, new Error("RequestInit was not setup as expected")));
      } else if (init.signal.aborted) {
        resolve(this.handleAbortError(request, new Error("Request was aborted")));
      } else {
        const abortHandler = (err) => {
          init?.signal?.removeEventListener("abort", abortHandler);
          resolve(this.handleAbortError(request, err));
        };
        init.signal.addEventListener("abort", abortHandler);
      }
    });
  }
  createFetchEndowment() {
    return (request, init) => {
      const {host = "", requestDepth = 1, coreProxy} = this;
      const origin = coreProxy?.origin && coreProxy.origin.startsWith("http") ? coreProxy.origin : host;
      const {finalRequest, finalUrl} = this.getFinalRequest(request, origin);
      const finalInit = {
        ...init,
        headers: {
          ...init?.headers,
          [import_shared_utils.REQUEST_DEPTH_HEADER]: String(requestDepth)
        }
      };
      if (coreProxy || host && finalUrl.startsWith(host)) {
        finalInit.headers[ROUTE_CORE_HEADER] = "true";
      }
      const proxyStr = coreProxy ? JSON.stringify(coreProxy) : "none";
      const hasCookies = this.headers && this.headers.Cookie ? "yes" : "no";
      import_diagnostics.logger.info({
        label: `pre ${import_instrumentation.ViewSpan.Fetch}`,
        message: `finalUrl: ${finalUrl}, coreProxy: ${proxyStr}, hasCookies: ${hasCookies}`
      });
      return (0, import_instrumentation.getTracer)().trace({
        name: import_instrumentation.ViewSpan.Fetch,
        attributes: {url: finalUrl, fetchType: "cdn", coreProxy: proxyStr, hasCookies}
      }, (span) => {
        const addInfoToSpan = (res) => {
          res.url && span.setAttributes({url: res.url});
          span.setAttributes({statusCode: res.status});
          return res;
        };
        if (coreProxy) {
          return this.fetchWithAgent(finalUrl, finalInit, host, coreProxy, span).then((res) => addInfoToSpan(res)).catch((err) => {
            const {finalRequest: cdnRequest, finalUrl: cdnUrl} = this.getFinalRequest(request, host);
            import_diagnostics.logger.warn(`Fetching data directly from Core failed, retrying through CDN: ${cdnUrl} Error is: ${err.message || err}`);
            span.setAttributes({fetchType: "cdnFallback"});
            return fetch(cdnRequest, finalInit).then((res) => addInfoToSpan(res));
          });
        }
        return fetch(finalRequest, finalInit).then((res) => addInfoToSpan(res));
      });
    };
  }
  getFinalRequest(request, host) {
    let finalRequest;
    let finalUrl;
    if (request instanceof Request) {
      const curUrl = request.url;
      if (curUrl.startsWith("/")) {
        finalUrl = host + curUrl;
        finalRequest = new Request(finalUrl, request);
      } else {
        finalUrl = curUrl;
        finalRequest = request;
      }
    } else {
      const curUrl = typeof request === "string" ? request : request.toString();
      finalRequest = finalUrl = curUrl.startsWith("/") ? host + curUrl : curUrl;
    }
    return {finalRequest, finalUrl};
  }
  async fetchWithAgent(rawUrl, init, forwardedHost, coreProxy, span) {
    let {origin, servername} = coreProxy;
    const host = coreProxy.host ?? forwardedHost.replace(/^https?:\/\//, "");
    const ENHANCED_DOMAIN_TLD = ".site.com";
    const MY_DOMAIN_TLD = ".salesforce.com";
    if (forwardedHost.endsWith(ENHANCED_DOMAIN_TLD)) {
      origin = forwardedHost.slice(0, -ENHANCED_DOMAIN_TLD.length) + MY_DOMAIN_TLD;
      servername = origin;
    } else if (origin.startsWith(".")) {
      origin = forwardedHost + origin;
    }
    const urlParts = new URL(rawUrl);
    const path = urlParts.pathname + urlParts.search;
    const url = origin + path;
    span.setAttributes({
      fetchType: "direct",
      url,
      coreUrl: url,
      coreHostHeader: host,
      coreServername: servername
    });
    let client = CORE_CLIENTS.get(origin);
    if (!client) {
      client = new import_undici.Pool(origin, {
        connections: parseInt(process.env.CLIENT_CONNECTION_LIMIT ?? "100", 10),
        keepAliveTimeout: 3e4
      });
      CORE_CLIENTS.set(origin, client);
    }
    return client.request({
      ...init,
      method: init.method || "GET",
      path,
      headers: {...init?.headers, Host: host},
      servername
    }).then(async (res) => {
      span.setAttributes({coreStatusCode: res.statusCode});
      const bodyBuffer = await res.body.arrayBuffer();
      const body = res.statusCode === 204 || res.statusCode === 205 ? null : bodyBuffer;
      const headers = new Headers();
      for (const [key, value] of Object.entries(res.headers)) {
        if (!value)
          continue;
        const values = Array.isArray(value) ? value : [value];
        values.forEach((v) => headers.append(key, v));
      }
      return new Response(body, {status: res.statusCode, headers});
    });
  }
};
