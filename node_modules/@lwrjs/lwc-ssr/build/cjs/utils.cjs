var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/lwc-ssr/src/utils.ts
__markAsModule(exports);
__export(exports, {
  SSR_PROPS_ATTR: () => SSR_PROPS_ATTR,
  addHeadMarkup: () => addHeadMarkup,
  createHeadMarkup: () => createHeadMarkup,
  createSsrErrorMarkup: () => createSsrErrorMarkup,
  createSsrErrorMessage: () => createSsrErrorMessage,
  getLoaderConfig: () => getLoaderConfig,
  getLoaderId: () => getLoaderId,
  getLoaderShim: () => getLoaderShim,
  getPropsId: () => getPropsId,
  getRenderTimeout: () => getRenderTimeout,
  getServerBootstrapServices: () => getServerBootstrapServices
});
var import_diagnostics = __toModule(require("@lwrjs/diagnostics"));
var import_shared_utils = __toModule(require("@lwrjs/shared-utils"));
var DEFAULT_SSR_TIMEOUT = 5e3;
var SSR_PROPS_ATTR = "data-lwr-props-id";
function getPropsId() {
  return `lwcprops${Math.floor(Math.random() * 65536).toString(16)}`;
}
function getRenderTimeout() {
  const override = process.env.SSR_TIMEOUT;
  return override ? Number.parseInt(override) : DEFAULT_SSR_TIMEOUT;
}
function createSsrErrorMessage(specifier, e, fallback = true) {
  const fallbackMsg = fallback ? " Falling back to client-side rendering." : "";
  return `Server-side rendering for "${specifier}" failed.${fallbackMsg} Reason: ${(0, import_diagnostics.stringifyError)(e)}`;
}
function createSsrErrorMarkup(errors, basePath) {
  let markup = '<div style="font-family:sans-serif;margin:50px;font-size:1.2em;"><h1>500: Server-side rendering failed</h1><p>Reasons:</p><ul>';
  Object.entries(errors).forEach(([specifier, reason]) => {
    markup += `<li><strong>${specifier}</strong>: ${(0, import_diagnostics.stringifyError)(reason)}</li>`;
  });
  markup += `</ul><p style="padding-top:1em;">See more information in the browser console. Contact your administrator for assistance.</p></div>`;
  return markup;
}
async function getLoaderShim(resourceRegistry, runtimeEnvironment, bootstrapConfig) {
  const {debug} = runtimeEnvironment;
  const useDebug = debug && !(0, import_shared_utils.isLambdaEnv)();
  const specifier = (0, import_shared_utils.getFeatureFlags)().LEGACY_LOADER ? useDebug ? "lwr-loader-shim-legacy.bundle.js" : "lwr-loader-shim-legacy.bundle.min.js" : useDebug ? "lwr-loader-shim.bundle.js" : "lwr-loader-shim.bundle.min.js";
  const resource = await resourceRegistry.getResource({specifier, version: bootstrapConfig.lwrVersion}, runtimeEnvironment, {ignoreDebug: !useDebug});
  if (!resource?.content && !resource?.stream) {
    throw new Error("Failed to find the loader shim");
  }
  let result = "";
  if (resource.content) {
    result = resource.content;
  } else {
    const stream = resource.stream();
    for await (const chunk of stream) {
      result += chunk;
    }
  }
  result += `
//# sourceURL=${resource.entry}`;
  return result;
}
function getLoaderId(config, bootstrapConfig) {
  if (config.requiredModules) {
    const id = config.requiredModules.find((specifier) => specifier.startsWith("lwr/loader"));
    if (id) {
      return id;
    }
  }
  const version = (0, import_shared_utils.normalizeVersionToUri)(bootstrapConfig.lwrVersion);
  return (0, import_shared_utils.getFeatureFlags)().LEGACY_LOADER ? `lwr/loaderLegacy/v/${version}` : `lwr/loader/v/${version}`;
}
function getLoaderConfig(bootstrapModule, config, runtimeParams, serverData) {
  return Object.assign({}, {
    bootstrapModule,
    serverData,
    autoBoot: false,
    disableInitDefer: true,
    rootComponents: [],
    endpoints: {
      uris: {
        mapping: `/1/mapping/amd/1/l/${runtimeParams.locale ?? config.i18n.defaultLocale}/mp/`
      }
    },
    env: {
      ...(0, import_shared_utils.buildEnvironmentContext)(runtimeParams),
      SSR: true
    }
  }, (0, import_shared_utils.getFeatureFlags)().LEGACY_LOADER ? {
    baseUrl: "ssr"
  } : {
    baseUrl: "/",
    imports: {
      "any/thing.js": ["any/thing"]
    }
  });
}
function getServerBootstrapServices(route) {
  return route.bootstrap.services.reduce((acc, service) => {
    if (service.ssr === true) {
      const serviceId = (0, import_shared_utils.getSpecifier)({specifier: service.name, version: service.version});
      acc.push(serviceId);
    }
    return acc;
  }, []);
}
function createMetaTags(meta) {
  return meta.reduce((metaStr, {name, content, httpEquiv}) => {
    if (!name && !content && !httpEquiv)
      return metaStr;
    const nameStr = name ? ` name="${name}"` : "", httpEquivStr = httpEquiv ? ` http-equiv="${httpEquiv}"` : "", contentStr = content ? ` content="${content}"` : "";
    return metaStr + `<meta${nameStr}${httpEquivStr}${contentStr}>
`;
  }, "");
}
function createScriptTags(scripts) {
  return scripts.reduce((scriptStr, {body}) => scriptStr + `<script type="application/ld+json">${body}</script>
`, "");
}
function createLinkTags(links) {
  return links.reduce((linkStr, {href, rel, as, fetchpriority}) => {
    const relStr = rel ? ` rel="${rel}"` : "", asStr = as ? ` as="${as}"` : "", fetchStr = fetchpriority ? ` fetchpriority="${fetchpriority}"` : "";
    return linkStr + `<link href="${href}"${relStr}${asStr}${fetchStr}>
`;
  }, "");
}
function createStyleTags(styles) {
  return styles.reduce((styleStr, {body, id}) => {
    const idStr = id ? ` id="${id}"` : "";
    return styleStr + `<style type="text/css"${idStr}>${body}</style>
`;
  }, "");
}
function createHeadMarkup(results) {
  let hasTitle = false;
  return results.reduce((str, {markup: {title, scripts = [], meta = [], links = [], styles = []} = {}}) => {
    if (title && !hasTitle) {
      hasTitle = true;
      str += `<title>${title}</title>
`;
    }
    return str + createMetaTags(meta) + createScriptTags(scripts) + createLinkTags(links) + createStyleTags(styles);
  }, "");
}
function addHeadMarkup(results, stringBuilder) {
  const headMarkup = createHeadMarkup(Object.values(results));
  if (headMarkup) {
    const headIndex = stringBuilder.original.indexOf("</head>");
    if (headIndex >= 0) {
      stringBuilder.prependLeft(headIndex, headMarkup);
    } else {
      import_diagnostics.logger.error("Adding markup during server-side rendering failed. Could not find the </head> tag.");
    }
  }
}
