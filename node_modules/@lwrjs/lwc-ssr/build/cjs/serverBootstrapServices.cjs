var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/lwc-ssr/src/serverBootstrapServices.ts
__markAsModule(exports);
__export(exports, {
  ServerBootstrapServices: () => ServerBootstrapServices,
  createServerBootstrapServices: () => createServerBootstrapServices,
  evaluateServerBootstrapModule: () => evaluateServerBootstrapModule
});
var import_instrumentation = __toModule(require("@lwrjs/instrumentation"));
var import_diagnostics = __toModule(require("@lwrjs/diagnostics"));
var ServerBootstrapServices = class {
  evaluateServerDataHooks(serverData = {}) {
    for (const serverDataHook of this.serverDataCallbacks) {
      serverDataHook({serverData});
    }
  }
  evaluateRequestHooks(request) {
    for (const requestHook of this.requestHooks) {
      requestHook(request);
    }
  }
  constructor(loader) {
    this.serverDataCallbacks = [];
    this.requestHooks = [];
    this._serviceAPI = {
      addServerDataCallback: this.registerServerDataCallbacks.bind(this),
      addLoaderPlugin: (hooks) => {
        if (hooks.loadModule) {
          throw new Error("`loadModule` loader hook is not supported on the server.");
        }
        return loader.services.addLoaderPlugin(hooks);
      },
      addRequestHook: this.registerRequestHooks.bind(this)
    };
  }
  get serviceAPI() {
    return this._serviceAPI;
  }
  registerServerDataCallbacks(serverDataCallback) {
    this.serverDataCallbacks.push(serverDataCallback);
  }
  registerRequestHooks(requestHook) {
    this.requestHooks.push(requestHook);
  }
};
function createServerBootstrapServices(loader) {
  return new ServerBootstrapServices(loader);
}
function evaluateServerBootstrapModule(serviceModule, serviceApi) {
  return (0, import_instrumentation.getTracer)().trace({
    name: import_instrumentation.ViewSpan.BootstrapService,
    attributes: {serviceSpecifier: serviceModule.specifier}
  }, async () => {
    try {
      await serviceModule.module.default(serviceApi);
    } catch (e) {
      const message = `An SSR error occurred in bootstrap service "${serviceModule.specifier}": ${(0, import_diagnostics.stringifyError)(e)}`;
      import_diagnostics.logger.error(message);
      return message;
    }
  });
}
