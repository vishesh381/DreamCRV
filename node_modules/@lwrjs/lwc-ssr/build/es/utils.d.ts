import type { ClientBootstrapConfig, EnvironmentContext, LwrStringBuilder, NormalizedLwrAppBootstrapConfig, NormalizedLwrErrorRoute, NormalizedLwrRoute, ProviderAppConfig, PublicResourceRegistry, RuntimeEnvironment, RuntimeParams, ServerData, SsrDataResponse } from '@lwrjs/types';
interface ServerEnvironment extends EnvironmentContext {
    SSR: boolean;
}
export declare const SSR_PROPS_ATTR = "data-lwr-props-id";
export declare function getPropsId(): string;
export declare function getRenderTimeout(): number;
export declare function createSsrErrorMessage(specifier: string, e: any, fallback?: boolean): string;
export declare function createSsrErrorMarkup(errors: Record<string, string>, basePath: string): string;
export declare function getLoaderShim(resourceRegistry: PublicResourceRegistry, runtimeEnvironment: RuntimeEnvironment, bootstrapConfig: NormalizedLwrAppBootstrapConfig): Promise<string>;
export declare function getLoaderId(config: ClientBootstrapConfig, bootstrapConfig: NormalizedLwrAppBootstrapConfig): string;
export declare function getLoaderConfig(bootstrapModule: string, config: ProviderAppConfig, runtimeParams: RuntimeParams, serverData: ServerData): ClientBootstrapConfig & {
    env: ServerEnvironment;
};
export declare function getServerBootstrapServices(route: NormalizedLwrRoute | NormalizedLwrErrorRoute): string[];
/**
 * Serialize SsrDataResponse.markup into an HTML string
 * @param results An array of responses from getServerData hooks
 * @returns A string of HTML generated from markup metadata
 */
export declare function createHeadMarkup(results: SsrDataResponse[]): string;
/**
 * Serialize SsrDataResponse.markup into HTML, then add it to the <head> of a base doc
 * @param results An array of responses from getServerData hooks
 * @param stringBuilder The string builder for a base document
 */
export declare function addHeadMarkup(results: SsrDataResponse[], stringBuilder: LwrStringBuilder): void;
export {};
//# sourceMappingURL=utils.d.ts.map