import type { BundleDefinition, ClientBootstrapConfig, NormalizedLwrAppBootstrapConfig, ProviderAppConfig, PublicModuleBundler, PublicResourceRegistry, RuntimeEnvironment, RuntimeParams, ServerData, ServerServiceAPI } from '@lwrjs/types';
import type { FetchRequestContext } from './fetchController.js';
export declare const FETCH_ABORT_KEY = "__fetchAbortId__";
export interface Context extends Record<string, any> {
    LWR: ClientBootstrapConfig;
}
export interface ContextController {
    enableNoOpFetch: () => void;
    disableNoOpFetch: () => void;
    enableFetchKillSwitch: () => void;
    disableFetchKillSwitch: () => void;
    setFetchRequestContext: (context: FetchRequestContext) => void;
}
export interface ModuleLoader {
    load: (specifier: string, aliases?: string[]) => Promise<any>;
    getFetchController: () => ContextController;
    resetGlobalContext: () => void;
    getContext: () => Context;
    clearRegistry: Function;
    services: ServerServiceAPI;
    clearBundles: () => void;
    getBundles: () => Set<BundleDefinition>;
}
export declare function createModuleLoader(config: ProviderAppConfig, resourceRegistry: PublicResourceRegistry, bundleRegistry: PublicModuleBundler, runtimeEnvironment: RuntimeEnvironment, runtimeParams: RuntimeParams, serverData: ServerData, bootstrapConfig: NormalizedLwrAppBootstrapConfig, abortController?: AbortController): Promise<ModuleLoader>;
//# sourceMappingURL=moduleLoader.d.ts.map