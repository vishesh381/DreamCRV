import { ViewSpan, getTracer } from '@lwrjs/instrumentation';
import { logger, stringifyError } from '@lwrjs/diagnostics';
export class ServerBootstrapServices {
    evaluateServerDataHooks(serverData = {}) {
        // now that we have server data, run the server data hooks
        for (const serverDataHook of this.serverDataCallbacks) {
            serverDataHook({ serverData });
        }
    }
    evaluateRequestHooks(request) {
        for (const requestHook of this.requestHooks) {
            requestHook(request);
        }
    }
    constructor(loader) {
        this.serverDataCallbacks = [];
        this.requestHooks = [];
        this._serviceAPI = {
            addServerDataCallback: this.registerServerDataCallbacks.bind(this),
            addLoaderPlugin: (hooks) => {
                if (hooks.loadModule) {
                    throw new Error('`loadModule` loader hook is not supported on the server.');
                }
                return loader.services.addLoaderPlugin(hooks);
            },
            addRequestHook: this.registerRequestHooks.bind(this),
        };
    }
    get serviceAPI() {
        return this._serviceAPI;
    }
    registerServerDataCallbacks(serverDataCallback) {
        this.serverDataCallbacks.push(serverDataCallback);
    }
    registerRequestHooks(requestHook) {
        this.requestHooks.push(requestHook);
    }
}
export function createServerBootstrapServices(loader) {
    return new ServerBootstrapServices(loader);
}
export function evaluateServerBootstrapModule(serviceModule, serviceApi) {
    return getTracer().trace({
        name: ViewSpan.BootstrapService,
        attributes: { serviceSpecifier: serviceModule.specifier },
    }, async () => {
        try {
            await serviceModule.module.default(serviceApi);
        }
        catch (e) {
            const message = `An SSR error occurred in bootstrap service "${serviceModule.specifier}": ${stringifyError(e)}`;
            logger.error(message);
            return message;
        }
    });
}
//# sourceMappingURL=serverBootstrapServices.js.map