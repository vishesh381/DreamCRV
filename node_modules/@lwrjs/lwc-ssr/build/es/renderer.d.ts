import type { BundleDefinition, NormalizedLwrErrorRoute, NormalizedLwrRoute, ProviderAppConfig, PublicModuleBundler, PublicResourceRegistry, RuntimeEnvironment, RuntimeParams, ServerData, SsrDataResponse } from '@lwrjs/types';
import { LRUCache } from 'lru-cache';
import { TaskPool } from '@lwrjs/shared-utils';
import { ModuleLoader } from './moduleLoader.js';
export interface Component {
    specifier: string;
    props?: {
        [key: string]: string;
    };
}
export interface ServerResults extends SsrDataResponse {
    html?: string;
}
export interface RenderResults {
    results?: Record<string, ServerResults>;
    errors?: Record<string, string>;
    bundles?: Set<BundleDefinition>;
}
/**
 * Get a renderer singleton
 *
 * @param bundleRegistry
 * @param resourceRegistry
 * @returns singleton
 */
export declare function getRenderer(config: ProviderAppConfig, bundleRegistry: PublicModuleBundler, resourceRegistry: PublicResourceRegistry): Renderer;
interface BootstrapContext {
    loader: Promise<ModuleLoader>;
    bootstrapServiceEvaluationMap: Map<string, boolean>;
}
export declare class Renderer {
    config: ProviderAppConfig;
    bundleRegistry: PublicModuleBundler;
    resourceRegistry: PublicResourceRegistry;
    contextPerEnv: LRUCache<string, BootstrapContext>;
    pendingRenders: TaskPool;
    globalCache: Record<string, any>;
    constructor(config: ProviderAppConfig, bundleRegistry: PublicModuleBundler, resourceRegistry: PublicResourceRegistry);
    /**
     * Render components to HTML strings
     *
     * @remarks
     * The rendering flow is as follows:
     *  1. invoke `getServerData`
     *  2. execute the route's SSR bootstrap services
     *  3. render the component to HTML
     *
     * @param components - group of components to render
     * @param route - route configuration
     * @param runtimeEnvironment - environment context
     * @param runtimeParams - request context
     * @param serverData - render data TODO serverData is modified (add test?)
     * @returns render results and errors per component
     */
    render(components: Record<string, Component>, route: NormalizedLwrRoute | NormalizedLwrErrorRoute, runtimeEnvironment: RuntimeEnvironment, runtimeParams: RuntimeParams, serverData?: ServerData, isFirstOf2PassSSR?: boolean): Promise<RenderResults>;
    private renderComponents;
    private loadAppCode;
    /**
     * Run bootstrap services and fetch server data
     */
    private executeDataServices;
    /**
     * Create and initialize the loader and LWC engine for SSR
     */
    private createLoader;
    private resetFetchController;
    private getCachedBootstrapContext;
}
export {};
//# sourceMappingURL=renderer.d.ts.map