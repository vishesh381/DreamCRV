// Polyfill the Declarative ShadowDOM spec - call this function AFTER the DOM has been parsed and BEFORE hydrateComponent() is invoked
// See https://github.com/salesforce/lwc-rfcs/blob/master/text/0129-declarative-shadow-dom-polyfill.md#single-loop-script-shadow-root-attachment-reference
// Note we handle both the old (Chrome-only) `shadowroot` attribute as well as the standard `shadowrootmode` attribute.
// As of this writing, Chrome supports both formats but Safari only supports the standard format.
function applyShadowRoots(node, attributeName) {
  // if this browser DOES NOT support Declarative ShadowDOM
  node.querySelectorAll(`template[${attributeName}]`).forEach(template => {
    const mode = template.getAttribute(attributeName) || 'open';
    const shadowRoot = template.parentNode?.attachShadow({
      mode
    });
    shadowRoot.appendChild(template.content);
    template.remove();
    applyShadowRoots(shadowRoot, attributeName);
  });
}
export function polyfillDeclarativeShadowDom(node = document) {
  // eslint-disable-next-line no-prototype-builtins
  if (!HTMLTemplateElement.prototype.hasOwnProperty('shadowRootMode')) {
    // this browser does not support the standard format
    applyShadowRoots(node, 'shadowrootmode');
  }
  // eslint-disable-next-line no-prototype-builtins
  if (!HTMLTemplateElement.prototype.hasOwnProperty('shadowRoot')) {
    // this browser does not support the non-standard format
    applyShadowRoots(node, 'shadowroot');
  }
}