import { moduleSpecifierToKebabCase } from '@lwrjs/shared-utils';
import { htmlEscape } from 'escape-goat';
import { defaultHtmlLayout } from './template-layouts.js';
export default class BaseViewProvider {
    constructor() {
        this.name = 'lwr-base-view-provider';
    }
    async getViewSource(viewId) {
        // Default layout
        let name = 'root-layout';
        let originalSource = defaultHtmlLayout;
        // Default content with root component
        if (viewId.rootComponent) {
            name = 'root-component';
            const customElement = moduleSpecifierToKebabCase(viewId.rootComponent);
            originalSource = `<${customElement}></${customElement}>`;
        }
        return {
            name,
            slug: name,
            ownHash: '00',
            originalSource,
            filePath: '<virtual>',
        };
    }
    renderView(template, data) {
        if (typeof template !== 'string') {
            throw new TypeError(`Expected a \`string\` in the first argument, got \`${typeof template}\``);
        }
        if (typeof data !== 'object') {
            throw new TypeError(`Expected an \`object\` or \`Array\` in the second argument, got \`${typeof data}\``);
        }
        // Ported and inspired by from https://github.com/sindresorhus/pupa/blob/master/index.js
        // The semantics of double and triple brackets follow handlebars.
        const triplebraceRegex = /{{{(.*?)}}}/g;
        if (triplebraceRegex.test(template)) {
            template = template.replace(triplebraceRegex, (_, key) => {
                let result = data;
                for (const property of key.split('.')) {
                    result = result && result[property] ? result[property] : '';
                }
                return String(result);
            });
        }
        const doubleBraceRegex = /{{(.*?)}}/g;
        if (doubleBraceRegex.test(template)) {
            template = template.replace(doubleBraceRegex, (_, key) => {
                let result = data;
                for (const property of key.split('.')) {
                    result = result && result[property] ? result[property] : '';
                }
                return htmlEscape(String(result));
            });
        }
        return template;
    }
    // -- Public API --------------------------------------------------------------------
    async initialize() {
        return;
    }
    async getView(viewId) {
        // This view provider supports the default layout and content with root components
        const viewSource = await this.getViewSource(viewId);
        return {
            ...viewSource,
            viewId,
            layoutTemplate: '/',
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            render: async (context) => {
                return {
                    renderedView: this.renderView(viewSource.originalSource, context),
                    options: {
                        skipMetadataCollection: false,
                    },
                };
            },
        };
    }
}
//# sourceMappingURL=index.js.map