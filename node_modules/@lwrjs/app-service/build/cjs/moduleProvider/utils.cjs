var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/app-service/src/moduleProvider/utils.ts
__markAsModule(exports);
__export(exports, {
  createAppRouteViewBootstrapModule: () => createAppRouteViewBootstrapModule,
  createAppWorkerBootstrapModule: () => createAppWorkerBootstrapModule
});
var import_shared_utils = __toModule(require("@lwrjs/shared-utils"));
function getDefaultImportName(service) {
  return (0, import_shared_utils.stringToVariableName)(`loaderService_${service}`);
}
function createServicesSource(services) {
  const imports = services.map((service) => {
    const serviceId = (0, import_shared_utils.getSpecifier)(service);
    const defaultImportName = getDefaultImportName(serviceId);
    return `import ${defaultImportName} from '${serviceId}'`;
  });
  const body = services.map((service) => {
    const serviceId = (0, import_shared_utils.getSpecifier)(service);
    const defaultImportName = getDefaultImportName(serviceId);
    return `${defaultImportName}({...services, addServerDataCallback: registerServerDataCallbacks })`;
  });
  return [...imports, ...body].join(";\n") + ";";
}
function createAppWorkerBootstrapModule(workerSpecifier, route, options) {
  const {
    bootstrap: {services, syntheticShadow}
  } = route;
  const servicesSource = services && createServicesSource(services);
  const serviceApiModule = getServiceApiModule(options.format, options.moduleLoader);
  return [
    "/* This module is generated */",
    syntheticShadow && `import '@lwc/synthetic-shadow';`,
    services && services.length && `import { services } from '${serviceApiModule}';`,
    servicesSource,
    `import { init, toKebabCase } from 'lwr/init';`,
    `import Worker from "${workerSpecifier}";`
  ].filter(Boolean).join("\n");
}
function getServiceApiModule(format, moduleLoader) {
  if (format == "esm") {
    return "lwr/servicesESM";
  } else {
    return moduleLoader;
  }
}
function createAppRouteViewBootstrapModule(route, options, lockerConfig) {
  const {bootstrap} = route;
  const {services, syntheticShadow, ssr} = bootstrap;
  const isAMD = options.format === "amd";
  const isESM = options.format === "esm";
  const servicesSource = bootstrap.services && createServicesSource(bootstrap.services);
  const serviceApiModule = getServiceApiModule(options.format, options.moduleLoader);
  return [
    "/* This module is generated */",
    `import { getClientBootstrapConfig } from 'lwr/preInit';`,
    syntheticShadow && `import '@lwc/synthetic-shadow';`,
    ssr && `import { polyfillDeclarativeShadowDom } from 'lwr/declarativeShadow';`,
    services && services.length && `import { services } from '${serviceApiModule}';`,
    services && services.length && `import { registerServerDataCallbacks, evaluateServerDataCallbacks } from 'lwr/serverDataCallback';`,
    servicesSource,
    isESM && options.hmrEnabled && `import { initHMR } from 'lwr/hmr';`,
    isESM && `import { init as esmLoaderInit } from 'lwr/esmLoader';`,
    `import { init, toKebabCase } from 'lwr/init';`,
    isAMD && lockerConfig && lockerConfig.enabled && `
import { registerLockerDefine } from 'lwr/lockerDefine';
registerLockerDefine(${JSON.stringify(lockerConfig.trustedComponents)});
        `,
    `const clientBootstrapConfig = getClientBootstrapConfig();`,
    `const { serverData, rootComponents } = clientBootstrapConfig;`,
    isESM && `
const { imports, index, importMappings, endpoints } = clientBootstrapConfig;
esmLoaderInit({ imports, index, importMappings, endpoints });`,
    ssr && `polyfillDeclarativeShadowDom();`,
    services && services.length && `evaluateServerDataCallbacks(serverData)`,
    `
// initialize additional non-configured root components
Promise.all(rootComponents.map(async (rootSpecifier) => {
    const element = toKebabCase(rootSpecifier);
    const { default: Ctor } = await import(rootSpecifier);
    return [element, Ctor];
})).then((rootModules) => {
    return init(rootModules, serverData);
}).then(() => {
    globalThis?.lwcRuntimeFlags?.ENABLE_WIRE_SYNC_EMIT &&
        (globalThis.lwcRuntimeFlags = {
            ...globalThis.lwcRuntimeFlags,
            ENABLE_WIRE_SYNC_EMIT: false,
        });
});`,
    isESM && options.hmrEnabled && `
// HMR related initialization
const viewMetadata = globalThis._lwrRuntimeDebug.viewMetadata;
const hmrEndpoint = clientBootstrapConfig.endpoints.uris.hmr;
initHMR(hmrEndpoint, viewMetadata);`
  ].filter(Boolean).join("\n");
}
