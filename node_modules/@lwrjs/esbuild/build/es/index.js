import fs from 'fs';
import { join, dirname, extname, relative, sep } from 'path';
import esbuildEsm from 'esbuild';
// https://github.com/evanw/esbuild/issues/706
// Fixed in 0.11.0 but upgrading past 0.9.7 has caused breaking changes for consumers...
// https://github.com/salesforce-experience-platform-emu/lwr/issues/1014
let esbuild = esbuildEsm;
if (!esbuildEsm) {
    try {
        esbuild = require('esbuild');
    }
    catch {
        /* this is to support mjs/cjs dual impl */
    }
}
// This is important as it checks which compilation to use esm or cjs based on the current way NodeJS is configured
const isCommonJs = typeof module !== 'undefined';
/* istanbul ignore next */
const ESBUILD_EXTENSION_PLUGIN = function (absFilePath, format) {
    return {
        name: 'replace-extension-plugin',
        setup(build) {
            build.onResolve({ filter: /.*/ }, ({ path, importer, resolveDir }) => {
                if (path !== absFilePath) {
                    if (path.startsWith('.')) {
                        const importeeExt = extname(path);
                        const ext = importeeExt !== '' ? importeeExt : '.ts';
                        let absPath = join(dirname(importer), `${path}${ext}`);
                        // If typescript import is a ".js" try to find the equivalent .ts
                        // We do this to keep consistency with TS resolution
                        if (!fs.existsSync(absPath) && ext === '.js') {
                            absPath = absPath.replace('.js', '.ts');
                        }
                        return { path: absPath };
                    }
                    else {
                        return {
                            external: true,
                        };
                    }
                }
            });
        },
    };
};
// Transpile a typescript file and cache it
// The filename of the cached file is:
//      - the path to the ts file relative to the project root
//      - with all slashes replaced by underscores
//      - and a new file extension of .mjs or .cjs
// eg: "/rootDir/path/to/file.ts" => "/cacheDir/path_to_file.*js"
export async function transpileTs(tsAbsPath, { rootDir, cacheDir }) {
    const format = isCommonJs ? 'cjs' : 'esm';
    const ext = format === 'esm' ? '.mjs' : '.cjs';
    const pathRelativeToRoot = relative(rootDir, tsAbsPath);
    const outBasename = pathRelativeToRoot.replace(new RegExp(`\\${sep}`, 'g'), '_'); // replace "/" with "_" in path
    const outFilename = outBasename.replace(/\.ts$/, ext);
    const outfile = join(cacheDir, outFilename);
    await esbuild.build({
        format,
        bundle: true,
        logLevel: 'error',
        entryPoints: [tsAbsPath],
        sourcemap: true,
        outfile,
        plugins: [ESBUILD_EXTENSION_PLUGIN(tsAbsPath, format)],
    });
    return outfile;
}
//# sourceMappingURL=index.js.map