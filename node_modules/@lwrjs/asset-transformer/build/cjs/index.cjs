var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name2 in all)
    __defProp(target, name2, {get: all[name2], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/asset-transformer/src/index.ts
__markAsModule(exports);
__export(exports, {
  default: () => defaultAssetTransformer
});
var import_diagnostics = __toModule(require("@lwrjs/diagnostics"));
var import_shared_utils = __toModule(require("@lwrjs/shared-utils"));
var import_css = __toModule(require("./metadata-collectors/css.cjs"));
var import_path = __toModule(require("path"));
var CSS_MIME = (0, import_shared_utils.mimeLookup)(".css");
var name = "lwr-default-asset-transformer";
function defaultAssetTransformer(_options, lwrGlobalContext) {
  const {assetRegistry} = lwrGlobalContext;
  return {
    name,
    async transformUri(assetUri, assetDef, runtimeEnvironment) {
      const {entry, uri: existingUri} = assetUri;
      const {type, ownHash} = assetDef;
      const {apiVersion, immutableAssets, basePath} = runtimeEnvironment;
      const immutable = immutableAssets ? "immutable/" : "";
      const hash = immutableAssets ? ownHash : "latest";
      const relativePath = basePath ? (0, import_path.relative)(basePath, existingUri) : existingUri;
      const uri = (0, import_path.join)(`${basePath}/${apiVersion}/${type}/${immutable}s/${hash}`, encodeURI(relativePath));
      import_diagnostics.logger.debug({label: `${this.name}`, message: `normalized url ${entry} -> ${uri}`});
      return {
        ...assetUri,
        uri,
        entry,
        external: assetDef.type === "external",
        immutable: !!immutableAssets
      };
    },
    async transformSource(assetSource, runtimeEnvironment) {
      if (assetSource.mime === CSS_MIME) {
        import_diagnostics.logger.debug({label: `${this.name}`, message: `extract metadata ${assetSource.entry}`});
        const code = assetSource.content("utf-8");
        const metadata = await (0, import_css.linkCss)(code.toString(), assetSource.entry);
        const linkedAsset = await linkAsset(code, {
          ...assetSource,
          metadata
        }, runtimeEnvironment, assetRegistry.resolveAssetUri);
        return {
          source: linkedAsset,
          metadata
        };
      }
      return void 0;
    }
  };
}
async function linkAsset(source, assetSource, runtimeEnvironment, resolveUri) {
  const assetReferences = assetSource.metadata?.assetReferences;
  if (Buffer.isBuffer(source) || !assetReferences || assetReferences.length === 0) {
    return source;
  }
  const codeStringBuilder = (0, import_shared_utils.createStringBuilder)(source);
  const importer = assetSource.entry;
  for (const assetRef of assetReferences) {
    const {url, relative: relative2, location: {startOffset, endOffset} = {}} = assetRef;
    if (relative2 && typeof startOffset === "number" && typeof endOffset === "number") {
      try {
        assetRef.override = await resolveUri({specifier: url, importer}, runtimeEnvironment);
        const overrideUrl = assetRef.override?.uri;
        codeStringBuilder.overwrite(startOffset, endOffset, overrideUrl || url);
      } catch (err) {
        import_diagnostics.logger.warn({
          label: `${name}`,
          message: `Failed to resolve reference '${url}' in asset '${importer}`
        });
      }
    }
  }
  return codeStringBuilder.toString();
}
