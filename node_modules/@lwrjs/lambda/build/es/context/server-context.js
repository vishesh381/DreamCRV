import { normalizeConfig, executeStartHooks } from '@lwrjs/config';
import { createBundleSigner, deepFreeze, getFeatureFlags, LwrApplicationObserver } from '@lwrjs/shared-utils';
import { SiteMetadataImpl } from '@lwrjs/static/site-metadata';
import { LwrAssetRegistry } from '@lwrjs/asset-registry';
import { LwrModuleRegistry } from '@lwrjs/module-registry';
import { LwrModuleBundler } from '@lwrjs/module-bundler';
import { LwrResourceRegistry } from '@lwrjs/resource-registry';
import { LwrViewRegistry } from '@lwrjs/view-registry';
import { getMrtArtifactUrl, getMrtSsgRoot } from '@lwrjs/shared-utils';
function getServices(entries, providerContext) {
    return entries.map(([ctor, providerConfig = {}]) => new ctor(providerConfig, providerContext));
}
export function createServerContext(build) {
    const { appConfig: config, runtimeEnvironment: builtRuntimeEnv, globalData, hooks, services, routeHandlers, } = build;
    // Merge Feature Flags with External Environment variables
    builtRuntimeEnv.featureFlags = {
        // Built Feature Flags
        ...(builtRuntimeEnv.featureFlags || {}),
        // Environmental Feature Flags
        ...getFeatureFlags(),
    };
    // normalize all configurable paths
    const appConfig = normalizeConfig(config);
    // Setup the static artifact location for MRT
    const mrtSsgRoot = getMrtSsgRoot(build.appConfig.staticSiteGenerator);
    // If Assets are not on the lambda update the defaultAssetPath to mobify bundle path
    const runtimeEnvironment = builtRuntimeEnv.featureFlags.ASSETS_ON_LAMBDA
        ? builtRuntimeEnv
        : {
            ...builtRuntimeEnv,
            defaultAssetPath: getMrtArtifactUrl(builtRuntimeEnv.basePath || '', mrtSsgRoot),
        };
    // apply start hooks
    executeStartHooks(hooks, appConfig, runtimeEnvironment);
    const appObserver = new LwrApplicationObserver();
    const appEmitter = appObserver.createLwrEmitter();
    const assetRegistry = new LwrAssetRegistry({
        appObserver,
        appEmitter,
        runtimeEnvironment,
    }, appConfig);
    // If there is captured SSG metadata expose the site metadata to the registries.
    const siteMetadata = new SiteMetadataImpl({
        rootDir: mrtSsgRoot,
        i18n: appConfig.i18n,
    });
    const moduleRegistry = new LwrModuleRegistry({
        appObserver,
        appEmitter,
        runtimeEnvironment,
    }, appConfig);
    const moduleBundler = new LwrModuleBundler({ moduleRegistry, appObserver }, appConfig);
    // Add a BundleSigner to the module registry for linking
    moduleRegistry.setBundleSigner(createBundleSigner(moduleBundler));
    const resourceRegistry = new LwrResourceRegistry();
    const viewRegistry = new LwrViewRegistry({
        moduleRegistry,
        moduleBundler,
        resourceRegistry,
        assetRegistry,
        appObserver,
        appEmitter,
        globalData,
        runtimeEnvironment,
    }, appConfig);
    const providerContext = {
        appObserver,
        appEmitter,
        moduleRegistry: moduleRegistry.getPublicApi(),
        moduleBundler: moduleBundler.getPublicApi(),
        resourceRegistry: resourceRegistry.getPublicApi(),
        viewRegistry: viewRegistry.getPublicApi(),
        assetRegistry: assetRegistry.getPublicApi(),
        config: deepFreeze({
            bundleConfig: appConfig.bundleConfig,
            cacheDir: appConfig.cacheDir,
            modules: appConfig.lwc.modules,
            routes: appConfig.routes,
            errorRoutes: appConfig.errorRoutes,
            rootDir: appConfig.rootDir,
            basePath: appConfig.basePath,
            contentDir: appConfig.contentDir,
            layoutsDir: appConfig.layoutsDir,
            locker: appConfig.locker,
            amdLoader: appConfig.amdLoader,
            esmLoader: appConfig.esmLoader,
            environment: appConfig.environment,
            assets: appConfig.assets,
            i18n: appConfig.i18n,
        }),
        runtimeEnvironment: deepFreeze(runtimeEnvironment),
        siteMetadata,
    };
    // add services to their corresponding registry
    // Assets
    assetRegistry.addAssetProviders(getServices(services.assetProviders, providerContext));
    assetRegistry.addAssetTransformers(getServices([...services.assetTransformers, ...services.uriTransformers], providerContext));
    // Bundles
    moduleBundler.addBundleProviders(getServices(services.bundleProviders, providerContext));
    moduleBundler.addBundleTransformers(getServices(services.uriTransformers, providerContext));
    // Modules
    moduleRegistry.addModuleProviders(getServices(services.moduleProviders, providerContext));
    // Resources
    resourceRegistry.addResourceProviders(getServices(services.resourceProviders, providerContext));
    resourceRegistry.addResourceTransformers(getServices(services.uriTransformers, providerContext));
    // Views
    viewRegistry.addViewProviders(getServices(services.viewProviders, providerContext));
    viewRegistry.addViewTransformers(getServices(services.viewTransformers, providerContext));
    return {
        appObserver,
        appEmitter,
        assetRegistry,
        moduleRegistry,
        moduleBundler,
        resourceRegistry,
        viewRegistry,
        appConfig,
        runtimeEnvironment,
        siteMetadata,
        routeHandlers,
    };
}
//# sourceMappingURL=server-context.js.map