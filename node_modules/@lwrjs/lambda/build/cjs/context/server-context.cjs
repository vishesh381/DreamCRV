var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/lambda/src/context/server-context.ts
__markAsModule(exports);
__export(exports, {
  createServerContext: () => createServerContext
});
var import_config = __toModule(require("@lwrjs/config"));
var import_shared_utils = __toModule(require("@lwrjs/shared-utils"));
var import_site_metadata = __toModule(require("@lwrjs/static/site-metadata"));
var import_asset_registry = __toModule(require("@lwrjs/asset-registry"));
var import_module_registry = __toModule(require("@lwrjs/module-registry"));
var import_module_bundler = __toModule(require("@lwrjs/module-bundler"));
var import_resource_registry = __toModule(require("@lwrjs/resource-registry"));
var import_view_registry = __toModule(require("@lwrjs/view-registry"));
var import_shared_utils2 = __toModule(require("@lwrjs/shared-utils"));
function getServices(entries, providerContext) {
  return entries.map(([ctor, providerConfig = {}]) => new ctor(providerConfig, providerContext));
}
function createServerContext(build) {
  const {
    appConfig: config,
    runtimeEnvironment: builtRuntimeEnv,
    globalData,
    hooks,
    services,
    routeHandlers
  } = build;
  builtRuntimeEnv.featureFlags = {
    ...builtRuntimeEnv.featureFlags || {},
    ...(0, import_shared_utils.getFeatureFlags)()
  };
  const appConfig = (0, import_config.normalizeConfig)(config);
  const mrtSsgRoot = (0, import_shared_utils2.getMrtSsgRoot)(build.appConfig.staticSiteGenerator);
  const runtimeEnvironment = builtRuntimeEnv.featureFlags.ASSETS_ON_LAMBDA ? builtRuntimeEnv : {
    ...builtRuntimeEnv,
    defaultAssetPath: (0, import_shared_utils2.getMrtArtifactUrl)(builtRuntimeEnv.basePath || "", mrtSsgRoot)
  };
  (0, import_config.executeStartHooks)(hooks, appConfig, runtimeEnvironment);
  const appObserver = new import_shared_utils.LwrApplicationObserver();
  const appEmitter = appObserver.createLwrEmitter();
  const assetRegistry = new import_asset_registry.LwrAssetRegistry({
    appObserver,
    appEmitter,
    runtimeEnvironment
  }, appConfig);
  const siteMetadata = new import_site_metadata.SiteMetadataImpl({
    rootDir: mrtSsgRoot,
    i18n: appConfig.i18n
  });
  const moduleRegistry = new import_module_registry.LwrModuleRegistry({
    appObserver,
    appEmitter,
    runtimeEnvironment
  }, appConfig);
  const moduleBundler = new import_module_bundler.LwrModuleBundler({moduleRegistry, appObserver}, appConfig);
  moduleRegistry.setBundleSigner((0, import_shared_utils.createBundleSigner)(moduleBundler));
  const resourceRegistry = new import_resource_registry.LwrResourceRegistry();
  const viewRegistry = new import_view_registry.LwrViewRegistry({
    moduleRegistry,
    moduleBundler,
    resourceRegistry,
    assetRegistry,
    appObserver,
    appEmitter,
    globalData,
    runtimeEnvironment
  }, appConfig);
  const providerContext = {
    appObserver,
    appEmitter,
    moduleRegistry: moduleRegistry.getPublicApi(),
    moduleBundler: moduleBundler.getPublicApi(),
    resourceRegistry: resourceRegistry.getPublicApi(),
    viewRegistry: viewRegistry.getPublicApi(),
    assetRegistry: assetRegistry.getPublicApi(),
    config: (0, import_shared_utils.deepFreeze)({
      bundleConfig: appConfig.bundleConfig,
      cacheDir: appConfig.cacheDir,
      modules: appConfig.lwc.modules,
      routes: appConfig.routes,
      errorRoutes: appConfig.errorRoutes,
      rootDir: appConfig.rootDir,
      basePath: appConfig.basePath,
      contentDir: appConfig.contentDir,
      layoutsDir: appConfig.layoutsDir,
      locker: appConfig.locker,
      amdLoader: appConfig.amdLoader,
      esmLoader: appConfig.esmLoader,
      environment: appConfig.environment,
      assets: appConfig.assets,
      i18n: appConfig.i18n
    }),
    runtimeEnvironment: (0, import_shared_utils.deepFreeze)(runtimeEnvironment),
    siteMetadata
  };
  assetRegistry.addAssetProviders(getServices(services.assetProviders, providerContext));
  assetRegistry.addAssetTransformers(getServices([...services.assetTransformers, ...services.uriTransformers], providerContext));
  moduleBundler.addBundleProviders(getServices(services.bundleProviders, providerContext));
  moduleBundler.addBundleTransformers(getServices(services.uriTransformers, providerContext));
  moduleRegistry.addModuleProviders(getServices(services.moduleProviders, providerContext));
  resourceRegistry.addResourceProviders(getServices(services.resourceProviders, providerContext));
  resourceRegistry.addResourceTransformers(getServices(services.uriTransformers, providerContext));
  viewRegistry.addViewProviders(getServices(services.viewProviders, providerContext));
  viewRegistry.addViewTransformers(getServices(services.viewTransformers, providerContext));
  return {
    appObserver,
    appEmitter,
    assetRegistry,
    moduleRegistry,
    moduleBundler,
    resourceRegistry,
    viewRegistry,
    appConfig,
    runtimeEnvironment,
    siteMetadata,
    routeHandlers
  };
}
