var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/lambda/src/index.ts
__markAsModule(exports);
__export(exports, {
  createHandler: () => createHandler
});
var import_path = __toModule(require("path"));
var import_express = __toModule(require("express"));
var import_express2 = __toModule(require("@salesforce/pwa-kit-runtime/ssr/server/express.cjs"));
var import_ssr_config = __toModule(require("@salesforce/pwa-kit-runtime/utils/ssr-config.cjs"));
var import_express3 = __toModule(require("@lwrjs/server/express"));
var import_middleware = __toModule(require("@lwrjs/core/middleware"));
var import_config = __toModule(require("@lwrjs/config"));
var import_instrumentation = __toModule(require("@lwrjs/instrumentation"));
var import_aws_init = __toModule(require("@lwrjs/instrumentation/aws-init"));
var import_diagnostics = __toModule(require("@lwrjs/diagnostics"));
var import_server_context = __toModule(require("./context/server-context.cjs"));
var import_utils = __toModule(require("./utils.cjs"));
var import_shared_utils = __toModule(require("@lwrjs/shared-utils"));
function createHandler(build) {
  try {
    let instrumentation;
    if (build.hooks.length) {
      instrumentation = (0, import_config.executeInstrumentationHooks)(build.hooks);
    }
    if (!instrumentation) {
      instrumentation = (0, import_config.executeInstrumentationHooks)([new import_aws_init.default()]);
    }
    const span = (0, import_instrumentation.getTracer)().startSpan({name: import_instrumentation.LambdaSpan.CreateHandler});
    if (globalThis.LWR_VERSION) {
      import_diagnostics.logger.info({
        label: "versions",
        message: `LWR_VERSION: ${globalThis.LWR_VERSION}; LWC_VERSION: ${globalThis.LWC_VERSION}; PWA_KIT_RUNTIME_VERSION: ${globalThis.PWA_KIT_RUNTIME_VERSION};`
      });
    }
    process.removeAllListeners("unhandledRejection");
    process.on("unhandledRejection", (err) => {
      (0, import_instrumentation.getTracer)().startSpan({name: import_instrumentation.LambdaSpan.UnhandledRejection}).end();
      import_diagnostics.logger.error(`LWR Unhandled Promise Rejection: ${err?.message}`);
      import_diagnostics.logger.error(err);
    });
    const outputDir = build.buildDir;
    const buildDir = import_path.default.resolve(process.cwd(), outputDir);
    if ((0, import_shared_utils.isLambdaEnv)()) {
      process.chdir(__dirname);
      build.appConfig.rootDir = __dirname;
      build.appConfig.cacheDir = "/tmp/__lwr_cache__";
    } else {
      process.chdir(buildDir);
      build.appConfig.rootDir = buildDir;
    }
    const serverContext = (0, import_instrumentation.getTracer)().trace({name: import_instrumentation.LambdaSpan.CreateServerContext}, () => (0, import_server_context.createServerContext)(build));
    const options = {
      buildDir,
      defaultCacheTimeSeconds: 600,
      port: serverContext.appConfig.port || 3e3,
      protocol: "http",
      mobify: (0, import_ssr_config.getConfig)()
    };
    const runtime = (0, import_express2.getRuntime)();
    runtime._logStartupMessage = () => void 0;
    const {handler} = runtime.createHandler(options, (app) => {
      const {
        appConfig: {basePath, staticSiteGenerator}
      } = serverContext;
      const router = import_express.default.Router({
        caseSensitive: build.appConfig.caseSensitiveRoutes
      });
      router.use((req, res, next) => {
        res.on("finish", () => {
          instrumentation?.flush();
        });
        next();
      });
      if (process.env?.BUNDLE_ID == void 0) {
        (0, import_utils.addMrtStaticBundleMiddleware)(app, staticSiteGenerator);
      }
      app.use(basePath, router);
      const lwrApp = new import_express3.default({app: router});
      (0, import_middleware.requestProcessorMiddleware)(lwrApp, serverContext);
      (0, import_middleware.localeMiddleware)(lwrApp, serverContext);
      (0, import_middleware.bundleMiddleware)(lwrApp, serverContext);
      (0, import_middleware.mappingMiddleware)(lwrApp, serverContext);
      (0, import_middleware.assetMiddleware)(lwrApp, serverContext);
      (0, import_middleware.resourceMiddleware)(lwrApp, serverContext);
      (0, import_middleware.viewMiddleware)(lwrApp, serverContext);
    });
    span.end();
    return handler;
  } catch (error) {
    import_diagnostics.logger.error(error);
    throw error;
  }
}
