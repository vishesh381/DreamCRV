var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/module-registry/src/externals-module-provider.ts
__markAsModule(exports);
__export(exports, {
  default: () => externals_module_provider_default
});
var import_shared_utils = __toModule(require("@lwrjs/shared-utils"));
var import_fs_extra = __toModule(require("fs-extra"));
var import_url = __toModule(require("url"));
var ExternalsModuleProvider = class {
  constructor(_config, context) {
    this.name = "externals-module-provider";
    this.externals = context?.config.bundleConfig?.external || {};
  }
  async getModuleEntry(moduleId) {
    const {specifier, version} = moduleId;
    if (specifier && Object.prototype.hasOwnProperty.call(this.externals, specifier)) {
      const entry = this.externals[specifier];
      const resolvedVersion = version || import_shared_utils.VERSION_NOT_PROVIDED;
      return {
        virtual: true,
        id: (0, import_shared_utils.getSpecifier)({...moduleId, version: resolvedVersion}),
        entry,
        specifier,
        version: resolvedVersion
      };
    }
    return void 0;
  }
  async getModule(moduleId) {
    const moduleEntry = await this.getModuleEntry(moduleId);
    if (moduleEntry) {
      let originalSource = "";
      let ownHash = "";
      const srcUri = this.externals[moduleEntry.specifier];
      if (srcUri && srcUri.startsWith(import_shared_utils.PROTOCOL_FILE)) {
        const srcPath = import_url.default.fileURLToPath(srcUri);
        originalSource = (await import_fs_extra.default.readFile(srcPath)).toString();
        ownHash = (0, import_shared_utils.hashContent)(originalSource);
      }
      const {name, namespace} = (0, import_shared_utils.explodeSpecifier)(moduleEntry.specifier);
      return {
        id: moduleEntry.id,
        moduleEntry,
        specifier: moduleEntry.specifier,
        name,
        namespace,
        version: moduleEntry.version,
        compiledSource: originalSource,
        ownHash,
        originalSource
      };
    }
    return void 0;
  }
};
var externals_module_provider_default = ExternalsModuleProvider;
