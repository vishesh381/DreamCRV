import ExpressInternalServer from './express/express-server.js';
import ExpressRequest from './express/express-request.js';
import ExpressResponse from './express/express-response.js';
import KoaInternalServer from './koa/koa-server.js';
import { FsInternalServer, LwrFsKoa } from './fs/fs-server.js';
import { getTracer, CoreSpan } from '@lwrjs/instrumentation';
import { createSingleDiagnosticError, descriptions, logger, LwrConfigValidationError, } from '@lwrjs/diagnostics';
function createInternalServer(serverType = 'express', options = {}) {
    process.on('unhandledRejection', (err) => {
        // creating immediately closed span to mark the unhandled rejection
        getTracer().startSpan({ name: CoreSpan.UnhandledRejection }).end();
        logger.error(`LWR Unhandled Promise Rejection: ${err?.message || ''}`);
        logger.error(err);
    });
    if (serverType === 'express') {
        const expressAppServer = new ExpressInternalServer(options);
        return expressAppServer;
    }
    if (serverType === 'koa') {
        const koaAppServer = new KoaInternalServer(options);
        return koaAppServer;
    }
    if (serverType === 'fs') {
        const fsAppServer = new FsInternalServer(options);
        return fsAppServer;
    }
    throw createSingleDiagnosticError({ description: descriptions.CONFIG_PARSER.INVALID_PROPERTY('serverType', serverType) }, LwrConfigValidationError);
}
// Functions for testing
function mockMiddlewareRequest(req) {
    return new ExpressRequest(req);
}
function mockMiddlewareResponse(res) {
    return new ExpressResponse(res, false);
}
// TODO - Add support for KOA mock request/response
export { createInternalServer, mockMiddlewareRequest, mockMiddlewareResponse, LwrFsKoa };
//# sourceMappingURL=index.js.map