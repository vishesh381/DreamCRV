var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/npm-module-provider/src/resolveNpmModules.ts
__markAsModule(exports);
__export(exports, {
  resolveNpmModuleSpecifier: () => resolveNpmModuleSpecifier,
  resolveNpmModuleSpecifierBlock: () => resolveNpmModuleSpecifierBlock
});
var import_path = __toModule(require("path"));
var import_resolve = __toModule(require("resolve"));
var import_esbuild = __toModule(require("esbuild"));
var import_node_modules_polyfill = __toModule(require("@esbuild-plugins/node-modules-polyfill"));
var import_diagnostics = __toModule(require("@lwrjs/diagnostics"));
var esbuild = import_esbuild.default;
if (!import_esbuild.default) {
  try {
    esbuild = require("esbuild");
  } catch {
  }
}
var NodePolyfillsPlugin = import_node_modules_polyfill.default.default || import_node_modules_polyfill.default;
var ExternalsPlugin = function({external}) {
  return {
    name: "replace-extension-plugin",
    setup(build) {
      build.onResolve({filter: /.*/}, ({path, importer}) => {
        if (importer && external && external.includes(path)) {
          return {path, external: true};
        }
      });
    }
  };
};
async function resolveNpmModuleSpecifierBlock(specifier, dest, config) {
  let res;
  try {
    let pkgVersion;
    try {
      res = import_resolve.default.sync(specifier, {
        packageFilter: function(pkg) {
          const {exports: exports2, browser} = pkg;
          if (exports2 && exports2["."]) {
            const root = exports2["."];
            pkg.main = root?.browser?.import || root?.browser?.default || (typeof root?.browser === "string" ? root.browser : void 0) || root?.import?.browser?.default || root?.import?.default || (typeof root?.import === "string" ? root.import : void 0) || root?.default;
          } else if (browser && typeof browser === "string") {
            pkg.main = pkg.browser;
          } else if (pkg.module) {
            pkg.main = pkg.module;
          }
          if (pkg.version) {
            pkgVersion = pkg.version;
          }
          return pkg;
        }
      });
    } catch (error) {
      if (error.code === "MODULE_NOT_FOUND") {
        import_diagnostics.logger.debug({
          label: "npm-module-provider",
          message: `Failed to resolve ${specifier} from npm`,
          additionalInfo: {cause: error}
        });
        return void 0;
      }
      throw error;
    }
    if (!res) {
      return void 0;
    }
    if (pkgVersion === void 0) {
      throw new Error("Failed to find version in package.json");
    }
    const outfile = (0, import_path.join)(dest, specifier, "_bundle.js");
    const cacheKey = `${specifier}@${pkgVersion}`;
    await esbuild.build({
      entryPoints: [res],
      format: "esm",
      bundle: true,
      write: true,
      platform: "browser",
      mainFields: ["browser", "module", "main"],
      outfile,
      define: {
        "process.env.NODE_ENV": JSON.stringify("production")
      },
      plugins: [ExternalsPlugin(config), NodePolyfillsPlugin()]
    });
    return {
      id: cacheKey,
      entry: outfile,
      specifier,
      version: pkgVersion
    };
  } catch (err) {
    import_diagnostics.logger.error(`[npm-module-provider][esbuild] resolveNpmModules: ${specifier} ${dest}`, {res, err});
  }
}
var Queue = class {
  constructor() {
    this.queue = [];
    this.workingOnPromise = false;
    this.pendingPromise = false;
  }
  enqueue(promise) {
    return new Promise((resolve2, reject) => {
      this.queue.push({promise, resolve: resolve2, reject});
      this.dequeue();
    });
  }
  dequeue() {
    if (this.workingOnPromise) {
      return false;
    }
    const item = this.queue.shift();
    if (!item) {
      return false;
    }
    this.workingOnPromise = true;
    try {
      item.promise().then((value) => {
        this.workingOnPromise = false;
        item.resolve(value);
        this.dequeue();
      }).catch((err) => {
        this.workingOnPromise = false;
        item.reject(err);
        this.dequeue();
      });
    } catch (err) {
      this.workingOnPromise = false;
      item.reject(err);
      this.dequeue();
    }
    return true;
  }
};
var RESOLVER_QUEUE = new Queue();
async function resolveNpmModuleSpecifier(specifier, dest, config) {
  return RESOLVER_QUEUE.enqueue(resolveNpmModuleSpecifierBlock.bind(null, specifier, dest, config));
}
