export function createLoader(name, definition, config, externalModules) {
    if (!definition || typeof definition[2] !== 'function') {
        throw new Error(`Expected loader with specifier "${name}" to be a module`);
    }
    // Create a Loader instance
    const exports = {};
    definition[2].call(null, exports);
    const { Loader } = exports;
    if (!Loader) {
        throw new Error('Expected Loader class to be defined');
    }
    const loader = new Loader(config);
    // register externally loaded modules
    if (externalModules && externalModules.length) {
        loader.registerExternalModules(externalModules);
    }
    // Define the loader module with public API: { define, load, services }
    const exporter = (exports) => {
        Object.assign(exports, {
            define: loader.define.bind(loader),
            load: loader.load.bind(loader),
            services: loader.services,
            clearRegistry: loader.clearRegistry.bind(loader),
        });
        return;
    };
    loader.define(name, ['exports'], exporter, definition[3]);
    return loader;
}
//# sourceMappingURL=loaderLegacy.js.map