import type { ImportMapResolver } from '../importMap/importMapResolver.js';
import type { HandleStaleModuleHook, LoaderHooks, ResolveHookResponse } from '@lwrjs/types';
import type { LoaderConfig } from '../../../../types.js';
export type ModuleDefinitionSignatures = {
    ownHash: string;
    hashes: {
        [key: string]: string;
    };
};
export type Module = {
    [key: string]: any;
    __useDefault?: boolean;
};
export declare class ModuleRegistry {
    private profiler;
    constructor(config: LoaderConfig);
    clearRegistry(): void;
    load(id: string, importer?: string): Promise<Module>;
    resolve(id: string, importer?: string): Promise<string>;
    has(id: string): boolean;
    define(name: string, dependencies: string[], exporter: Function, signatures: ModuleDefinitionSignatures): void;
    /**
     * Marks modules as "externally" loaded/provided, so that the loader does not attempt to fetch them.
     *
     * @param modules - list of module identifiers
     */
    registerExternalModules(modules: string[]): void;
    private checkModuleSignature;
    private resolver?;
    setImportResolver(resolver: ImportMapResolver): void;
    private baseUrl;
    private namedDefineRegistry;
    private moduleRegistry;
    aliases: Map<string, string>;
    private lastDefine;
    private getExistingModuleRecord;
    private getModuleRecord;
    private storeModuleAlias;
    private getModuleDependencyRecord;
    private topLevelEvaluation;
    private instantiateAll;
    private evaluateModule;
    private isNamedExportDefaultOnly;
    private getCircularDependencyWrapper;
    private evaluateModuleDependencies;
    private getModuleDef;
    private resolveHook?;
    private loadHook?;
    addLoaderPlugin(hooks: LoaderHooks): void;
    private handleStaleModuleHook?;
    registerHandleStaleModuleHook(handleStaleModule: HandleStaleModuleHook): void;
    isValidResolveResponse(res: ResolveHookResponse): boolean;
}
//# sourceMappingURL=moduleRegistry.d.ts.map