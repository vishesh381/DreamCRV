import { templateString } from './utils.js';
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function generateErrorMessage(errorInfo, args) {
    const message = Array.isArray(args) ? templateString(errorInfo.message, args) : errorInfo.message;
    return `LWR${errorInfo.code}: ${message}`;
}
class LoaderError extends Error {
    constructor(errorInfo, errorArgs) {
        super();
        this.message = generateErrorMessage(errorInfo, errorArgs);
    }
}
function invariant(condition, errorInfo) {
    if (!condition) {
        throw new LoaderError(errorInfo);
    }
}
const MISSING_NAME = Object.freeze({
    code: 3000,
    message: 'A module name is required.',
    level: 0,
});
const FAIL_INSTANTIATE = Object.freeze({
    code: 3004,
    message: 'Failed to instantiate module: {0}',
    level: 0,
});
const NO_AMD_REQUIRE = Object.freeze({
    code: 3005,
    message: 'AMD require not supported.',
    level: 0,
});
const FAILED_DEP = Object.freeze({
    code: 3006,
    level: 0,
    message: 'Failed to load dependency: {0}',
});
const INVALID_DEPS = Object.freeze({
    code: 3007,
    message: 'Unexpected value received for dependencies argument; expected an array.',
    level: 0,
});
const FAIL_LOAD = Object.freeze({
    code: 3008,
    level: 0,
    message: 'Error loading {0}',
});
const UNRESOLVED = Object.freeze({
    code: 3009,
    level: 0,
    message: 'Unable to resolve bare specifier: {0}',
});
const NO_BASE_URL = Object.freeze({
    code: 3010,
    level: 0,
    message: 'baseUrl not set',
});
const HOOK_ALREADY_SET = Object.freeze({
    code: 3011,
    level: 0,
    message: 'Cannot set a loader service multiple times',
});
const INVALID_HOOK = Object.freeze({
    code: 3012,
    level: 0,
    message: 'Invalid hook received',
});
const INVALID_LOADER_SERVICE_RESPONSE = Object.freeze({
    code: 3013,
    level: 0,
    message: 'Invalid response received from hook',
});
const MODULE_LOAD_TIMEOUT = Object.freeze({
    code: 3014,
    level: 0,
    message: 'Error loading {0} - timed out',
});
const HTTP_FAIL_LOAD = Object.freeze({
    code: 3015,
    level: 0,
    message: 'Error loading {0}, status code {1}',
});
const STALE_HOOK_ERROR = Object.freeze({
    code: 3016,
    level: 0,
    message: 'An error occurred handling module conflict',
});
const MODULE_ALREADY_LOADED = Object.freeze({
    code: 3017,
    level: 0,
    message: 'Marking module(s) as externally loaded, but they are already loaded: {0}',
});
const FAIL_HOOK_LOAD = Object.freeze({
    code: 3018,
    level: 0,
    message: 'Error loading "{0}" from hook',
});
const EXPORTER_ERROR = Object.freeze({
    code: 3021,
    level: 0,
    message: 'Error evaluating module "{0}", error was {1}',
});
/* importMap errors */
const BAD_IMPORT_MAP = Object.freeze({
    code: 3011,
    level: 0,
    message: 'import map is not valid',
});
/* Errors */
export { MISSING_NAME, FAIL_INSTANTIATE, NO_AMD_REQUIRE, FAILED_DEP, INVALID_DEPS, FAIL_LOAD, UNRESOLVED, NO_BASE_URL, BAD_IMPORT_MAP, HOOK_ALREADY_SET, INVALID_HOOK, INVALID_LOADER_SERVICE_RESPONSE, MODULE_LOAD_TIMEOUT, HTTP_FAIL_LOAD, STALE_HOOK_ERROR, MODULE_ALREADY_LOADED, FAIL_HOOK_LOAD, EXPORTER_ERROR, };
/* API */
export { invariant, LoaderError };
//# sourceMappingURL=messages.js.map