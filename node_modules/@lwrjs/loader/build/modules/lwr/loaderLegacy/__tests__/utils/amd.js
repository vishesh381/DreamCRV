import { getImportMetadata, readFile } from '@lwrjs/shared-utils'; // eslint-disable-line lwr/only-allowed-imports
import { convertToAmd } from '@lwrjs/shared-utils/compiler'; // eslint-disable-line lwr/only-allowed-imports
export async function getAMDModule(specifier, filename, fixtureHashes, autoExports) {
    const code = readFile(filename);
    const metadata = await getImportMetadata(code);
    const depHashes = {};
    if (metadata && metadata.imports && metadata.imports.length > 0) {
        metadata.imports.forEach((dependency) => {
            const specifier = dependency.moduleSpecifier;
            depHashes[specifier] = fixtureHashes[specifier];
        });
    }
    const { code: amdModule } = await convertToAmd(code, { id: specifier }, autoExports !== true);
    const openAmdCodeString = amdModule.trim().slice(0, -2);
    const signedCode = `${openAmdCodeString}, ${JSON.stringify({
        ownHash: fixtureHashes[specifier],
        hashes: depHashes,
    })});`;
    return signedCode;
}
export function evaluateDefine(moduleString) {
    if (!moduleString) {
        throw new Error('no module given');
    }
    eval(moduleString);
}
//# sourceMappingURL=amd.js.map