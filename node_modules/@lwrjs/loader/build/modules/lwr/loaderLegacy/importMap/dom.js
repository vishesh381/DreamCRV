/**
 * Import map support for LWR based on the spec: https://github.com/WICG/import-maps
 *
 * This implementation is adapted from https://github.com/systemjs/systemjs/blob/master/src/features/import-map.js
 */
import { resolveAndComposeImportMap } from './importMap.js';
import { getBaseUrl } from '../utils/url.js';
import { hasDocument, hasConsole } from '../utils/dom.js';
import { LoaderError, BAD_IMPORT_MAP, NO_BASE_URL } from '../errors/messages.js';
const IMPORTMAP_SCRIPT_TYPE = 'lwr-importmap';
// iterates on the any <script type="${IMPORTMAP_SCRIPT_TYPE}", invoking the given callback for each
function iterateDocumentImportMaps(callBack, extraSelector) {
    // eslint-disable-next-line lwr/no-unguarded-apis, no-undef
    const nodeList = document.querySelectorAll(`script[type="${IMPORTMAP_SCRIPT_TYPE}"]` + extraSelector);
    const filtered = Array.from(nodeList).filter((node) => {
        if (node.src) {
            // eslint-disable-next-line lwr/no-unguarded-apis, no-undef
            if (hasConsole)
                console.warn('LWR does not support import maps from script src');
            return false;
        }
        return true;
    });
    Array.prototype.forEach.call(filtered, callBack);
}
// retrives the import map text from a <script type="${IMPORTMAP_SCRIPT_TYPE}"
async function getImportMapFromScript(script) {
    return Promise.resolve(script.innerHTML);
}
// get importMap from <script type="lwr-importmap">
async function evaluateImportMaps(baseUrl) {
    let importMap = { imports: {}, scopes: {} };
    let importMapPromise = Promise.resolve(importMap);
    if (hasDocument) {
        if (!baseUrl) {
            baseUrl = getBaseUrl();
        }
        if (!baseUrl) {
            throw new LoaderError(NO_BASE_URL);
        }
        iterateDocumentImportMaps((script) => {
            importMapPromise = importMapPromise
                .then(() => {
                return getImportMapFromScript(script);
            })
                .then((importMapTxt) => {
                try {
                    return JSON.parse(importMapTxt);
                }
                catch (e) {
                    throw new LoaderError(BAD_IMPORT_MAP);
                }
            })
                .then((jsonImportMap) => {
                importMap = resolveAndComposeImportMap(jsonImportMap, script.src || baseUrl, importMap);
                return importMap;
            });
        }, '');
    }
    return importMapPromise;
}
export { IMPORTMAP_SCRIPT_TYPE, evaluateImportMaps };
//# sourceMappingURL=dom.js.map