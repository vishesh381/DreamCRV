import { LoaderError, FAIL_LOAD } from '../errors/messages.js';
import { hasDocument } from '../utils/dom.js';
function createScript(url) {
    // eslint-disable-next-line lwr/no-unguarded-apis, no-undef
    const script = document.createElement('script');
    script.async = true;
    script.crossOrigin = 'anonymous';
    script.src = url;
    return script;
}
let lastWindowError, lastWindowErrorUrl;
function loadModuleDef(url) {
    return new Promise(function (resolve, reject) {
        if (hasDocument) {
            /* eslint-disable lwr/no-unguarded-apis, no-undef */
            const script = createScript(url);
            script.addEventListener('error', () => {
                reject(new LoaderError(FAIL_LOAD, [url]));
            });
            script.addEventListener('load', () => {
                document.head.removeChild(script);
                if (lastWindowErrorUrl === url) {
                    reject(lastWindowError);
                }
                else {
                    resolve();
                }
            });
            document.head.appendChild(script);
            /* eslint-enable lwr/no-unguarded-apis, no-undef */
        }
    });
}
if (hasDocument) {
    // When a script is executed, runtime errors are on the global/window scope which are NOT caught by the script's onerror handler.
    // eslint-disable-next-line lwr/no-unguarded-apis, no-undef
    window.addEventListener('error', (evt) => {
        lastWindowErrorUrl = evt.filename;
        lastWindowError = evt.error;
    });
}
export { loadModuleDef };
//# sourceMappingURL=scriptLoad.js.map