declare class LoaderError extends Error {
    constructor(errorInfo: ErrorInfo, errorArgs?: string[]);
}
declare function invariant(condition: boolean, errorInfo: ErrorInfo): void;
interface ErrorInfo {
    code: number;
    message: string;
    level: number;
}
declare const MISSING_NAME: ErrorInfo;
declare const FAIL_INSTANTIATE: ErrorInfo;
declare const NO_AMD_REQUIRE: ErrorInfo;
declare const FAILED_DEP: ErrorInfo;
declare const INVALID_DEPS: ErrorInfo;
declare const FAIL_LOAD: ErrorInfo;
declare const UNRESOLVED: ErrorInfo;
declare const NO_BASE_URL: ErrorInfo;
declare const HOOK_ALREADY_SET: ErrorInfo;
declare const INVALID_HOOK: ErrorInfo;
declare const INVALID_LOADER_SERVICE_RESPONSE: ErrorInfo;
declare const MODULE_LOAD_TIMEOUT: ErrorInfo;
declare const HTTP_FAIL_LOAD: ErrorInfo;
declare const STALE_HOOK_ERROR: ErrorInfo;
declare const MODULE_ALREADY_LOADED: ErrorInfo;
declare const FAIL_HOOK_LOAD: ErrorInfo;
declare const NO_MAPPING_URL: ErrorInfo;
declare const BAD_IMPORT_METADATA: ErrorInfo;
declare const EXPORTER_ERROR: ErrorInfo;
declare const UNRESOLVEABLE_MAPPING_ERROR: ErrorInfo;
declare const BAD_IMPORT_MAP: ErrorInfo;
export { MISSING_NAME, FAIL_INSTANTIATE, NO_AMD_REQUIRE, FAILED_DEP, INVALID_DEPS, FAIL_LOAD, UNRESOLVED, NO_BASE_URL, NO_MAPPING_URL, BAD_IMPORT_MAP, BAD_IMPORT_METADATA, HOOK_ALREADY_SET, INVALID_HOOK, INVALID_LOADER_SERVICE_RESPONSE, MODULE_LOAD_TIMEOUT, HTTP_FAIL_LOAD, STALE_HOOK_ERROR, MODULE_ALREADY_LOADED, FAIL_HOOK_LOAD, EXPORTER_ERROR, UNRESOLVEABLE_MAPPING_ERROR, };
export { invariant, LoaderError };
//# sourceMappingURL=messages.d.ts.map