import { normalizeVersionToUri, getSpecifier } from '@lwrjs/shared-utils';
export class LwrResourceRegistry {
    constructor() {
        this.providers = [];
        this.transformers = [];
        this.name = 'lwr-resource-registry';
    }
    // -- Public API --------------------------------------------------------------------
    // Add new resource providers
    addResourceProviders(providers) {
        this.providers.push(...providers);
    }
    // add resource transformers
    addResourceTransformers(transformers) {
        this.transformers.push(...transformers);
    }
    // Retrieve a resource from the providers
    async getResource(resourceId, runtimeEnvironment, runtimeParams) {
        for (const provider of this.providers) {
            // eslint-disable-next-line no-await-in-loop
            const result = await provider.getResource(resourceId, runtimeEnvironment, runtimeParams);
            if (result) {
                // TODO re-work this pattern to better match bundles / assets.  Resources resolve the definition and than read the src attribute so transforming here.
                if (result.src) {
                    const defaultUri = result.src;
                    const resourceUri = {
                        artifactType: 'resource',
                        uri: defaultUri,
                        immutable: runtimeEnvironment.immutableAssets,
                        entry: defaultUri,
                    };
                    // Perform any transforms
                    let uri = defaultUri;
                    for (const transformPlugin of this.transformers) {
                        // eslint-disable-next-line no-await-in-loop
                        const resolveUriResult = await transformPlugin.transformUri?.(resourceUri, result, runtimeEnvironment);
                        if (resolveUriResult && resolveUriResult.uri) {
                            uri = resolveUriResult.uri;
                        }
                    }
                    result.src = uri;
                }
                return result;
            }
        }
        return undefined;
    }
    // Given a resource and environment, return a resource URI
    async resolveResourceUri({ specifier, version = '' }, { apiVersion, format, basePath }) {
        // re-add the specifier at the end for a URL with the right extension
        const prettyUrl = specifier;
        const versionedSpecifier = getSpecifier({ specifier, version: normalizeVersionToUri(version) });
        return `${basePath}/${apiVersion}/resource/${format}/${encodeURIComponent(versionedSpecifier)}/${prettyUrl}`;
    }
    getPublicApi() {
        return {
            getResource: this.getResource.bind(this),
            resolveResourceUri: this.resolveResourceUri.bind(this),
        };
    }
}
//# sourceMappingURL=index.js.map