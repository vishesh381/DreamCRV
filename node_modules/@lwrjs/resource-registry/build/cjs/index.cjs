var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/resource-registry/src/index.ts
__markAsModule(exports);
__export(exports, {
  LwrResourceRegistry: () => LwrResourceRegistry
});
var import_shared_utils = __toModule(require("@lwrjs/shared-utils"));
var LwrResourceRegistry = class {
  constructor() {
    this.providers = [];
    this.transformers = [];
    this.name = "lwr-resource-registry";
  }
  addResourceProviders(providers) {
    this.providers.push(...providers);
  }
  addResourceTransformers(transformers) {
    this.transformers.push(...transformers);
  }
  async getResource(resourceId, runtimeEnvironment, runtimeParams) {
    for (const provider of this.providers) {
      const result = await provider.getResource(resourceId, runtimeEnvironment, runtimeParams);
      if (result) {
        if (result.src) {
          const defaultUri = result.src;
          const resourceUri = {
            artifactType: "resource",
            uri: defaultUri,
            immutable: runtimeEnvironment.immutableAssets,
            entry: defaultUri
          };
          let uri = defaultUri;
          for (const transformPlugin of this.transformers) {
            const resolveUriResult = await transformPlugin.transformUri?.(resourceUri, result, runtimeEnvironment);
            if (resolveUriResult && resolveUriResult.uri) {
              uri = resolveUriResult.uri;
            }
          }
          result.src = uri;
        }
        return result;
      }
    }
    return void 0;
  }
  async resolveResourceUri({specifier, version = ""}, {apiVersion, format, basePath}) {
    const prettyUrl = specifier;
    const versionedSpecifier = (0, import_shared_utils.getSpecifier)({specifier, version: (0, import_shared_utils.normalizeVersionToUri)(version)});
    return `${basePath}/${apiVersion}/resource/${format}/${encodeURIComponent(versionedSpecifier)}/${prettyUrl}`;
  }
  getPublicApi() {
    return {
      getResource: this.getResource.bind(this),
      resolveResourceUri: this.resolveResourceUri.bind(this)
    };
  }
};
