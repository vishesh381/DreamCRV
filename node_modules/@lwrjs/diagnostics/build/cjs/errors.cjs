var __defProp = Object.defineProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};

// packages/@lwrjs/diagnostics/src/errors.ts
__markAsModule(exports);
__export(exports, {
  DiagnosticsError: () => DiagnosticsError,
  LwrApplicationError: () => LwrApplicationError,
  LwrConfigValidationError: () => LwrConfigValidationError,
  LwrServerError: () => LwrServerError,
  LwrUnresolvableError: () => LwrUnresolvableError,
  createSingleDiagnosticError: () => createSingleDiagnosticError,
  isNodeError: () => isNodeError
});
function isNodeError(error) {
  return error instanceof Error;
}
function createSingleDiagnosticError(diag, errorClass = DiagnosticsError) {
  return new errorClass(diag.description.message, [diag]);
}
var DiagnosticsError = class extends Error {
  constructor(message, diagnostics) {
    if (diagnostics.length === 0) {
      throw new Error("No diagnostics");
    }
    super();
    this._memoMessage = void 0;
    this._message = message;
    this.diagnostics = diagnostics;
    this.name = "DiagnosticsError";
  }
  get message() {
    if (this._memoMessage !== void 0) {
      return this._memoMessage;
    }
    const message = this._message === void 0 ? "" : this._message + "\n";
    return message;
  }
  set message(message) {
    this._message = message;
  }
};
var LwrConfigValidationError = class extends DiagnosticsError {
};
var LwrUnresolvableError = class extends DiagnosticsError {
};
var LwrServerError = class extends DiagnosticsError {
  constructor(message, diagnostics) {
    super(message, diagnostics);
    this.name = "ServerError";
  }
};
var LwrApplicationError = class extends DiagnosticsError {
  constructor(message, diagnostics) {
    super(message, diagnostics);
    this.name = "ApplicationError";
  }
};
