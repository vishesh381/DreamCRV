import type { Dict } from '@lwrjs/types';
export type StaticMarkup = string;
export type SourceLocation = {
    filename?: string;
    identifierName?: string;
    offset?: number;
    start: Position;
    end: Position;
};
export type Position = {
    line: number;
    column: number;
};
export type DiagnosticLocation = {
    sourceText?: string;
    integrity?: DiagnosticIntegrity;
    marker?: StaticMarkup;
    language?: DiagnosticLanguage;
    filename?: string;
    start?: Position;
    end?: Position;
};
export type DiagnosticOrigin = {
    category: string;
    message?: string;
};
export type DiagnosticLogCategory = 'none' | 'info' | 'warn' | 'error';
export type DiagnosticLanguage = 'json' | 'js' | 'css' | 'html' | 'markdown' | 'text' | 'unknown';
export type DiagnosticTag = 'fixable' | 'internal' | 'unique' | 'fatal';
export type DiagnosticTags = {
    [key in DiagnosticTag]?: boolean;
};
export type Diagnostic = {
    description: DiagnosticDescription;
    location?: DiagnosticLocation;
    label?: StaticMarkup;
    origins?: DiagnosticOrigin[];
    dependencies?: {
        filename: string;
        integrity: DiagnosticIntegrity;
    }[];
    tags?: DiagnosticTags;
};
export type Diagnostics = Diagnostic[];
export type DiagnosticIntegrity = {
    hash: string;
};
export type DiagnosticDescription = {
    category: DiagnosticCategory;
    categoryValue?: string;
    message: StaticMarkup;
    advice: DiagnosticAdvice;
};
export type DiagnosticDescriptionOptional = {
    category?: DiagnosticCategory;
    categoryValue?: string;
    message: StaticMarkup;
    advice?: DiagnosticAdvice;
};
export type DiagnosticAdviceItem = DiagnosticAdviceLog | DiagnosticAdviceList | DiagnosticAdviceInspect | DiagnosticAdviceCode | DiagnosticAdviceFrame | DiagnosticAdviceDiff | DiagnosticAdviceStacktrace | DiagnosticAdviceCommand | DiagnosticAdviceAction | DiagnosticAdviceGroup;
export type DiagnosticAdviceGroup = {
    type: 'group';
    title: StaticMarkup;
    advice: DiagnosticAdvice;
};
export type DiagnosticAdviceCommand = {
    type: 'command';
    command: string;
};
export type DiagnosticAdviceLog = {
    type: 'log';
    category: DiagnosticLogCategory;
    text: StaticMarkup;
    compact?: boolean;
};
export type DiagnosticAdviceList = {
    type: 'list';
    list: StaticMarkup[];
    truncate?: boolean;
    reverse?: boolean;
    ordered?: boolean;
};
export type DiagnosticAdviceInspect = {
    type: 'inspect';
    data: any;
};
export type DiagnosticAdviceAction = {
    type: 'action';
    hidden?: boolean;
    extra?: boolean;
    shortcut?: string;
    instruction: StaticMarkup;
    noun: StaticMarkup;
    command: string;
    commandFlags?: Dict<boolean | string | string[]>;
    requestFlags?: any;
    args?: string[];
};
export type DiagnosticAdviceCode = {
    type: 'code';
    sourceText: string;
    sourceTypeJS?: any;
    language: DiagnosticLanguage;
};
export type DiagnosticAdviceFrame = {
    type: 'frame';
    location: DiagnosticLocation;
};
export type DiagnosticAdviceDiff = {
    type: 'diff';
    diff: any;
    language: DiagnosticLanguage;
    sourceTypeJS?: any;
    legend?: {
        add: string;
        delete: string;
    };
};
export type DiagnosticAdviceStacktrace = {
    type: 'stacktrace';
    title?: StaticMarkup;
    truncate?: boolean;
    importantFilenames?: string[];
    frames: DiagnosticAdviceStackFrame[];
};
export type DiagnosticAdvice = DiagnosticAdviceItem[];
export type DiagnosticAdviceStackFrame = {
    prefix?: string;
    suffix?: string;
    object?: string;
    property?: string;
    filename?: string;
    line?: number;
    column?: number;
    language: undefined | DiagnosticLanguage;
    sourceText?: string;
};
export type DiagnosticCategory = DiagnosticLwrConfigCategory | DiagnosticCompiler | DiagnosticLwrUnresolvableCategory | DiagnosticLwrServer | DiagnosticLwrApplication | '...more here';
export type DiagnosticLwrConfigCategory = 'lwrConfig/invalidJson' | 'lwrConfig/invalidSchema';
export type DiagnosticLwrUnresolvableCategory = 'lwrUnresolvable/asset' | 'lwrUnresolvable/module' | 'lwrUnresolvable/bundle' | 'lwrUnresolvable/label' | 'lwrUnresolvable/routes' | 'lwrUnresolvable/resource' | 'lwrUnresolvable/view' | 'lwrUnresolvable/ssr' | 'lwrUnresolvable/invalid';
export type DiagnosticCompiler = 'compile/umd_transform';
export type DiagnosticLwrServer = 'lwrServer/warmupError' | 'lwrServer/invalidMode' | 'lwrServer/fatal';
export type DiagnosticLwrApplication = 'lwrApplication/routeHandler' | 'lwrApplication/ssr';
export type InputMessagesFactory = (...params: any[]) => Partial<DiagnosticDescription>;
export type InputMessagesCategory = {
    [key: string]: Partial<DiagnosticDescription> | InputMessagesFactory;
};
export type OuputMessagesFactoryReturn<Ret extends Partial<DiagnosticDescription>> = Omit<Ret, 'message' | 'advice'> & {
    advice: DiagnosticAdvice;
    message: StaticMarkup;
};
export type OutputMessagesFactory<Func extends InputMessagesFactory> = (...params: Parameters<Func>) => OuputMessagesFactoryReturn<ReturnType<Func>>;
export type OutputMessagesValue<Value> = Value extends StaticMarkup ? {
    message: StaticMarkup;
    advice: DiagnosticAdvice;
} : Value extends Partial<DiagnosticDescription> ? OuputMessagesFactoryReturn<Value> : Value extends InputMessagesFactory ? OutputMessagesFactory<Value> : never;
export type OutputMessagesCategory<Input extends InputMessagesCategory> = {
    [Key in keyof Input]: OutputMessagesValue<Input[Key]>;
};
//# sourceMappingURL=types.d.ts.map