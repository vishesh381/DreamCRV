/// <reference types="node" />
import type { Diagnostic, Diagnostics } from './types.js';
export declare function isNodeError(error: unknown): error is NodeJS.ErrnoException;
export declare function createSingleDiagnosticError(diag: Diagnostic, errorClass?: typeof DiagnosticsError): DiagnosticsError;
export declare class DiagnosticsError extends Error {
    constructor(message: undefined | string, diagnostics: Diagnostics);
    private _memoMessage;
    private _message;
    get message(): string;
    set message(message: string);
    diagnostics: Diagnostics;
}
export declare class LwrConfigValidationError extends DiagnosticsError {
}
export declare class LwrUnresolvableError extends DiagnosticsError {
}
export declare class LwrServerError extends DiagnosticsError {
    constructor(message: undefined | string, diagnostics: Diagnostics);
}
export declare class LwrApplicationError extends DiagnosticsError {
    constructor(message: undefined | string, diagnostics: Diagnostics);
}
//# sourceMappingURL=errors.d.ts.map