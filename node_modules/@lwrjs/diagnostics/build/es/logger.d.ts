type LEVEL = 'verbose' | 'debug' | 'info' | 'warn' | 'error' | 'silent';
export declare const SILENT: LEVEL;
export declare const VERBOSE: LEVEL;
export declare const DEBUG: LEVEL;
export declare const INFO: LEVEL;
export declare const WARN: LEVEL;
export declare const ERROR: LEVEL;
type LoggerOptions = {
    dedupe?: Set<string>;
};
declare function getLogLevel(): string;
declare function log(level: LEVEL, message: string, additionalInfo?: any): void;
export declare const stringifyError: (error: any, count?: number) => string;
export type LogMetadata = {
    message: string;
    label: string;
    additionalInfo?: any;
};
export declare const logger: {
    verbose: (info: string | LogMetadata, additionalInfo?: any) => void;
    debug: (info: string | LogMetadata, additionalInfo?: any) => void;
    info: (info: string | LogMetadata, additionalInfo?: any) => void;
    warn: (info: string | LogMetadata, additionalInfo?: any) => void;
    error: (error: any, additionalInfo?: any) => void;
    log: typeof log;
    setOptions: (opts: LoggerOptions) => void;
    getLogLevel: typeof getLogLevel;
    isDebugEnabled: () => boolean;
    isVerboseEnabled: () => boolean;
    isWarnEnabled: () => boolean;
    isInfoEnabled: () => boolean;
    isErrorEnabled: () => boolean;
};
export {};
//# sourceMappingURL=logger.d.ts.map