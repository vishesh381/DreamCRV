export declare const descriptions: {
    CONFIG_PARSER: import("../types.js").OutputMessagesCategory<{
        TEST: {
            message: string;
        };
        TEST_ADVICE: (tagName: string, openLocation: import("../types.js").DiagnosticLocation) => {
            message: string;
            advice: ({
                type: "log";
                category: "info";
                text: string;
                location?: undefined;
            } | {
                type: "frame";
                location: import("../types.js").DiagnosticLocation;
                category?: undefined;
                text?: undefined;
            })[];
        };
        INVALID_JSON: (invalidJsonError: string) => {
            category: "lwrConfig/invalidJson";
            message: string;
        };
        INCORRECT_NODE_TYPE: (configProperty: string, expectedNodeType: string, actualNodeType: string) => {
            category: "lwrConfig/invalidSchema";
            message: string;
        };
        INVALID_EMPTY_NODE: (configProperty: string) => {
            category: "lwrConfig/invalidSchema";
            message: string;
        };
        INVALID_PROPERTY: (configProperty: string, prop: string) => {
            category: "lwrConfig/invalidSchema";
            message: string;
        };
        NON_EMPTY_STRING: (configProperty: string, actualProp: string) => {
            category: "lwrConfig/invalidSchema";
            message: string;
        };
        NON_EMPTY_ARRAY: (configProperty: string, actualProp: string) => {
            category: "lwrConfig/invalidSchema";
            message: string;
        };
        INVALID_PORT: (configProperty: string, actualProp: string) => {
            category: "lwrConfig/invalidSchema";
            message: string;
        };
        INVALID_METHOD: (configProperty: string, actualProp: string) => {
            category: "lwrConfig/invalidSchema";
            message: string;
        };
        INVALID_SERVER_TYPE: (configProperty: string, actualProp: string) => {
            category: "lwrConfig/invalidSchema";
            message: string;
        };
        INVALID_GENERATOR_CONFIG: (configProperty: string, actualProp: string) => {
            category: "lwrConfig/invalidSchema";
            message: string;
        };
        INVALID_STATUS: (configProperty: string, actualProp: string) => {
            category: "lwrConfig/invalidSchema";
            message: string;
        };
        INVALID_SPECIFIER: (configProperty: string, actualProp: string) => {
            category: "lwrConfig/invalidSchema";
            message: string;
        };
        INVALID_PATH: (configProperty: string, actualProp: string) => {
            category: "lwrConfig/invalidSchema";
            message: string;
        };
        INVALID_ORIGIN: (configProperty: string, actualProp: string) => {
            category: "lwrConfig/invalidSchema";
            message: string;
        };
        INVALID_FILE_PATTERN: (configProperty: string, actualProp: string | any[]) => {
            category: "lwrConfig/invalidSchema";
            message: string;
        };
        INVALID_BASEPATH: (configProperty: string, actualProp: string) => {
            category: "lwrConfig/invalidSchema";
            message: string;
        };
        INVALID_SERVICE: (configProperty: string, actualProp: string) => {
            category: "lwrConfig/invalidSchema";
            message: string;
        };
        INVALID_ENVIRONMENT: (configProperty: string) => {
            category: "lwrConfig/invalidSchema";
            message: string;
        };
        MISSING_ONE_OF: (configProperty: string, childProps: string[]) => {
            category: "lwrConfig/invalidSchema";
            message: string;
        };
        TOO_MANY: (configProperty: string, childProps: string[]) => {
            category: "lwrConfig/invalidSchema";
            message: string;
        };
        MISSING_REQUIRED: (configProperty: string, childProps: string[]) => {
            category: "lwrConfig/invalidSchema";
            message: string;
        };
        DUPLICATE_IDS: (configProperty: string, dupeIds: string[]) => {
            category: "lwrConfig/invalidSchema";
            message: string;
        };
        COMPILE_LOCKER_SSR: () => {
            category: "lwrConfig/invalidSchema";
            message: string;
        };
        DUPLICATE_BUNDLE_CONFIG: (dupeIds: string[]) => {
            category: "lwrConfig/invalidSchema";
            message: string;
        };
        DEFAULT_NOT_IN_LOCALES: (defaultLocale: string, locales: string[]) => {
            category: "lwrConfig/invalidSchema";
            message: string;
        };
        FALLBACK_NOT_IN_LOCALES: (fallback: string, locales: string[]) => {
            category: "lwrConfig/invalidSchema";
            message: string;
        };
        SSR_WITHOUT_PRELOAD: (configProperty: string) => {
            category: "lwrConfig/invalidSchema";
            message: string;
        };
    }>;
    UNRESOLVABLE: import("../types.js").OutputMessagesCategory<{
        ASSET: (assetPath: string) => {
            category: "lwrUnresolvable/asset";
            message: string;
        };
        DIR_ALIAS: (assetPath: string) => {
            category: "lwrUnresolvable/asset";
            message: string;
        };
        MODULE: (moduleSpecifier: string) => {
            category: "lwrUnresolvable/module";
            message: string;
        };
        MODULE_ENTRY: (moduleSpecifier: string) => {
            category: "lwrUnresolvable/module";
            message: string;
        };
        BUNDLE: (specifier: string) => {
            category: "lwrUnresolvable/bundle";
            message: string;
        };
        LWC_MODULE: (name: string) => {
            category: "lwrUnresolvable/module";
            message: string;
        };
        SIGNED_MODULE: (moduleSpecifier: string, signature: string) => {
            category: "lwrUnresolvable/module";
            message: string;
        };
        RESOURCE: (resourceSpecifier: string, resourceVersion: any) => {
            category: "lwrUnresolvable/resource";
            message: string;
        };
        VIEW: (viewPath: string) => {
            category: "lwrUnresolvable/view";
            message: string;
        };
        VIEW_CONFIG: (configPath: string) => {
            category: "lwrUnresolvable/view";
            message: string;
        };
        APP_CONFIG: (appId: string) => {
            category: "lwrUnresolvable/view";
            message: string;
        };
        INVALID_JSON: () => {
            category: "lwrUnresolvable/invalid";
            message: string;
        };
        INVALID_API_VERSION: (apiVersion: string, expectedVersion: any) => {
            category: "lwrUnresolvable/invalid";
            message: string;
        };
        INVALID_ENVIRONMENT: (environment: string) => {
            category: "lwrUnresolvable/invalid";
            message: string;
        };
        INVALID_SPECIFIER: (specifier: string) => {
            category: "lwrUnresolvable/invalid";
            message: string;
        };
        LABEL_MODULE: (file: string, error: string) => {
            category: "lwrUnresolvable/label";
            message: string;
        };
        ROUTES_MODULE: (file: string, error: string) => {
            category: "lwrUnresolvable/routes";
            message: string;
        };
        PRELOAD_MODULE: (specifier: string) => {
            category: "lwrUnresolvable/invalid";
            message: string;
        };
        INVALID_MODE: (mode: string) => {
            category: "lwrUnresolvable/invalid";
            message: string;
        };
        SSR_TIMEOUT: (specifier: string, time: number) => {
            category: "lwrUnresolvable/ssr";
            message: string;
        };
    }>;
    SERVER: import("../types.js").OutputMessagesCategory<{
        WARMUP_ERROR: (error: string) => {
            category: "lwrServer/warmupError";
            message: string;
        };
        UNEXPECTED_ERROR: (error: string) => {
            category: "lwrServer/fatal";
            message: string;
        };
        SERVER_ERROR: (name: string) => {
            category: "lwrServer/fatal";
            message: string;
        };
    }>;
    APPLICATION: import("../types.js").OutputMessagesCategory<{
        ROUTE_HANDLER_ERROR: (route: string, error: string) => {
            category: "lwrApplication/routeHandler";
            message: string;
        };
        SSR_ERROR: (specifier: string, error: string) => {
            category: "lwrApplication/ssr";
            message: string;
        };
    }>;
};
export * from './core-diagnostics.js';
//# sourceMappingURL=index.d.ts.map