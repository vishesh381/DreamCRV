/* istanbul ignore file */
import { createDiagnosticsCategory } from './core-diagnostics.js';
export const unresolvable = createDiagnosticsCategory({
    ASSET: (assetPath) => ({
        category: 'lwrUnresolvable/asset',
        message: `404: Could not find asset at "${assetPath}"`,
    }),
    DIR_ALIAS: (assetPath) => ({
        category: 'lwrUnresolvable/asset',
        message: `404: Unable to normalize "${assetPath}", no alias replacement found`,
    }),
    MODULE: (moduleSpecifier) => ({
        category: 'lwrUnresolvable/module',
        message: `404: Could not find module with specifier "${moduleSpecifier}"`,
    }),
    MODULE_ENTRY: (moduleSpecifier) => ({
        category: 'lwrUnresolvable/module',
        message: `404: Could not find module entry with specifier "${moduleSpecifier}"`,
    }),
    BUNDLE: (specifier) => ({
        category: 'lwrUnresolvable/bundle',
        message: `404: Could not find bundle with specifier "${specifier}"`,
    }),
    LWC_MODULE: (name) => ({
        category: 'lwrUnresolvable/module',
        message: `404: Could not find ${name}`,
    }),
    SIGNED_MODULE: (moduleSpecifier, signature) => ({
        category: 'lwrUnresolvable/module',
        message: `404: Could not find module with specifier "${moduleSpecifier}" and signature "${signature}"`,
    }),
    RESOURCE: (resourceSpecifier, resourceVersion) => ({
        category: 'lwrUnresolvable/resource',
        message: `404: Could not find resource with specifier "${resourceSpecifier}" and version "${resourceVersion}"`,
    }),
    VIEW: (viewPath) => ({
        category: 'lwrUnresolvable/view',
        message: `404: Could not find view at "${viewPath}"`,
    }),
    VIEW_CONFIG: (configPath) => ({
        category: 'lwrUnresolvable/view',
        message: `404: LWR configuration for viewPath "${configPath}" is not available`,
    }),
    APP_CONFIG: (appId) => ({
        category: 'lwrUnresolvable/view',
        message: `404: LWR configuration for appId "${appId}" is not available`,
    }),
    INVALID_JSON: () => ({
        category: 'lwrUnresolvable/invalid',
        message: '400: Accept header and json query parameter are incompatible',
    }),
    INVALID_API_VERSION: (apiVersion, expectedVersion) => ({
        category: 'lwrUnresolvable/invalid',
        message: `400: API Version "${apiVersion}" is not supported.  Expected "${expectedVersion}"`,
    }),
    INVALID_ENVIRONMENT: (environment) => ({
        category: 'lwrUnresolvable/invalid',
        message: `400: Environment "${environment}" is not supported`,
    }),
    INVALID_SPECIFIER: (specifier) => ({
        category: 'lwrUnresolvable/invalid',
        message: `400: Unable to resolve specifier "${specifier}" because it contains path traversal`,
    }),
    LABEL_MODULE: (file, error) => ({
        category: 'lwrUnresolvable/label',
        message: `Invalid JSON: Labels file ${file} must be a JSON object with string values or nested string values\n${error}`,
    }),
    ROUTES_MODULE: (file, error) => ({
        category: 'lwrUnresolvable/routes',
        message: `Invalid JSON: Route config file ${file} is invalid\n${error}`,
    }),
    PRELOAD_MODULE: (specifier) => ({
        category: 'lwrUnresolvable/invalid',
        message: `Invalid preload module: ${specifier}`,
    }),
    INVALID_MODE: (mode) => ({
        category: 'lwrUnresolvable/invalid',
        message: `No configuration found for server mode - ${mode}`,
    }),
    SSR_TIMEOUT: (specifier, time) => ({
        category: 'lwrUnresolvable/ssr',
        message: `Server side rendering or data prefetching for '${specifier}' timed out after ${time}ms`,
    }),
});
//# sourceMappingURL=unresolvable.js.map