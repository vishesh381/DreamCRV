import type { DiagnosticLocation } from '../types.js';
export declare const configParser: import("../types.js").OutputMessagesCategory<{
    TEST: {
        message: string;
    };
    TEST_ADVICE: (tagName: string, openLocation: DiagnosticLocation) => {
        message: string;
        advice: ({
            type: "log";
            category: "info";
            text: string;
            location?: undefined;
        } | {
            type: "frame";
            location: DiagnosticLocation;
            category?: undefined;
            text?: undefined;
        })[];
    };
    INVALID_JSON: (invalidJsonError: string) => {
        category: "lwrConfig/invalidJson";
        message: string;
    };
    INCORRECT_NODE_TYPE: (configProperty: string, expectedNodeType: string, actualNodeType: string) => {
        category: "lwrConfig/invalidSchema";
        message: string;
    };
    INVALID_EMPTY_NODE: (configProperty: string) => {
        category: "lwrConfig/invalidSchema";
        message: string;
    };
    INVALID_PROPERTY: (configProperty: string, prop: string) => {
        category: "lwrConfig/invalidSchema";
        message: string;
    };
    NON_EMPTY_STRING: (configProperty: string, actualProp: string) => {
        category: "lwrConfig/invalidSchema";
        message: string;
    };
    NON_EMPTY_ARRAY: (configProperty: string, actualProp: string) => {
        category: "lwrConfig/invalidSchema";
        message: string;
    };
    INVALID_PORT: (configProperty: string, actualProp: string) => {
        category: "lwrConfig/invalidSchema";
        message: string;
    };
    INVALID_METHOD: (configProperty: string, actualProp: string) => {
        category: "lwrConfig/invalidSchema";
        message: string;
    };
    INVALID_SERVER_TYPE: (configProperty: string, actualProp: string) => {
        category: "lwrConfig/invalidSchema";
        message: string;
    };
    INVALID_GENERATOR_CONFIG: (configProperty: string, actualProp: string) => {
        category: "lwrConfig/invalidSchema";
        message: string;
    };
    INVALID_STATUS: (configProperty: string, actualProp: string) => {
        category: "lwrConfig/invalidSchema";
        message: string;
    };
    INVALID_SPECIFIER: (configProperty: string, actualProp: string) => {
        category: "lwrConfig/invalidSchema";
        message: string;
    };
    INVALID_PATH: (configProperty: string, actualProp: string) => {
        category: "lwrConfig/invalidSchema";
        message: string;
    };
    INVALID_ORIGIN: (configProperty: string, actualProp: string) => {
        category: "lwrConfig/invalidSchema";
        message: string;
    };
    INVALID_FILE_PATTERN: (configProperty: string, actualProp: string | any[]) => {
        category: "lwrConfig/invalidSchema";
        message: string;
    };
    INVALID_BASEPATH: (configProperty: string, actualProp: string) => {
        category: "lwrConfig/invalidSchema";
        message: string;
    };
    INVALID_SERVICE: (configProperty: string, actualProp: string) => {
        category: "lwrConfig/invalidSchema";
        message: string;
    };
    INVALID_ENVIRONMENT: (configProperty: string) => {
        category: "lwrConfig/invalidSchema";
        message: string;
    };
    MISSING_ONE_OF: (configProperty: string, childProps: string[]) => {
        category: "lwrConfig/invalidSchema";
        message: string;
    };
    TOO_MANY: (configProperty: string, childProps: string[]) => {
        category: "lwrConfig/invalidSchema";
        message: string;
    };
    MISSING_REQUIRED: (configProperty: string, childProps: string[]) => {
        category: "lwrConfig/invalidSchema";
        message: string;
    };
    DUPLICATE_IDS: (configProperty: string, dupeIds: string[]) => {
        category: "lwrConfig/invalidSchema";
        message: string;
    };
    COMPILE_LOCKER_SSR: () => {
        category: "lwrConfig/invalidSchema";
        message: string;
    };
    DUPLICATE_BUNDLE_CONFIG: (dupeIds: string[]) => {
        category: "lwrConfig/invalidSchema";
        message: string;
    };
    DEFAULT_NOT_IN_LOCALES: (defaultLocale: string, locales: string[]) => {
        category: "lwrConfig/invalidSchema";
        message: string;
    };
    FALLBACK_NOT_IN_LOCALES: (fallback: string, locales: string[]) => {
        category: "lwrConfig/invalidSchema";
        message: string;
    };
    SSR_WITHOUT_PRELOAD: (configProperty: string) => {
        category: "lwrConfig/invalidSchema";
        message: string;
    };
}>;
//# sourceMappingURL=configParser.d.ts.map