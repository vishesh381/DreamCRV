var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/fs-asset-provider/src/index.ts
__markAsModule(exports);
__export(exports, {
  default: () => src_default
});
var import_fs_extra = __toModule(require("fs-extra"));
var import_path = __toModule(require("path"));
var import_diagnostics = __toModule(require("@lwrjs/diagnostics"));
var import_shared_utils = __toModule(require("@lwrjs/shared-utils"));
function hash(filePath) {
  const result = import_fs_extra.default.statSync(filePath);
  return (result.mtimeMs * 1e4).toString();
}
var FsAssetProvider = class {
  constructor(_pluginConfig, providerConfig) {
    this.name = "fs-asset-provider";
    this.cachedAssets = new Map();
    const {
      appEmitter,
      runtimeEnvironment: {watchFiles},
      watcherFactory
    } = providerConfig;
    const {assets, rootDir, layoutsDir, contentDir, basePath} = providerConfig.config;
    this.basePath = basePath;
    this.resourcePaths = {assets, rootDir, layoutsDir, contentDir};
    this.assetPathMap = assets.reduce((map, asset) => {
      const urlPath = `${basePath}${asset.urlPath}`;
      map.set(urlPath, asset.dir || asset.file);
      return map;
    }, new Map());
    this.emitter = appEmitter;
    if (watchFiles && watcherFactory) {
      this.watcher = watcherFactory.setupWatcher(this.onModuleChange.bind(this));
    }
  }
  async onModuleChange(fileChanged) {
    let cachedAsset = this.cachedAssets.get(fileChanged);
    if (!cachedAsset) {
      throw new Error("We are observing a file we have not yet processed, this shouldn't happen...");
    }
    this.cachedAssets.delete(fileChanged);
    cachedAsset = await this.getAssetFromFSPath(fileChanged);
    this.emitter.notifyAssetSourceChanged(cachedAsset);
  }
  async initialize() {
    return;
  }
  async getAsset(assetId) {
    const fullAssetPath = (0, import_shared_utils.normalizeAssetSpecifier)(assetId, this.assetPathMap, this.resourcePaths, this.basePath);
    return this.getAssetFromFSPath(fullAssetPath);
  }
  async getAssetFromFSPath(assetPath) {
    assetPath = (0, import_path.normalize)(assetPath);
    const fullAssetPath = decodeURI(assetPath);
    if (!this.cachedAssets.has(fullAssetPath)) {
      const [assetPath2] = fullAssetPath.split("?");
      const ext = (0, import_path.extname)(`x.${assetPath2}`).toLowerCase().substring(1);
      if (ext && import_fs_extra.default.existsSync(assetPath2)) {
        const ownHash = hash(assetPath2);
        const mimeType = (0, import_shared_utils.mimeLookup)(assetPath2);
        const assetDef = {
          entry: assetPath2,
          ext,
          mime: mimeType,
          ownHash,
          content: (passedEncoding) => {
            const encoding = passedEncoding || (mimeType && mimeType.startsWith("text/") ? "utf-8" : null);
            return import_fs_extra.default.readFileSync(assetPath2, {encoding});
          }
        };
        this.cachedAssets.set(fullAssetPath, assetDef);
        if (this.watcher) {
          this.watcher.add(assetPath2);
        }
      } else {
        import_diagnostics.logger.debug({
          label: `${this.name}`,
          message: `Asset ${fullAssetPath} did not exist on filesystem at ${assetPath2}`
        });
        return void 0;
      }
    }
    return this.cachedAssets.get(fullAssetPath);
  }
};
var src_default = FsAssetProvider;
