export function overrideBundleConfig(bundleConfig, bundleConfigOverrides) {
    if (!bundleConfigOverrides) {
        return bundleConfig;
    }
    // Replace properties that are overridden
    const newBundleConfig = {
        UNSAFE_lwrDefaultExclude: [
            ...(bundleConfigOverrides.UNSAFE_lwrDefaultExclude || [
                ...(bundleConfig.UNSAFE_lwrDefaultExclude || []),
            ]),
        ],
        external: { ...(bundleConfigOverrides.external || { ...(bundleConfig.external || {}) }) },
        alias: { ...(bundleConfigOverrides.alias || { ...(bundleConfig.alias || {}) }) },
    };
    // Append Excludes
    if (bundleConfigOverrides.appendExcludes) {
        newBundleConfig.exclude = appendAndDedupArrays(bundleConfig.exclude, bundleConfigOverrides.exclude);
        // or Replace Excludes
    }
    else {
        newBundleConfig.exclude = [...(bundleConfigOverrides.exclude || [...(bundleConfig.exclude || [])])];
    }
    return newBundleConfig;
}
function appendAndDedupArrays(a1, a2) {
    let ret;
    if (!a1 && a2) {
        return a2.filter((item, pos) => a2.indexOf(item) === pos);
    }
    else if (!a2 && a1) {
        return a1.filter((item, pos) => a1.indexOf(item) === pos);
    }
    else if (a1 && a2) {
        const c = a1?.concat(a2);
        return c.filter((item, pos) => c.indexOf(item) === pos);
    }
    return ret;
}
//# sourceMappingURL=bundle-common.js.map