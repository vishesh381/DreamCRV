import { amdBundler } from './utils/amd-common.js';
import { createIntegrityHash } from '@lwrjs/shared-utils';
export default class AmdBundlerProvider {
    constructor(options, { config, moduleRegistry }) {
        this.name = 'amd-runtime-bundle-provider';
        this.config = config;
        this.moduleRegistry = moduleRegistry;
    }
    async bundle(moduleId, runtimeEnvironment, runtimeParams = {}, bundleConfigOverrides) {
        if (runtimeEnvironment.format === 'amd') {
            const { moduleRegistry, config } = this;
            const { minify, debug } = runtimeEnvironment;
            const minified = minify && !debug;
            const bundle = await amdBundler(moduleId, moduleRegistry, minified, // will minify using rollup/terser if true - MRT runtime friendly
            runtimeEnvironment, runtimeParams, config, bundleConfigOverrides);
            if (bundle) {
                bundle.integrity = createIntegrityHash((await bundle.getCode()));
            }
            return bundle;
        }
    }
}
//# sourceMappingURL=amd-runtime-bundle-provider.js.map