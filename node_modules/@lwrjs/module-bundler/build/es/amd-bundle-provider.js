import { amdBundler } from './utils/amd-common.js';
import { minifyJavascript, parseJavascript } from './utils/esbuild-utils.js';
import { createIntegrityHash } from '@lwrjs/shared-utils';
export default class AmdBundlerProvider {
    constructor(options, { config, moduleRegistry }) {
        this.name = 'amd-bundle-provider';
        this.config = config;
        this.moduleRegistry = moduleRegistry;
    }
    async bundle(moduleId, runtimeEnvironment, runtimeParams = {}, bundleConfigOverrides) {
        if (runtimeEnvironment.format === 'amd') {
            const { moduleRegistry, config } = this;
            const bundle = await amdBundler(moduleId, moduleRegistry, false, // we NEVER want to minify via rollup/terser with this bundler; it's too slow
            runtimeEnvironment, runtimeParams, config, bundleConfigOverrides);
            // Minification via esbuild for performance
            const { minify, debug, env: { NODE_ENV: envMode } = { NODE_ENV: 'production' }, } = runtimeEnvironment;
            const minified = !!minify && !debug;
            let bundleCode;
            if (minified) {
                // TODO convert to getCode()
                bundleCode = await minifyJavascript((await bundle.getCode()));
            }
            else {
                bundleCode = await parseJavascript((await bundle.getCode()), { envMode });
            }
            bundle.integrity = createIntegrityHash(bundleCode);
            bundle.getCode = () => Promise.resolve(bundleCode);
            return bundle;
        }
    }
}
//# sourceMappingURL=amd-bundle-provider.js.map