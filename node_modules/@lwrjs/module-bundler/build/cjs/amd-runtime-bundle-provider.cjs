var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/module-bundler/src/amd-runtime-bundle-provider.ts
__markAsModule(exports);
__export(exports, {
  default: () => amd_runtime_bundle_provider_default
});
var import_amd_common = __toModule(require("./utils/amd-common.cjs"));
var import_shared_utils = __toModule(require("@lwrjs/shared-utils"));
var AmdBundlerProvider = class {
  constructor(options, {config, moduleRegistry}) {
    this.name = "amd-runtime-bundle-provider";
    this.config = config;
    this.moduleRegistry = moduleRegistry;
  }
  async bundle(moduleId, runtimeEnvironment, runtimeParams = {}, bundleConfigOverrides) {
    if (runtimeEnvironment.format === "amd") {
      const {moduleRegistry, config} = this;
      const {minify, debug} = runtimeEnvironment;
      const minified = minify && !debug;
      const bundle = await (0, import_amd_common.amdBundler)(moduleId, moduleRegistry, minified, runtimeEnvironment, runtimeParams, config, bundleConfigOverrides);
      if (bundle) {
        bundle.integrity = (0, import_shared_utils.createIntegrityHash)(await bundle.getCode());
      }
      return bundle;
    }
  }
};
var amd_runtime_bundle_provider_default = AmdBundlerProvider;
