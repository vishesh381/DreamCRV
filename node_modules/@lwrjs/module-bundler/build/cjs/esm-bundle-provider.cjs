var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/module-bundler/src/esm-bundle-provider.ts
__markAsModule(exports);
__export(exports, {
  default: () => esm_bundle_provider_default
});
var import_rollup = __toModule(require("rollup"));
var import_instrumentation = __toModule(require("@lwrjs/instrumentation"));
var import_rollup_esm_bundler_plugin = __toModule(require("./utils/rollup-esm-bundler-plugin.cjs"));
var import_esbuild_utils = __toModule(require("./utils/esbuild-utils.cjs"));
var import_bundle_common = __toModule(require("./utils/bundle-common.cjs"));
var import_shared_utils = __toModule(require("@lwrjs/shared-utils"));
var EsmBundlerProvider = class {
  constructor(_options, {config, moduleRegistry}) {
    this.name = "esm-bundle-provider";
    this.config = config;
    this.moduleRegistry = moduleRegistry;
  }
  async bundle(moduleId, runtimeEnvironment, runtimeParams = {}, bundleConfigOverrides) {
    if (runtimeEnvironment.format === "esm") {
      const {moduleRegistry, config} = this;
      return await esmBundler(moduleId, moduleRegistry, runtimeEnvironment, runtimeParams, config, bundleConfigOverrides);
    }
  }
};
var esm_bundle_provider_default = EsmBundlerProvider;
async function esmBundler(moduleId, moduleRegistry, runtimeEnvironment, runtimeParams = {}, {bundleConfig}, bundleConfigOverrides) {
  const {exclude, external = {}, alias = {}} = (0, import_bundle_common.overrideBundleConfig)(bundleConfig, bundleConfigOverrides);
  const {sourceMapUrl} = runtimeEnvironment;
  const requiredImports = new Map();
  const dynamicImports = new Map();
  const rootModuleDef = await moduleRegistry.getLinkedModule(moduleId, runtimeEnvironment, runtimeParams);
  const result = await (0, import_instrumentation.getTracer)().trace({
    name: import_instrumentation.BundleSpan.Rollup,
    attributes: {
      specifier: moduleId.specifier,
      format: "esm"
    }
  }, async () => {
    const bundle = await (0, import_rollup.rollup)({
      input: moduleId.specifier,
      plugins: [
        (0, import_rollup_esm_bundler_plugin.bundleDefinitions)({
          rootModuleDef,
          runtimeEnvironment,
          moduleRegistry,
          exclude,
          alias,
          runtimeParams,
          requiredImports,
          dynamicImports
        })
      ],
      external: Object.keys(external),
      makeAbsoluteExternalsRelative: "ifRelativeSource"
    });
    return bundle.generate({
      paths: (id2) => {
        if (external[id2] && (external[id2].startsWith(import_shared_utils.PROTOCOL_HTTP) || external[id2].startsWith(import_shared_utils.PROTOCOL_HTTPS))) {
          return external[id2];
        }
        return id2;
      },
      sourcemap: true
    });
  });
  const bundleCode = result.output[0].code;
  const bundleMap = result.output[0].map;
  let code = sourceMapUrl ? `${bundleCode}
//# sourceMappingURL=${sourceMapUrl}` : bundleCode;
  const {id, specifier, namespace, name, version} = rootModuleDef;
  const {minify, debug} = runtimeEnvironment;
  const minified = !!minify && !debug;
  if (minified) {
    code = await (0, import_esbuild_utils.minifyJavascript)(code);
  }
  return {
    id,
    specifier,
    namespace,
    name,
    version,
    getCode: () => Promise.resolve(code),
    config: {external, exclude},
    map: bundleMap,
    integrity: (0, import_shared_utils.createIntegrityHash)(code),
    bundleRecord: {
      imports: Array.from(requiredImports.values()),
      dynamicImports: Array.from(dynamicImports.values()),
      includedModules: []
    }
  };
}
