var __defProp = Object.defineProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};

// packages/@lwrjs/module-bundler/src/utils/bundle-common.ts
__markAsModule(exports);
__export(exports, {
  overrideBundleConfig: () => overrideBundleConfig
});
function overrideBundleConfig(bundleConfig, bundleConfigOverrides) {
  if (!bundleConfigOverrides) {
    return bundleConfig;
  }
  const newBundleConfig = {
    UNSAFE_lwrDefaultExclude: [
      ...bundleConfigOverrides.UNSAFE_lwrDefaultExclude || [
        ...bundleConfig.UNSAFE_lwrDefaultExclude || []
      ]
    ],
    external: {...bundleConfigOverrides.external || {...bundleConfig.external || {}}},
    alias: {...bundleConfigOverrides.alias || {...bundleConfig.alias || {}}}
  };
  if (bundleConfigOverrides.appendExcludes) {
    newBundleConfig.exclude = appendAndDedupArrays(bundleConfig.exclude, bundleConfigOverrides.exclude);
  } else {
    newBundleConfig.exclude = [...bundleConfigOverrides.exclude || [...bundleConfig.exclude || []]];
  }
  return newBundleConfig;
}
function appendAndDedupArrays(a1, a2) {
  let ret;
  if (!a1 && a2) {
    return a2.filter((item, pos) => a2.indexOf(item) === pos);
  } else if (!a2 && a1) {
    return a1.filter((item, pos) => a1.indexOf(item) === pos);
  } else if (a1 && a2) {
    const c = a1?.concat(a2);
    return c.filter((item, pos) => c.indexOf(item) === pos);
  }
  return ret;
}
