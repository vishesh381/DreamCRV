var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/config/src/defaults.ts
__markAsModule(exports);
__export(exports, {
  DEFAULT_AMD_BUNDLE_EXCLUSIONS: () => DEFAULT_AMD_BUNDLE_EXCLUSIONS,
  DEFAULT_AMD_LOADER: () => DEFAULT_AMD_LOADER,
  DEFAULT_AMD_LOADER_LEGACY: () => DEFAULT_AMD_LOADER_LEGACY,
  DEFAULT_ESM_BUNDLE_EXCLUSIONS: () => DEFAULT_ESM_BUNDLE_EXCLUSIONS,
  DEFAULT_ESM_LOADER: () => DEFAULT_ESM_LOADER,
  DEFAULT_GENERATOR_CONFIG: () => DEFAULT_GENERATOR_CONFIG,
  DEFAULT_LWR_BOOTSTRAP_CONFIG: () => DEFAULT_LWR_BOOTSTRAP_CONFIG,
  DEFAULT_LWR_CONFIG: () => DEFAULT_LWR_CONFIG,
  DEFAULT_LWR_CONFIG_JSON: () => DEFAULT_LWR_CONFIG_JSON,
  DEFAULT_LWR_MODULES: () => DEFAULT_LWR_MODULES,
  DEFAULT_ROOT_DIR: () => DEFAULT_ROOT_DIR,
  DEFAULT_SERVICE_PACKAGE_NAME: () => DEFAULT_SERVICE_PACKAGE_NAME,
  LWR_INFO_ROUTE: () => LWR_INFO_ROUTE,
  MIN_LWC_VERSION: () => MIN_LWC_VERSION,
  MIN_LWR_VERSION: () => MIN_LWR_VERSION,
  getDefaultBundleConfig: () => getDefaultBundleConfig
});
var import_shared_utils = __toModule(require("@lwrjs/shared-utils"));
var import_runtime_config = __toModule(require("./runtime-config.cjs"));
var import_package = __toModule(require("@lwrjs/config/package"));
var MIN_LWR_VERSION = "0.12.0";
var MIN_LWC_VERSION = "6.1.0";
var PORT = process.env.PORT ? parseInt(process.env.PORT, 10) : 3e3;
var MODE = process.env.MODE || "prod";
var DEFAULT_BASE_PATH = "";
var DEFAULT_API_VERSION = "1";
var DEFAULT_SERVER_TYPE = "express";
var DEFAULT_LWR_CONFIG_JSON = "$rootDir/lwr.config.json";
var DEFAULT_GENERATOR_CONFIG = {
  outputDir: "site",
  skipCleanOutputDir: false,
  skipBaseDocumentGeneration: false,
  _additionalModules: [],
  _additionalRoutePaths: []
};
var DEFAULT_ROOT_DIR = process.cwd();
var DEFAULT_CACHE_FOLDER = "$rootDir/__lwr_cache__";
var DEFAULT_ASSETS_DIR = "$rootDir/src/assets";
var DEFAULT_CONTENT_DIR = "$rootDir/src/content";
var DEFAULT_LAYOUTS_DIR = "$rootDir/src/layouts";
var DEFAULT_DATA_DIR = "$rootDir/src/data";
var DEFAULT_MODULE_PROVIDERS = [
  "@lwrjs/app-service/moduleProvider",
  "@lwrjs/router/module-provider",
  "@lwrjs/lwc-module-provider",
  "@lwrjs/npm-module-provider",
  "@lwrjs/module-registry/externals-module-provider"
];
var DEFAULT_RESOURCE_PROVIDERS = ["@lwrjs/loader"];
var DEFAULT_VIEW_PROVIDERS = [
  "@lwrjs/nunjucks-view-provider",
  "@lwrjs/html-view-provider",
  "@lwrjs/markdown-view-provider",
  "@lwrjs/base-view-provider"
];
var DEFAULT_BUNDLE_PROVIDERS = [
  "@lwrjs/module-bundler/amd-bundle-provider",
  "@lwrjs/module-bundler/esm-bundle-provider"
];
var DEFAULT_ASSET_PROVIDERS = ["@lwrjs/fs-asset-provider"];
var DEFAULT_VIEW_TRANSFORM_PLUGINS = [
  "@lwrjs/base-view-transformer",
  "@lwrjs/lwc-ssr/viewTransformer",
  "@lwrjs/lwc-ssr/dataViewTransformer"
];
var DEFAULT_ASSET_TRANSFORM_PLUGINS = ["@lwrjs/asset-transformer"];
var DEFAULT_URI_TRANSFORM_PLUGINS = [];
var DEFAULT_AMD_LOADER = "lwr/loader";
var DEFAULT_AMD_LOADER_LEGACY = "lwr/loaderLegacy";
var DEFAULT_ESM_LOADER = "lwr/esmLoader";
var DEFAULT_SERVICE_PACKAGE_NAME = /lwr-(\w+)-service/;
var DEFAULT_LWR_MODULES = [
  {npm: "@lwc/engine-dom"},
  {npm: "@lwrjs/client-modules"},
  {npm: "@lwrjs/loader"},
  {npm: "@lwrjs/o11y"},
  {npm: "@lwrjs/router"},
  {npm: "@lwc/synthetic-shadow"}
];
var DEFAULT_ESM_BUNDLE_EXCLUSIONS = [
  "lwc",
  "@lwc/synthetic-shadow",
  "lwr/navigation",
  "lwr/esmLoader",
  "lwr/profiler",
  "@salesforce/lds-default-luvio"
];
var DEFAULT_AMD_BUNDLE_EXCLUSIONS = ["lwc", "lwr/navigation"];
var DEFAULT_ESM_BUNDLE_EXTERNALS = {};
var DEFAULT_AMD_BUNDLE_EXTERNALS = {
  "lwr/loader": "",
  "lwr/profiler": ""
};
var DEFAULT_AMD_LEGACY_BUNDLE_EXTERNALS = {
  "lwr/loaderLegacy": "",
  "lwr/profiler": ""
};
function getDefaultBundleConfig(mode) {
  const format = (0, import_runtime_config.getServerModeConfig)(mode || MODE).format;
  const loaderLegacy = (0, import_shared_utils.getFeatureFlags)().LEGACY_LOADER;
  return {
    exclude: format === "esm" ? DEFAULT_ESM_BUNDLE_EXCLUSIONS : DEFAULT_AMD_BUNDLE_EXCLUSIONS,
    external: format === "esm" ? DEFAULT_ESM_BUNDLE_EXTERNALS : loaderLegacy ? DEFAULT_AMD_LEGACY_BUNDLE_EXTERNALS : DEFAULT_AMD_BUNDLE_EXTERNALS
  };
}
var LWR_INFO_ROUTE = {
  id: "lwrInfo",
  path: "/lwr-info",
  routeHandler: `@lwrjs/core/info/route-handler`
};
var DEFAULT_LWR_CONFIG = {
  port: PORT,
  ignoreLwrConfigFile: false,
  lwrConfigFile: DEFAULT_LWR_CONFIG_JSON,
  basePath: DEFAULT_BASE_PATH,
  rootDir: DEFAULT_ROOT_DIR,
  cacheDir: DEFAULT_CACHE_FOLDER,
  serverMode: MODE,
  minify: null,
  apiVersion: DEFAULT_API_VERSION,
  assets: DEFAULT_ASSETS_DIR,
  assetProviders: DEFAULT_ASSET_PROVIDERS,
  assetTransformers: DEFAULT_ASSET_TRANSFORM_PLUGINS,
  contentDir: DEFAULT_CONTENT_DIR,
  layoutsDir: DEFAULT_LAYOUTS_DIR,
  staticSiteGenerator: DEFAULT_GENERATOR_CONFIG,
  globalDataDir: DEFAULT_DATA_DIR,
  globalData: {},
  hooks: [],
  bundleProviders: DEFAULT_BUNDLE_PROVIDERS,
  moduleProviders: DEFAULT_MODULE_PROVIDERS,
  resourceProviders: DEFAULT_RESOURCE_PROVIDERS,
  viewProviders: DEFAULT_VIEW_PROVIDERS,
  viewTransformers: DEFAULT_VIEW_TRANSFORM_PLUGINS,
  environment: {},
  lwc: {modules: []},
  caseSensitiveRoutes: false,
  routes: [
    LWR_INFO_ROUTE
  ],
  errorRoutes: [],
  routeHandlers: {},
  bundleConfig: getDefaultBundleConfig(MODE),
  serverType: DEFAULT_SERVER_TYPE,
  locker: import_shared_utils.DEFAULT_LWR_LOCKER_CONFIG,
  uriTransformers: DEFAULT_URI_TRANSFORM_PLUGINS,
  i18n: import_runtime_config.DEFAULT_I18N_CONFIG,
  coreProxy: null,
  unsafeEnableViewLinkCaching: false,
  _isSsrCompilerEnabled: false
};
var DEFAULT_LWR_BOOTSTRAP_CONFIG = {
  autoBoot: true,
  syntheticShadow: false,
  workers: {},
  services: [],
  configAsSrc: false,
  ssr: false,
  preloadData: false,
  proxyForSSR: false,
  includeCookiesForSSR: false,
  mixedMode: false,
  module: void 0,
  preloadModules: [],
  lwrVersion: import_package.lwrVersion,
  lwcVersion: import_package.lwcVersion,
  preloadResources: {
    patterns: []
  }
};
