var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/config/src/global-config.ts
__markAsModule(exports);
__export(exports, {
  applyStaticProviderConfig: () => applyStaticProviderConfig,
  getLwrConfigFromFile: () => getLwrConfigFromFile,
  loadConfig: () => loadConfig,
  resolveGlobalConfig: () => resolveGlobalConfig
});
var import_fs = __toModule(require("fs"));
var import_path = __toModule(require("path"));
var import_jsonc_parser = __toModule(require("jsonc-parser"));
var import_diagnostics = __toModule(require("@lwrjs/diagnostics"));
var import_shared_utils = __toModule(require("@lwrjs/shared-utils"));
var import_defaults = __toModule(require("./defaults.cjs"));
var import_package = __toModule(require("@lwrjs/config/package"));
var import_app_config = __toModule(require("./validation/app-config.cjs"));
var import_assets = __toModule(require("./utils/assets.cjs"));
var import_services = __toModule(require("./utils/services.cjs"));
var import_routes = __toModule(require("./utils/routes.cjs"));
var import_merge = __toModule(require("./utils/merge.cjs"));
var import_lwc = __toModule(require("./utils/lwc.cjs"));
var import_runtime_config = __toModule(require("./runtime-config.cjs"));
var import_global_data = __toModule(require("./utils/global-data.cjs"));
var import_instrumentation = __toModule(require("@lwrjs/instrumentation"));
function getLwrConfigFromFile(rootDir, lwrConfigPath = import_defaults.DEFAULT_LWR_CONFIG_JSON) {
  const resolvedLwrConfigPath = import_path.default.resolve((0, import_shared_utils.normalizeDirectory)(lwrConfigPath, rootDir));
  if (!import_fs.default.existsSync(resolvedLwrConfigPath)) {
    import_diagnostics.logger.warn({label: `config`, message: `LWR Config not found on "${resolvedLwrConfigPath}"`});
    return void 0;
  }
  const configSource = (0, import_shared_utils.readFile)(resolvedLwrConfigPath);
  (0, import_app_config.validateLwrAppConfig)(configSource, "file");
  let parsedConfig = (0, import_jsonc_parser.parse)(configSource);
  if (parsedConfig?.routes) {
    parsedConfig.routes = parsedConfig.routes.filter((route) => route.path !== "/lwr-info");
  }
  return parsedConfig;
}
function createCacheFolder(cache, rootDir) {
  const cacheDir = (0, import_shared_utils.normalizeDirectory)(cache, rootDir);
  const absPath = import_path.default.resolve(cacheDir);
  import_fs.default.mkdirSync(import_path.default.join(absPath, import_shared_utils.ASSETS_CACHE_DIR), {recursive: true});
  return absPath;
}
function mergeConfig(configArg) {
  if (configArg) {
    configArg = (0, import_merge.trimLwrConfig)(configArg);
    (0, import_app_config.validateLwrAppConfig)(configArg, "pre");
  }
  const rootDir = import_path.default.resolve(configArg?.rootDir || import_defaults.DEFAULT_ROOT_DIR);
  const configFile = !configArg?.ignoreLwrConfigFile ? getLwrConfigFromFile(rootDir, configArg?.lwrConfigFile) : void 0;
  if (configFile) {
    configFile.routes = [...import_defaults.DEFAULT_LWR_CONFIG.routes, ...configFile?.routes ?? []];
  }
  const bundleConfig = (0, import_merge.mergeBundleConfig)(configFile, configArg);
  if (bundleConfig.external) {
    for (const key of Object.keys(bundleConfig.external)) {
      const path2 = bundleConfig.external[key];
      if ((0, import_shared_utils.isLocalPath)(path2)) {
        bundleConfig.external[key] = (0, import_shared_utils.normalizeToFileUrl)(path2, rootDir);
      }
    }
  }
  return {
    ...import_defaults.DEFAULT_LWR_CONFIG,
    ...configFile,
    ...configArg,
    lwc: (0, import_merge.mergeLwcConfig)(configFile, configArg),
    bundleConfig,
    locker: (0, import_merge.mergeLockerConfig)(configFile, configArg),
    staticSiteGenerator: (0, import_merge.mergeStaticGenerationConfig)(configFile, configArg),
    rootDir
  };
}
function normalizeConfig(config) {
  const amdLoader = (0, import_shared_utils.getFeatureFlags)().LEGACY_LOADER ? import_defaults.DEFAULT_AMD_LOADER_LEGACY : import_defaults.DEFAULT_AMD_LOADER;
  return {
    ...config,
    amdLoader,
    esmLoader: import_defaults.DEFAULT_ESM_LOADER,
    lwrVersion: import_package.lwrVersion,
    assets: (0, import_assets.normalizeAssets)(config.assets),
    lwc: (0, import_lwc.normalizeLwcConfig)(config.lwc),
    hooks: (0, import_services.normalizeServices)(config.hooks),
    bundleProviders: (0, import_services.normalizeServices)(config.bundleProviders),
    moduleProviders: (0, import_services.normalizeServices)(config.moduleProviders),
    assetProviders: (0, import_services.normalizeServices)(config.assetProviders),
    assetTransformers: (0, import_services.normalizeServices)(config.assetTransformers),
    resourceProviders: (0, import_services.normalizeServices)(config.resourceProviders),
    uriTransformers: (0, import_services.normalizeServices)(config.uriTransformers),
    viewProviders: (0, import_services.normalizeServices)(config.viewProviders),
    viewTransformers: (0, import_services.normalizeServices)(config.viewTransformers),
    routes: (0, import_routes.normalizeRoutes)(config.routes, config.routeHandlers),
    errorRoutes: (0, import_routes.normalizeRoutes)(config.errorRoutes, config.routeHandlers),
    routeHandlers: (0, import_routes.normalizeRouteHandlers)(config.routeHandlers)
  };
}
function normalizeConfigPaths(config) {
  const rootDir = config.rootDir || import_defaults.DEFAULT_ROOT_DIR;
  const resourcePaths = {
    rootDir,
    assets: (0, import_assets.normalizeAssetPaths)(config.assets, rootDir),
    contentDir: (0, import_shared_utils.normalizeDirectory)(config.contentDir, rootDir),
    layoutsDir: (0, import_shared_utils.normalizeDirectory)(config.layoutsDir, rootDir)
  };
  return {
    ...config,
    ...resourcePaths,
    globalDataDir: (0, import_shared_utils.normalizeDirectory)(config.globalDataDir, rootDir),
    cacheDir: (0, import_shared_utils.normalizeDirectory)(config.cacheDir, rootDir),
    lwc: {
      modules: (0, import_lwc.normalizeModulePaths)(config.lwc.modules, rootDir),
      interchangeable: config.lwc.interchangeable,
      interchangeableModulesMap: config.lwc.interchangeableModulesMap
    },
    hooks: (0, import_services.normalizeServicePaths)(config.hooks, rootDir),
    moduleProviders: (0, import_services.normalizeServicePaths)(config.moduleProviders, rootDir),
    assetProviders: (0, import_services.normalizeServicePaths)(config.assetProviders, rootDir),
    assetTransformers: (0, import_services.normalizeServicePaths)(config.assetTransformers, rootDir),
    resourceProviders: (0, import_services.normalizeServicePaths)(config.resourceProviders, rootDir),
    uriTransformers: (0, import_services.normalizeServicePaths)(config.uriTransformers, rootDir),
    viewProviders: (0, import_services.normalizeServicePaths)(config.viewProviders, rootDir),
    viewTransformers: (0, import_services.normalizeServicePaths)(config.viewTransformers, rootDir),
    routes: (0, import_routes.normalizeRoutePaths)(config.routes, resourcePaths),
    errorRoutes: (0, import_routes.normalizeRoutePaths)(config.errorRoutes, resourcePaths),
    routeHandlers: (0, import_routes.normalizeRouteHandlerPaths)(config.routeHandlers, resourcePaths)
  };
}
function applyStaticProviderConfig(config) {
  return {
    ...config,
    assetProviders: [["@lwrjs/static/asset-provider", void 0]],
    assetTransformers: [],
    resourceProviders: [["@lwrjs/static/resource-provider", {}]],
    moduleProviders: [
      ["@lwrjs/static/module-provider", void 0],
      ["@lwrjs/module-registry/externals-module-provider", void 0]
    ],
    bundleProviders: [
      ["@lwrjs/static/bundle-provider", void 0],
      ["@lwrjs/module-bundler/amd-runtime-bundle-provider", void 0]
    ],
    uriTransformers: [["@lwrjs/static/mrt-static-uri-transformer", void 0]]
  };
}
function resolveGlobalConfig(configArg, options) {
  const span = (0, import_instrumentation.getTracer)().startSpan({name: import_instrumentation.ConfigSpan.ResolveConfig});
  const mergedConfig = mergeConfig(configArg);
  let normalizedConfig = normalizeConfig(mergedConfig);
  if (normalizedConfig._isSsrCompilerEnabled)
    process.env.SSR_COMPILER_ENABLED = "true";
  if (options?.useStaticProviders) {
    normalizedConfig = applyStaticProviderConfig(normalizedConfig);
  }
  if (!options?.skipCacheDirCreation) {
    createCacheFolder(normalizedConfig.cacheDir, normalizedConfig.rootDir);
  }
  if (options?.skipDirNormalization) {
    span.end();
    return normalizedConfig;
  }
  const retVal = normalizeConfigPaths(normalizedConfig);
  span.end();
  return retVal;
}
function loadConfig(config, options) {
  const span = (0, import_instrumentation.getTracer)().startSpan({name: import_instrumentation.ConfigSpan.LoadConfig});
  const appConfig = resolveGlobalConfig(config, options);
  const runtimeEnvironment = (0, import_runtime_config.getRuntimeEnvironment)(appConfig);
  const globalData = (0, import_global_data.getGlobalData)(appConfig.globalDataDir, appConfig.globalData);
  if (!appConfig.hooks.length) {
    (0, import_app_config.validateLwrAppConfig)(appConfig, "post");
  }
  const retVal = {
    appConfig,
    runtimeEnvironment,
    globalData
  };
  span.end();
  return retVal;
}
