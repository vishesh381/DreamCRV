var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/config/src/utils/merge.ts
__markAsModule(exports);
__export(exports, {
  mergeBundleConfig: () => mergeBundleConfig,
  mergeLockerConfig: () => mergeLockerConfig,
  mergeLwcConfig: () => mergeLwcConfig,
  mergeStaticGenerationConfig: () => mergeStaticGenerationConfig,
  trimLwrConfig: () => trimLwrConfig
});
var import_shared_utils = __toModule(require("@lwrjs/shared-utils"));
var import_defaults = __toModule(require("../defaults.cjs"));
function isNormalizedLwrGlobalConfig(config) {
  return config?.lwrVersion !== void 0;
}
function trimLwrConfig(config) {
  Object.keys(config).forEach((k) => {
    if (config[k] === void 0)
      delete config[k];
  });
  return config;
}
function mergeLwcConfig(config1, config2) {
  const defaultModules = !isNormalizedLwrGlobalConfig(config1) && !isNormalizedLwrGlobalConfig(config2) ? import_defaults.DEFAULT_LWR_MODULES : [];
  const modules1 = config1?.lwc?.modules || [];
  const modules2 = config2?.lwc?.modules || [];
  const interchangeable1 = config1?.lwc?.interchangeable || [];
  const interchangeable2 = config2?.lwc?.interchangeable || [];
  const mergedInterchangeable = [...interchangeable1, ...interchangeable2];
  const interchangeableModules1 = config1?.lwc?.interchangeableModules || [];
  const interchangeableModules2 = config2?.lwc?.interchangeableModules || [];
  const mergedInterchangeableModules = [...interchangeableModules1, ...interchangeableModules2];
  return {
    modules: [...defaultModules, ...modules1, ...modules2],
    interchangeable: mergedInterchangeable.length ? mergedInterchangeable : void 0,
    interchangeableModules: mergedInterchangeableModules.length ? mergedInterchangeableModules : void 0
  };
}
function mergeBundleConfig(config1, config2) {
  const mode = config2?.serverMode || config1?.serverMode;
  const DEFAULT_BUNDLE_CONFIG = (0, import_defaults.getDefaultBundleConfig)(mode);
  const defaultExclusions = config2?.bundleConfig?.UNSAFE_lwrDefaultExclude || config1?.bundleConfig?.UNSAFE_lwrDefaultExclude || DEFAULT_BUNDLE_CONFIG.exclude || [];
  const configExclusions = config2?.bundleConfig?.exclude || config1?.bundleConfig?.exclude || [];
  const configExternals = config2?.bundleConfig?.external || config1?.bundleConfig?.external || {};
  return {
    ...config1?.bundleConfig,
    ...config2?.bundleConfig,
    exclude: [...new Set([...defaultExclusions, ...configExclusions])],
    external: {...DEFAULT_BUNDLE_CONFIG.external, ...configExternals}
  };
}
function mergeLockerConfig(jsonConfig, config) {
  const defaultNamespaces = import_shared_utils.DEFAULT_LOCKER_TRUSTED_CMP;
  const configNamespaces = config?.locker?.trustedComponents || jsonConfig?.locker?.trustedComponents || [];
  return {
    ...import_shared_utils.DEFAULT_LWR_LOCKER_CONFIG,
    ...jsonConfig?.locker,
    ...config?.locker,
    trustedComponents: [...new Set([...defaultNamespaces, ...configNamespaces])]
  };
}
function mergeStaticGenerationConfig(configFile, configArg) {
  const fileAdditionalModules = configFile?.staticSiteGenerator?._additionalModules || [];
  const argAdditionalModules = configArg?.staticSiteGenerator?._additionalModules || [];
  const fileAdditionalPaths = configFile?.staticSiteGenerator?._additionalRoutePaths || [];
  const argAdditionalPaths = configArg?.staticSiteGenerator?._additionalRoutePaths || [];
  return {
    ...import_defaults.DEFAULT_GENERATOR_CONFIG,
    ...configFile?.staticSiteGenerator,
    ...configArg?.staticSiteGenerator,
    _additionalModules: [...new Set([...fileAdditionalModules, ...argAdditionalModules])],
    _additionalRoutePaths: [...new Set([...fileAdditionalPaths, ...argAdditionalPaths])]
  };
}
