var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/config/src/runtime-config.ts
__markAsModule(exports);
__export(exports, {
  DEFAULT_I18N_CONFIG: () => DEFAULT_I18N_CONFIG,
  RUNTIME_CONFIGS: () => RUNTIME_CONFIGS,
  getRuntimeEnvironment: () => getRuntimeEnvironment,
  getServerModeConfig: () => getServerModeConfig
});
var import_diagnostics = __toModule(require("@lwrjs/diagnostics"));
var import_shared_utils = __toModule(require("@lwrjs/shared-utils"));
var DEFAULT_I18N_CONFIG = {
  defaultLocale: "en-US",
  locales: [
    {
      id: "en-US"
    }
  ],
  defaultRedirectParams: {}
};
var RUNTIME_CONFIGS = {
  dev: {
    bundle: false,
    minify: false,
    format: "esm",
    compat: "0",
    debug: false,
    watchFiles: true,
    i18n: DEFAULT_I18N_CONFIG,
    hmrEnabled: true,
    immutableAssets: false,
    env: {
      NODE_ENV: "development"
    }
  },
  prod: {
    bundle: true,
    minify: true,
    format: "esm",
    compat: "0",
    debug: false,
    watchFiles: false,
    i18n: DEFAULT_I18N_CONFIG,
    hmrEnabled: false,
    immutableAssets: true,
    env: {
      NODE_ENV: "production"
    }
  },
  compat: {
    bundle: false,
    minify: false,
    format: "amd",
    compat: "1",
    debug: false,
    watchFiles: true,
    i18n: DEFAULT_I18N_CONFIG,
    hmrEnabled: false,
    immutableAssets: false,
    env: {
      NODE_ENV: "development"
    }
  },
  "prod-compat": {
    bundle: true,
    minify: true,
    format: "amd",
    compat: "1",
    debug: false,
    watchFiles: false,
    i18n: DEFAULT_I18N_CONFIG,
    hmrEnabled: false,
    immutableAssets: true,
    env: {
      NODE_ENV: "production"
    }
  }
};
function getServerModeConfig(serverMode) {
  const selectedMode = RUNTIME_CONFIGS[serverMode];
  if (!selectedMode) {
    throw (0, import_diagnostics.createSingleDiagnosticError)({description: import_diagnostics.descriptions.UNRESOLVABLE.INVALID_MODE(serverMode)}, import_diagnostics.LwrServerError);
  }
  return selectedMode;
}
function getRuntimeEnvironment(config) {
  const {serverMode, lwrVersion, apiVersion, basePath, i18n, minify} = config;
  const serverModeConfig = getServerModeConfig(config.serverMode);
  return {
    ...serverModeConfig,
    minify: minify !== null ? minify : serverModeConfig.minify,
    featureFlags: (0, import_shared_utils.getFeatureFlags)(),
    serverMode,
    lwrVersion,
    apiVersion,
    basePath,
    i18n,
    defaultAssetPath: ""
  };
}
