import type { GlobalData, LwrGlobalConfig, NormalizedLwrGlobalConfig, RuntimeEnvironment } from '@lwrjs/types';
export interface ResolveConfigOptions {
    skipDirNormalization?: boolean;
    skipCacheDirCreation?: boolean;
    useStaticProviders?: boolean;
}
export interface Configurations {
    appConfig: NormalizedLwrGlobalConfig;
    runtimeEnvironment: RuntimeEnvironment;
    globalData: GlobalData;
}
/**
 * Load and validate the global config file.
 *
 * @remarks
 * By default, this file is expected to be named `lwr.config.json` and be located at the root directory.
 * This default expectation can be override with the `lwrConfigFile` configuration.
 *
 * @throws {LwrConfigValidationError} Validation errors will be swallowed when the
 * `UNSAFE_IGNORE_CONFIG_VALIDATION` flag is set.
 *
 * @param {string} lwrConfigPath - config file path override
 * @param {string} rootDir - the directory used to resolve `$rootDir`
 * @returns {LwrGlobalConfig | undefined} the validated config file contents if it exists
 */
export declare function getLwrConfigFromFile(rootDir: string, lwrConfigPath?: string): LwrGlobalConfig | undefined;
/**
 * Apply Static Providers for MRT runtime (used exclusively by buildServer)
 *
 * @param {NormalizedLwrGlobalConfig} config - a normalized global config to check / mutate
 * @returns {NormalizedLwrGlobalConfig} an SSR-enabled normalized global config, if needed
 */
export declare function applyStaticProviderConfig(config: NormalizedLwrGlobalConfig): NormalizedLwrGlobalConfig;
/**
 * Load, merge, and normalize all of the config sources.
 *
 * @remarks
 * Config hooks are not loaded or applied during config resolution.
 *
 * @privateRemarks
 * The `skipDirNormalization` and `skipCacheDirCreation` options are useful for generating
 * a portable global config.  The directories can be normalized and the cache directory can
 * be created at runtime.
 *
 * @param {LwrGlobalConfig} configArg - programmatic global config
 * @param {ResolveConfigOptions} options - config resolution mutations
 * @returns {NormalizedLwrGlobalConfig} a normalized global config relative to the provided options
 */
export declare function resolveGlobalConfig(configArg?: LwrGlobalConfig, options?: ResolveConfigOptions): NormalizedLwrGlobalConfig;
/**
 * Resolve all application configurations by loading and merging global data, applying config hooks, and
 * importing configurable paths to javascript(ie. services and route handlers).
 *
 * @param {LwrGlobalConfig} config - programmatic global config
 * @returns {Configurations} all of the fully resolved configurations
 */
export declare function loadConfig(config?: LwrGlobalConfig, options?: ResolveConfigOptions): Configurations;
//# sourceMappingURL=global-config.d.ts.map