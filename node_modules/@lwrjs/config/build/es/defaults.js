import { DEFAULT_LWR_LOCKER_CONFIG, getFeatureFlags } from '@lwrjs/shared-utils';
import { DEFAULT_I18N_CONFIG, getServerModeConfig } from './runtime-config.js';
import { lwrVersion as LWR_VERSION, lwcVersion as LWC_VERSION } from '@lwrjs/config/package';
/**
 * MIN_LWR_VERSION
 * Minimum LWR version required for the routes to function properly.
 * Anytime we believe we are checking in a breaking change, the required version should be updated
 * manually for all routes to continue functioning properly.
 */
export const MIN_LWR_VERSION = '0.12.0';
/**
 * MIN_LWC_VERSION
 * Minimum LWC version required for the routes to function properly.
 * Anytime we believe we are checking in a breaking change, the required version should be updated
 * manually for all routes to continue functioning properly.
 */
export const MIN_LWC_VERSION = '6.1.0';
const PORT = process.env.PORT ? parseInt(process.env.PORT, 10) : 3000;
const MODE = process.env.MODE || 'prod';
const DEFAULT_BASE_PATH = '';
const DEFAULT_API_VERSION = '1';
const DEFAULT_SERVER_TYPE = 'express';
export const DEFAULT_LWR_CONFIG_JSON = '$rootDir/lwr.config.json';
export const DEFAULT_GENERATOR_CONFIG = {
    outputDir: 'site',
    skipCleanOutputDir: false,
    skipBaseDocumentGeneration: false,
    _additionalModules: [],
    _additionalRoutePaths: [],
};
// Directories
export const DEFAULT_ROOT_DIR = process.cwd();
const DEFAULT_CACHE_FOLDER = '$rootDir/__lwr_cache__';
const DEFAULT_ASSETS_DIR = '$rootDir/src/assets';
const DEFAULT_CONTENT_DIR = '$rootDir/src/content';
const DEFAULT_LAYOUTS_DIR = '$rootDir/src/layouts';
const DEFAULT_DATA_DIR = '$rootDir/src/data';
// Providers
const DEFAULT_MODULE_PROVIDERS = [
    '@lwrjs/app-service/moduleProvider',
    '@lwrjs/router/module-provider',
    '@lwrjs/lwc-module-provider',
    '@lwrjs/npm-module-provider',
    '@lwrjs/module-registry/externals-module-provider',
];
const DEFAULT_RESOURCE_PROVIDERS = ['@lwrjs/loader'];
const DEFAULT_VIEW_PROVIDERS = [
    '@lwrjs/nunjucks-view-provider',
    '@lwrjs/html-view-provider',
    '@lwrjs/markdown-view-provider',
    '@lwrjs/base-view-provider',
];
const DEFAULT_BUNDLE_PROVIDERS = [
    '@lwrjs/module-bundler/amd-bundle-provider',
    '@lwrjs/module-bundler/esm-bundle-provider',
];
const DEFAULT_ASSET_PROVIDERS = ['@lwrjs/fs-asset-provider'];
const DEFAULT_VIEW_TRANSFORM_PLUGINS = [
    '@lwrjs/base-view-transformer',
    '@lwrjs/lwc-ssr/viewTransformer',
    '@lwrjs/lwc-ssr/dataViewTransformer',
];
const DEFAULT_ASSET_TRANSFORM_PLUGINS = ['@lwrjs/asset-transformer'];
const DEFAULT_URI_TRANSFORM_PLUGINS = [];
export const DEFAULT_AMD_LOADER = 'lwr/loader';
export const DEFAULT_AMD_LOADER_LEGACY = 'lwr/loaderLegacy';
export const DEFAULT_ESM_LOADER = 'lwr/esmLoader';
export const DEFAULT_SERVICE_PACKAGE_NAME = /lwr-(\w+)-service/;
export const DEFAULT_LWR_MODULES = [
    { npm: '@lwc/engine-dom' },
    { npm: '@lwrjs/client-modules' },
    { npm: '@lwrjs/loader' },
    { npm: '@lwrjs/o11y' },
    { npm: '@lwrjs/router' },
    { npm: '@lwc/synthetic-shadow' },
];
export const DEFAULT_ESM_BUNDLE_EXCLUSIONS = [
    'lwc',
    '@lwc/synthetic-shadow',
    'lwr/navigation',
    'lwr/esmLoader',
    'lwr/profiler',
    '@salesforce/lds-default-luvio',
];
export const DEFAULT_AMD_BUNDLE_EXCLUSIONS = ['lwc', 'lwr/navigation'];
const DEFAULT_ESM_BUNDLE_EXTERNALS = {};
const DEFAULT_AMD_BUNDLE_EXTERNALS = {
    'lwr/loader': '',
    'lwr/profiler': '',
};
const DEFAULT_AMD_LEGACY_BUNDLE_EXTERNALS = {
    'lwr/loaderLegacy': '',
    'lwr/profiler': '',
};
export function getDefaultBundleConfig(mode) {
    const format = getServerModeConfig(mode || MODE).format;
    const loaderLegacy = getFeatureFlags().LEGACY_LOADER;
    return {
        exclude: format === 'esm' ? DEFAULT_ESM_BUNDLE_EXCLUSIONS : DEFAULT_AMD_BUNDLE_EXCLUSIONS,
        external: format === 'esm'
            ? DEFAULT_ESM_BUNDLE_EXTERNALS
            : loaderLegacy
                ? DEFAULT_AMD_LEGACY_BUNDLE_EXTERNALS
                : DEFAULT_AMD_BUNDLE_EXTERNALS,
    };
}
export const LWR_INFO_ROUTE = {
    id: 'lwrInfo',
    path: '/lwr-info',
    routeHandler: `@lwrjs/core/info/route-handler`
};
export const DEFAULT_LWR_CONFIG = {
    port: PORT,
    ignoreLwrConfigFile: false,
    lwrConfigFile: DEFAULT_LWR_CONFIG_JSON,
    basePath: DEFAULT_BASE_PATH,
    rootDir: DEFAULT_ROOT_DIR,
    cacheDir: DEFAULT_CACHE_FOLDER,
    serverMode: MODE,
    minify: null,
    apiVersion: DEFAULT_API_VERSION,
    assets: DEFAULT_ASSETS_DIR,
    assetProviders: DEFAULT_ASSET_PROVIDERS,
    assetTransformers: DEFAULT_ASSET_TRANSFORM_PLUGINS,
    contentDir: DEFAULT_CONTENT_DIR,
    layoutsDir: DEFAULT_LAYOUTS_DIR,
    staticSiteGenerator: DEFAULT_GENERATOR_CONFIG,
    globalDataDir: DEFAULT_DATA_DIR,
    globalData: {},
    hooks: [],
    bundleProviders: DEFAULT_BUNDLE_PROVIDERS,
    moduleProviders: DEFAULT_MODULE_PROVIDERS,
    resourceProviders: DEFAULT_RESOURCE_PROVIDERS,
    viewProviders: DEFAULT_VIEW_PROVIDERS,
    viewTransformers: DEFAULT_VIEW_TRANSFORM_PLUGINS,
    environment: {},
    lwc: { modules: [] },
    caseSensitiveRoutes: false,
    routes: [
        LWR_INFO_ROUTE,
    ],
    errorRoutes: [],
    routeHandlers: {},
    bundleConfig: getDefaultBundleConfig(MODE),
    serverType: DEFAULT_SERVER_TYPE,
    locker: DEFAULT_LWR_LOCKER_CONFIG,
    uriTransformers: DEFAULT_URI_TRANSFORM_PLUGINS,
    i18n: DEFAULT_I18N_CONFIG,
    coreProxy: null,
    unsafeEnableViewLinkCaching: false,
    _isSsrCompilerEnabled: false,
};
export const DEFAULT_LWR_BOOTSTRAP_CONFIG = {
    autoBoot: true,
    syntheticShadow: false,
    workers: {},
    services: [],
    configAsSrc: false,
    ssr: false,
    preloadData: false,
    proxyForSSR: false,
    includeCookiesForSSR: false,
    mixedMode: false,
    module: undefined,
    preloadModules: [],
    lwrVersion: LWR_VERSION,
    lwcVersion: LWC_VERSION,
    preloadResources: {
        patterns: []
    },
};
//# sourceMappingURL=defaults.js.map