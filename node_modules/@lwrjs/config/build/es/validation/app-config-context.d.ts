import type { AssetDirConfig, AssetFileConfig, DirectToCoreProxy, LwrErrorRoute, LwrRoute, NormalizedLwrGlobalConfig, NormalizedLwrAppBootstrapConfig, LwrLockerConfig, RouteHandlersConfig, BundleConfig, I18NConfig, Locale, StaticSiteGenerator } from '@lwrjs/types';
import { Node } from 'jsonc-parser';
import { Diagnostic } from '@lwrjs/diagnostics';
type RequiredAssetDirConfig = Required<AssetDirConfig>;
type RequiredAssetFileConfig = Required<AssetFileConfig>;
type RequiredLwrRoute = Required<LwrRoute>;
type RequiredLwrErrorRoute = Required<LwrErrorRoute>;
type RequiredLwrLockerConfig = Required<LwrLockerConfig>;
type RequiredI18NConfig = Required<I18NConfig>;
type RequiredLocalesConfig = Required<Locale>;
type RequiredSSGConfig = Required<StaticSiteGenerator>;
type RequiredDirectToCoreProxy = Required<DirectToCoreProxy>;
interface ConfigMap {
    root: NormalizedLwrGlobalConfig;
    assetDir: RequiredAssetDirConfig;
    assetFile: RequiredAssetFileConfig;
    routes: RequiredLwrRoute;
    errorRoutes: RequiredLwrErrorRoute;
    routeHandlers: RouteHandlersConfig;
    bootstrap: NormalizedLwrAppBootstrapConfig;
    locker: RequiredLwrLockerConfig;
    bundleConfig: BundleConfig;
    'bundleConfig.external': BundleConfig;
    'bundleConfig.groups': BundleConfig;
    i18n: RequiredI18NConfig;
    'i18n.locales': RequiredLocalesConfig;
    staticSiteGenerator: RequiredSSGConfig;
    coreProxy: RequiredDirectToCoreProxy;
}
export declare const ROOT_ATTRIBUTE_KEYS: ["amdLoader", "apiVersion", "assets", "assetProviders", "assetTransformers", "bundleConfig", "bundleProviders", "cacheDir", "caseSensitiveRoutes", "contentDir", "coreProxy", "environment", "errorRoutes", "esmLoader", "staticSiteGenerator", "globalData", "globalDataDir", "hooks", "i18n", "ignoreLwrConfigFile", "_isSsrCompilerEnabled", "lwrConfigFile", "layoutsDir", "locker", "lwc", "lwrVersion", "moduleProviders", "port", "basePath", "resourceProviders", "rootDir", "routeHandlers", "routes", "serverMode", "minify", "serverType", "uriTransformers", "viewProviders", "viewTransformers", "unsafeEnableViewLinkCaching"];
export declare const ASSET_DIR_ATTRIBUTE_KEYS: ["alias", "dir", "urlPath", "root"];
export declare const ASSET_FILE_ATTRIBUTE_KEYS: ["alias", "file", "urlPath"];
export declare const LOCKER_ATTRIBUTE_KEYS: ["enabled", "trustedComponents"];
export declare const I18N_ATTRIBUTE_KEYS: ["defaultLocale", "locales", "uriPattern", "defaultRedirectParams"];
export declare const CORE_PROXY_ATTRIBUTE_KEYS: ["origin", "host", "servername"];
export declare const STATIC_SITE_GENERATOR_ATTRIBUTE_KEYS: ["outputDir", "skipBaseDocumentGeneration", "skipCleanOutputDir", "_additionalModules", "_additionalRoutePaths"];
export declare const ROUTE_ATTRIBUTE_KEYS: ["bootstrap", "subRoutes", "contentTemplate", "id", "cache", "layoutTemplate", "method", "path", "rootComponent", "routeHandler", "properties"];
export declare const ERROR_ROUTE_ATTRIBUTE_KEYS: ["bootstrap", "subRoutes", "contentTemplate", "id", "layoutTemplate", "rootComponent", "routeHandler", "status", "properties", "cache"];
export declare const BOOTSTRAP_ATTRIBUTE_KEYS: ["autoBoot", "syntheticShadow", "workers", "services", "configAsSrc", "ssr", "preloadData", "proxyForSSR", "includeCookiesForSSR", "mixedMode", "module", "preloadModules", "lwrVersion", "lwcVersion", "preloadResources"];
export declare const BASE_PATH_REGEX: RegExp;
export declare class ValidationContext {
    diagnostics: Diagnostic[];
    sourceText: string;
    constructor(sourceText: string);
    private getLocationFromNode;
    assertIsObject(node: Node | undefined, property: string): void;
    assertIsBoolean(node: Node | undefined, property: string): void;
    assertIsArray(node: Node | undefined, property: string): void;
    assertIsSpecifier(node: Node | undefined, property: string): void;
    assertIsFilePattern(node: Node | undefined, property: string): void;
    assertIsPath(node: Node | undefined, property: string): void;
    assertIsOrigin(node: Node | undefined, property: string): void;
    assertIsPort(node: Node | undefined, property: string): void;
    assertIsServerType(node: Node | undefined, property: string): void;
    assertIsStaticSiteGenerator(node: Node | undefined, property: string): void;
    assertIsMethod(node: Node | undefined, property: string): void;
    assertIsStatus(node: Node | undefined, property: string): void;
    assertIsEnvironment(node: Node | undefined, property: string): void;
    assertIsBasePath(node: Node | undefined, property: string, allowSlash?: boolean): void;
    assertNotEmptyString(node: Node | undefined, property: string): void;
    assertNotEmptyArray(node: Node | undefined, property: string): void;
    assertHasOneOrMore(node: Node, property: string, childProps: string[]): void;
    assertHasOnlyOne(node: Node, property: string, childProps: string[]): void;
    assertArrayOfStrings(node: Node | undefined, property: string): void;
    assertArrayOfSpecifiers(node: Node | undefined, property: string): void;
    assertArrayOfServices(node: Node | undefined, property: string): void;
    assertArrayOfBootstrapServices(node: Node | undefined, property: string): void;
    assertIsStringOrObject(node: Node | undefined, property: string, index?: number): void;
    assertIsService(node: Node | undefined, property: string, index?: number): void;
    assertUniqueIds(nodes: Node[], property: string): void;
    assertRequiredKeys(node: Node, property: string, requiredPropertyKeys: string[]): void;
    assertValidKeys<T extends keyof ConfigMap>(node: Node, property: T, validPropertyKeys: (keyof ConfigMap[T])[]): void;
    assertNoBundleConfigDupes(node: Node, dupes: string[]): void;
    assertDefaultInLocales(node: Node, defaultLocale: string, localesIds: string[]): void;
    assertFallbackIds(nodes: Node[]): void;
    assertSsrPreloadData(node: Node, propPrefix: string): void;
    assertIsCoreProxy(node: Node | undefined, validationContext: ValidationContext): void;
}
export {};
//# sourceMappingURL=app-config-context.d.ts.map