import { createSingleDiagnosticError, descriptions, LwrServerError } from '@lwrjs/diagnostics';
import { getFeatureFlags } from '@lwrjs/shared-utils';
export const DEFAULT_I18N_CONFIG = {
    defaultLocale: 'en-US',
    locales: [
        {
            id: 'en-US',
        },
    ],
    defaultRedirectParams: {}
};
export const RUNTIME_CONFIGS = {
    dev: {
        bundle: false,
        minify: false,
        format: 'esm',
        compat: '0',
        debug: false,
        watchFiles: true,
        i18n: DEFAULT_I18N_CONFIG,
        hmrEnabled: true,
        immutableAssets: false,
        env: {
            NODE_ENV: 'development',
        },
    },
    prod: {
        bundle: true,
        minify: true,
        format: 'esm',
        compat: '0',
        debug: false,
        watchFiles: false,
        i18n: DEFAULT_I18N_CONFIG,
        hmrEnabled: false,
        immutableAssets: true,
        env: {
            NODE_ENV: 'production',
        },
    },
    compat: {
        bundle: false,
        minify: false,
        format: 'amd',
        compat: '1',
        debug: false,
        watchFiles: true,
        i18n: DEFAULT_I18N_CONFIG,
        hmrEnabled: false,
        immutableAssets: false,
        env: {
            NODE_ENV: 'development',
        },
    },
    'prod-compat': {
        bundle: true,
        minify: true,
        format: 'amd',
        compat: '1',
        debug: false,
        watchFiles: false,
        i18n: DEFAULT_I18N_CONFIG,
        hmrEnabled: false,
        immutableAssets: true,
        env: {
            NODE_ENV: 'production',
        },
    },
};
/**
 * Get server mode config by name
 *
 * @throws {LwrServerError} Mode must be supported by LWR.
 *
 * @param {string} serverMode - the name of the server mode
 * @returns {ServerModeConfig} the server mode config
 */
export function getServerModeConfig(serverMode) {
    const selectedMode = RUNTIME_CONFIGS[serverMode];
    if (!selectedMode) {
        throw createSingleDiagnosticError({ description: descriptions.UNRESOLVABLE.INVALID_MODE(serverMode) }, LwrServerError);
    }
    return selectedMode;
}
/**
 * Get runtime environment
 *
 * @param {NormalizedLwrGlobalConfig} config - the normalized global config object
 * @returns {RuntimeEnvironment} the complete runtime environment
 */
export function getRuntimeEnvironment(config) {
    const { serverMode, lwrVersion, apiVersion, basePath, i18n, minify } = config;
    const serverModeConfig = getServerModeConfig(config.serverMode);
    return {
        ...serverModeConfig,
        minify: minify !== null ? minify : serverModeConfig.minify,
        featureFlags: getFeatureFlags(),
        serverMode,
        lwrVersion,
        apiVersion,
        basePath,
        i18n,
        // By default static assets are supposed to be relative to the app server
        // This will be updated by the lambda when running on MRT.
        defaultAssetPath: '',
    };
}
//# sourceMappingURL=runtime-config.js.map