import type { GlobalData, HooksPlugin, Instrumentation, NormalizedLwrGlobalConfig, RuntimeEnvironment, ServerContext } from '@lwrjs/types';
export declare function executeConfigHooks(hooks: HooksPlugin[], globalConfig: NormalizedLwrGlobalConfig, runtimeEnvironment: RuntimeEnvironment, globalData: GlobalData, skipValidate?: boolean): Promise<void>;
/**
 * Run `onStart` hooks
 *
 * @remarks
 * Route normalization and validation will be executed after all config hooks have been executed.
 *
 * @privateRemarks
 * Changes to configurations are made by reference.
 *
 * These hooks can modify the following global config properties:
 *     routes, errorRoutes, assets, i18n, basePath, coreProxy, _isSsrCompilerEnabled
 *
 * @param hooks - hooks plugins
 * @param globalConfig - global configuration
 */
export declare function executeStartHooks(hooks: HooksPlugin[], globalConfig: NormalizedLwrGlobalConfig, runtimeEnvironment: RuntimeEnvironment, skipValidate?: boolean): void;
export declare function executeInstrumentationHooks(hooks: HooksPlugin[]): Instrumentation | undefined;
export declare function executeContextHooks(hooks: HooksPlugin[], serverContext: ServerContext): Promise<void>;
//# sourceMappingURL=hooks.d.ts.map