import { DEFAULT_LOCKER_TRUSTED_CMP, DEFAULT_LWR_LOCKER_CONFIG } from '@lwrjs/shared-utils';
import { getDefaultBundleConfig, DEFAULT_GENERATOR_CONFIG, DEFAULT_LWR_MODULES } from '../defaults.js';
function isNormalizedLwrGlobalConfig(config) {
    return config?.lwrVersion !== undefined;
}
export function trimLwrConfig(config) {
    Object.keys(config).forEach((k) => {
        if (config[k] === undefined)
            delete config[k];
    });
    return config;
}
// deep merge LWC configs
export function mergeLwcConfig(config1, config2) {
    // normalized config already contains the defaults
    const defaultModules = !isNormalizedLwrGlobalConfig(config1) && !isNormalizedLwrGlobalConfig(config2)
        ? DEFAULT_LWR_MODULES
        : [];
    const modules1 = config1?.lwc?.modules || [];
    const modules2 = config2?.lwc?.modules || [];
    const interchangeable1 = config1?.lwc?.interchangeable || [];
    const interchangeable2 = config2?.lwc?.interchangeable || [];
    const mergedInterchangeable = [...interchangeable1, ...interchangeable2];
    const interchangeableModules1 = config1?.lwc?.interchangeableModules || [];
    const interchangeableModules2 = config2?.lwc?.interchangeableModules || [];
    const mergedInterchangeableModules = [...interchangeableModules1, ...interchangeableModules2];
    return {
        modules: [...defaultModules, ...modules1, ...modules2],
        interchangeable: mergedInterchangeable.length ? mergedInterchangeable : undefined,
        interchangeableModules: mergedInterchangeableModules.length
            ? mergedInterchangeableModules
            : undefined,
    };
}
// merge default bundle exclusions with any bundle exclusions specified in config
export function mergeBundleConfig(config1, config2) {
    const mode = config2?.serverMode || config1?.serverMode;
    const DEFAULT_BUNDLE_CONFIG = getDefaultBundleConfig(mode);
    const defaultExclusions = config2?.bundleConfig?.UNSAFE_lwrDefaultExclude ||
        config1?.bundleConfig?.UNSAFE_lwrDefaultExclude ||
        DEFAULT_BUNDLE_CONFIG.exclude ||
        [];
    const configExclusions = config2?.bundleConfig?.exclude || config1?.bundleConfig?.exclude || [];
    const configExternals = config2?.bundleConfig?.external || config1?.bundleConfig?.external || {};
    return {
        ...config1?.bundleConfig,
        ...config2?.bundleConfig,
        exclude: [...new Set([...defaultExclusions, ...configExclusions])],
        // Merge default externals with configured externals
        external: { ...DEFAULT_BUNDLE_CONFIG.external, ...configExternals },
    };
}
// merge default locker trusted namespaces/cmps with any trusted namespaces/cmps specified in config
export function mergeLockerConfig(jsonConfig, config) {
    const defaultNamespaces = DEFAULT_LOCKER_TRUSTED_CMP;
    const configNamespaces = config?.locker?.trustedComponents || jsonConfig?.locker?.trustedComponents || [];
    return {
        ...DEFAULT_LWR_LOCKER_CONFIG,
        ...jsonConfig?.locker,
        ...config?.locker,
        trustedComponents: [...new Set([...defaultNamespaces, ...configNamespaces])],
    };
}
export function mergeStaticGenerationConfig(configFile, configArg) {
    const fileAdditionalModules = configFile?.staticSiteGenerator?._additionalModules || [];
    const argAdditionalModules = configArg?.staticSiteGenerator?._additionalModules || [];
    const fileAdditionalPaths = configFile?.staticSiteGenerator?._additionalRoutePaths || [];
    const argAdditionalPaths = configArg?.staticSiteGenerator?._additionalRoutePaths || [];
    return {
        ...DEFAULT_GENERATOR_CONFIG,
        ...configFile?.staticSiteGenerator,
        ...configArg?.staticSiteGenerator,
        _additionalModules: [...new Set([...fileAdditionalModules, ...argAdditionalModules])],
        _additionalRoutePaths: [...new Set([...fileAdditionalPaths, ...argAdditionalPaths])],
    };
}
//# sourceMappingURL=merge.js.map