import path from 'path';
import { normalizeDirectory } from '@lwrjs/shared-utils';
import { DEFAULT_SERVICE_PACKAGE_NAME } from '../defaults.js';
export function normalizeServices(services = []) {
    return services.map((service) => (Array.isArray(service) ? service : [service, undefined]));
}
export function normalizeServicePaths(services, rootDir) {
    return services.map((service) => {
        const [rawServiceName, serviceConfig = undefined] = service;
        let serviceName = normalizeDirectory(rawServiceName, rootDir);
        // We consider it an npm module if it starts with @ or if is of the form lwr-[servicename]-service
        // Otherwise resolve it as a relative path
        if (!rawServiceName.startsWith('@') && !DEFAULT_SERVICE_PACKAGE_NAME.test(rawServiceName)) {
            serviceName = path.resolve(serviceName);
        }
        return [serviceName, serviceConfig];
    });
}
//# sourceMappingURL=services.js.map