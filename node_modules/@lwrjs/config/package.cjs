const fs = require('fs');
const path = require('path');
const resolve = require('resolve');
const rootPath = path.join(__dirname, './');

// Get the LWR Version
let lwrVersion;
if (globalThis.LWR_VERSION) {
    lwrVersion = globalThis.LWR_VERSION;
} else {
    lwrVersion = JSON.parse(fs.readFileSync(path.join(rootPath, 'package.json'), 'utf-8')).version;
}

// Get the LWC Version
let lwcVersion;
if (globalThis.LWC_VERSION) {
    lwcVersion = globalThis.LWC_VERSION;
} else {
    try {
        const packageJsonPath = resolve.sync(`lwc/package.json`);
        const { version: packageVersion } = JSON.parse(fs.readFileSync(packageJsonPath), 'utf-8');
        lwcVersion = packageVersion;
    } catch(err) {
        console.log(`[config] peer dependency lwc was not provided`);
        lwcVersion = 'not-provided';
    }
}

// Get the PWA Kit Dev Runtime Version
let pwaKitRuntimeVersion;
if (globalThis.PWA_KIT_RUNTIME_VERSION) {
    pwaKitRuntimeVersion = globalThis.PWA_KIT_RUNTIME_VERSION;
} else {
    try {
        const packageJsonPath = resolve.sync(`@salesforce/pwa-kit-runtime/package.json`);
        const { version: packageVersion } = JSON.parse(fs.readFileSync(packageJsonPath), 'utf-8');
        pwaKitRuntimeVersion = packageVersion;
    } catch(err) {
        console.log(`[config] peer dependency pwa-kit-runtime was not provided`);
        pwaKitRuntimeVersion = 'not-provided';
    }
}
const nodeVersion = process.version

module.exports = {
    rootPath,
    lwrVersion,
    lwcVersion,
    nodeVersion,
    pwaKitRuntimeVersion
};
