var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/api/src/localdev/providers/alias-static-module-provider.ts
__markAsModule(exports);
__export(exports, {
  default: () => alias_static_module_provider_default
});
var import_module_provider = __toModule(require("@lwrjs/static/module-provider"));
var EXTERNAL_ALIAS = {
  "lwr/loaderLegacy": "@salesforce/loader"
};
var AliasStaticModuleProvider = class extends import_module_provider.default {
  constructor() {
    super(...arguments);
    this.name = "alias-static-module-provider";
  }
  async getModuleEntry(moduleId, runtimeParams) {
    const alias = EXTERNAL_ALIAS[moduleId.specifier];
    if (alias) {
      return {
        id: alias,
        version: "",
        specifier: alias,
        entry: "entry-not-provided"
      };
    }
    return super.getModuleEntry(moduleId, runtimeParams);
  }
};
var alias_static_module_provider_default = AliasStaticModuleProvider;
