var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/api/src/localdev/hooks/normalize-routes-hook.ts
__markAsModule(exports);
__export(exports, {
  default: () => normalize_routes_hook_default
});
var import_path = __toModule(require("path"));
var import_fs_extra = __toModule(require("fs-extra"));
var import_diagnostics = __toModule(require("@lwrjs/diagnostics"));
var NormalizeRoutesStartHook = class {
  onStart(config) {
    const versionsPath = import_path.default.join(process.cwd(), process.env.MRT_BUNDLE_ROOT ?? "app", "localdev", "versions.json");
    const runtimeInfo = import_path.default.join(process.cwd(), process.env.MRT_BUNDLE_ROOT ?? "app", "site", ".metadata", "runtime-info.json");
    let isCoreSite = false;
    if (import_fs_extra.default.existsSync(runtimeInfo)) {
      const json = JSON.parse(import_fs_extra.default.readFileSync(runtimeInfo, "utf-8"));
      isCoreSite = json?.deployTarget?.toLowerCase() === "core";
    }
    if (import_fs_extra.default.existsSync(versionsPath)) {
      const json = JSON.parse(import_fs_extra.default.readFileSync(versionsPath, "utf-8"));
      const lwcVersion = json.lwc;
      const lwrVersion = json.lwr;
      config.routes?.map((route) => {
        if (!route.bootstrap)
          route.bootstrap = {};
        route.bootstrap.lwcVersion = lwcVersion;
        route.bootstrap.lwrVersion = lwrVersion;
        if (isCoreSite)
          route.bootstrap.preloadData = false;
      });
      config.errorRoutes?.map((route) => {
        if (!route.bootstrap)
          route.bootstrap = {};
        route.bootstrap.lwcVersion = lwcVersion;
        route.bootstrap.lwrVersion = lwrVersion;
        if (isCoreSite)
          route.bootstrap.preloadData = false;
      });
    } else {
      import_diagnostics.logger.warn(`${versionsPath} does not exist. Skipping route updates`);
    }
  }
};
var normalize_routes_hook_default = NormalizeRoutesStartHook;
