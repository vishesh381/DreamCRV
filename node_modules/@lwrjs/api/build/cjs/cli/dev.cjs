var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/api/src/cli/dev.ts
__markAsModule(exports);
__export(exports, {
  dev: () => dev
});
var import_chalk = __toModule(require("chalk"));
var import_diagnostics = __toModule(require("@lwrjs/diagnostics"));
var import_shared_utils = __toModule(require("@lwrjs/shared-utils"));
var import_dev_proxy_server = __toModule(require("@lwrjs/dev-proxy-server"));
var import_utils = __toModule(require("./utils.cjs"));
async function dev(options) {
  const {port, mode, rootDir, config, open, logLevel} = options;
  const {createServer} = await Promise.resolve().then(() => __toModule(require("@lwrjs/core")));
  process.env.LWR_LOG_LEVEL = logLevel;
  let runtimePort = port;
  const proxyPort = port === void 0 ? import_dev_proxy_server.DEFAULT_PROXY_PORT : port;
  try {
    const proxyConfig = (0, import_dev_proxy_server.findProxyConfiguration)(rootDir);
    if (proxyConfig) {
      runtimePort = proxyPort + 1;
      await (0, import_utils.setupProxy)(runtimePort, proxyPort, proxyConfig);
    }
    const server = createServer({
      port: runtimePort,
      serverMode: mode,
      rootDir,
      lwrConfigFile: config
    });
    await server.listen(async ({serverMode, port: appPort}) => {
      runtimePort = appPort;
    });
    const sitePort = proxyConfig !== void 0 ? proxyPort : runtimePort;
    console.log(import_chalk.default.green(`Application is available at: http://localhost:${sitePort}`));
    if (open) {
      await (0, import_shared_utils.launch)(sitePort);
    }
    return server;
  } catch (error) {
    import_diagnostics.logger.error(error);
    process.exit(1);
  }
}
