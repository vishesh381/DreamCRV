var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/api/src/cli/exp-preview.ts
__markAsModule(exports);
__export(exports, {
  expPreview: () => expPreview
});
var import_path = __toModule(require("path"));
var import_child_process = __toModule(require("child_process"));
var import_chalk = __toModule(require("chalk"));
var import_express = __toModule(require("express"));
var import_fs_extra = __toModule(require("fs-extra"));
var import_dev_proxy_server = __toModule(require("@lwrjs/dev-proxy-server"));
var import_diagnostics = __toModule(require("@lwrjs/diagnostics"));
var import_shared_utils = __toModule(require("@lwrjs/shared-utils"));
var import_utils = __toModule(require("./utils.cjs"));
var import_setup_dev = __toModule(require("./setup-dev.cjs"));
async function expPreview(options) {
  const {rootDir, config, port, target, mode, buildDir, open, logLevel, timeout} = options;
  try {
    process.env.LWR_LOG_LEVEL = logLevel;
    if (timeout) {
      process.env.SSR_TIMEOUT = `${timeout}`;
    }
    if (options.authToken) {
      process.env.AUTH_TOKEN = options.authToken;
      process.env.MRT_ALLOW_COOKIES = "true";
    }
    process.env.LOCAL_PREVIEW_MODE = "true";
    const serverMode = mode;
    let runtimePort = target === "mrt" && !port ? 3e3 : port;
    const proxyPort = port === void 0 ? import_dev_proxy_server.DEFAULT_PROXY_PORT : port;
    if (buildDir && !import_fs_extra.default.existsSync(buildDir)) {
      throw new Error(`specified build directory '${buildDir}' does not exist`);
    }
    const dir = buildDir ? buildDir : (0, import_utils.getDefaultBuildDirectory)(rootDir, config, target);
    const proxyConfig = (0, import_dev_proxy_server.findProxyConfiguration)(rootDir, dir);
    if (proxyConfig) {
      runtimePort = proxyPort + 1;
      const remoteOrigin = proxyConfig.proxyConfigs.length ? proxyConfig.proxyConfigs[0][1] : void 0;
      await (0, import_utils.setupProxy)(runtimePort, proxyPort, {...proxyConfig, remoteOrigin});
    }
    if (target === "mrt") {
      const ssrJs = import_path.default.join(dir, "ssr.js");
      if ((0, import_shared_utils.isLocalAuthEnabled)()) {
        (0, import_setup_dev.replaceSecureHasSid)(import_path.default.join(dir, "experience", "index_csr.html"));
        (0, import_setup_dev.replaceSecureHasSid)(import_path.default.join(dir, "experience", "index.html"));
      }
      if (import_fs_extra.default.existsSync(ssrJs)) {
        (0, import_child_process.spawn)("node", [`${ssrJs}`], {
          cwd: process.cwd(),
          env: {
            ...process.env,
            PORT: runtimePort.toString(),
            NODE_ENV: "test"
          },
          stdio: "inherit"
        });
      } else {
        throw new Error(`cannot find ssr.js in build directory '${dir}'`);
      }
    } else {
      const {createServer} = await Promise.resolve().then(() => __toModule(require("@lwrjs/core")));
      const server = createServer({
        port: runtimePort,
        serverMode,
        rootDir,
        lwrConfigFile: config
      });
      const internalServer = server.getInternalServer();
      if (import_fs_extra.default.existsSync(dir)) {
        import_diagnostics.logger.info({
          label: `cli`,
          message: `Using prebuilt content from directory: ${dir}`
        });
        internalServer.use(import_express.default.static(dir));
      }
      await server.listen(async ({serverMode: serverMode2, port: appPort}) => {
        runtimePort = appPort;
      });
    }
    const sitePort = proxyConfig !== void 0 ? proxyPort : runtimePort;
    console.log(import_chalk.default.green(`Application is available at: http://localhost:${sitePort}`));
    if (open && target !== "mrt") {
      await (0, import_shared_utils.launch)(sitePort);
    }
  } catch (error) {
    import_diagnostics.logger.error(error);
    process.exit(1);
  }
}
