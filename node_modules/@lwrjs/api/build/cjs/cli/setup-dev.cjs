var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/api/src/cli/setup-dev.ts
__markAsModule(exports);
__export(exports, {
  MIN_SUPPORTED_VERSION: () => MIN_SUPPORTED_VERSION,
  replaceSecureHasSid: () => replaceSecureHasSid,
  setupDev: () => setupDev
});
var import_fs_extra = __toModule(require("fs-extra"));
var import_path = __toModule(require("path"));
var import_diagnostics = __toModule(require("@lwrjs/diagnostics"));
var tar = __toModule(require("tar"));
var import_utils = __toModule(require("./utils.cjs"));
var import_config = __toModule(require("@lwrjs/config"));
var MIN_SUPPORTED_VERSION = "0.13.0";
function hasSsrJS(sitePath) {
  return import_fs_extra.default.existsSync(import_path.default.join(sitePath, "ssr.js"));
}
function getBasePath(localDevMetaPath) {
  if (import_fs_extra.default.existsSync(localDevMetaPath)) {
    const rawData = import_fs_extra.default.readFileSync(localDevMetaPath, "utf8");
    const retVal = JSON.parse(rawData).basePath;
    if (retVal)
      return retVal;
  }
  import_diagnostics.logger.warn(`no basepath found in local-dev-metadata.json at ${localDevMetaPath}. Site may not function as expected.`);
  return void 0;
}
function replaceSecureHasSid(filePath) {
  try {
    const fileContent = import_fs_extra.default.readFileSync(filePath, "utf8");
    const updatedContent = fileContent.replace(/(__Secure-has-sid|isLocalDev)/g, "LocalAuthenticationEnabled");
    import_fs_extra.default.writeFileSync(filePath, updatedContent, "utf8");
  } catch (error) {
    import_diagnostics.logger.error(`Error occurred while updating auth token for local development: ${filePath}`, error);
  }
}
async function setupDev(options) {
  const {siteDir = ".", siteZip} = options;
  const pathToAppFolder = import_path.default.join(siteDir, "app");
  const pathToBldFolder = import_path.default.join(siteDir, "bld");
  import_diagnostics.logger.debug({
    label: `local-dev`,
    message: `setup()'`,
    additionalInfo: {
      siteDir,
      pathToAppFolder,
      pathToBldFolder,
      siteZip
    }
  });
  if ((!siteZip || !import_fs_extra.default.existsSync(siteZip)) && !hasSsrJS(pathToAppFolder)) {
    throw new Error(`Local Dev could not find a valid site to run. Please retry with a valid site.`);
  }
  if (siteZip) {
    if (import_fs_extra.default.existsSync(siteZip)) {
      if (!hasSsrJS(pathToAppFolder)) {
        import_diagnostics.logger.info(`Extracting -> '${siteZip}'`);
        try {
          import_fs_extra.default.ensureDirSync(siteDir);
          import_fs_extra.default.rmSync(pathToAppFolder, {recursive: true, force: true});
          import_fs_extra.default.rmSync(pathToBldFolder, {recursive: true, force: true});
          await tar.x({
            file: siteZip,
            cwd: siteDir
          });
          import_fs_extra.default.renameSync(pathToBldFolder, pathToAppFolder);
        } catch (error) {
          import_diagnostics.logger.warn({
            label: `local-dev`,
            message: `Error extracting site bundle '${siteZip}' to directory '${pathToAppFolder}'`
          });
          throw error;
        }
        if (!hasSsrJS(pathToAppFolder)) {
          import_diagnostics.logger.warn({
            label: `local-dev`,
            message: `Error extracting site bundle '${siteZip}' to directory '${pathToAppFolder}'`
          });
        }
      } else {
        import_diagnostics.logger.info(`Already have a valid siteDir, skipping extraction of '${siteZip}'`);
      }
    } else {
      import_diagnostics.logger.warn({
        label: `local-dev`,
        message: `Could not find site zip: '${siteZip}' - Skipping extraction`
      });
    }
  }
  if (!hasSsrJS(pathToAppFolder)) {
    throw new Error(`Local Dev could not find a valid site to run at ${siteDir}. Please retry with a valid site.`);
  }
  const proxyPath = import_path.default.join(pathToAppFolder, "config", "_proxy");
  if (!import_fs_extra.default.existsSync(proxyPath)) {
    import_diagnostics.logger.error({
      label: `local-dev`,
      message: `${proxyPath} does not exist.`
    });
    throw new Error(`LWR version is not compatible with minimum supported version ${MIN_SUPPORTED_VERSION}. Please re-publish your site then re-run this command.`);
  }
  const versionsPath = import_path.default.join(pathToAppFolder, "localdev", "versions.json");
  if (!import_fs_extra.default.existsSync(versionsPath)) {
    import_diagnostics.logger.error({
      label: `local-dev`,
      message: `${versionsPath} does not exist.`
    });
    throw new Error(`LWR version is not compatible with minimum supported version ${MIN_SUPPORTED_VERSION}. Please re-publish your site then re-run this command.`);
  }
  const localDevMeta = import_path.default.join(pathToAppFolder, "localdev", "local-dev-metadata.json");
  if (!import_fs_extra.default.existsSync(localDevMeta)) {
    import_diagnostics.logger.warn({
      label: `local-dev`,
      message: `no local-dev-metadata.json found at ${localDevMeta}. Site may not function as expected.`
    });
  } else {
    options.basePath = getBasePath(localDevMeta);
  }
  const versions = (0, import_utils.getVersions)(versionsPath);
  const lwrVerison = versions.lwrVersion;
  const minVersionCompatible = (0, import_utils.isMinVersionCompatible)(lwrVerison, MIN_SUPPORTED_VERSION);
  if (!minVersionCompatible) {
    const message = `The version of your site '${lwrVerison}' is not compatible with the minimum supported version of local development '${MIN_SUPPORTED_VERSION}'. Please re-publish your site and then re-run this command.`;
    if (process.env.IGNORE_VERSION_MISMATCH === "true") {
      import_diagnostics.logger.warn({label: `local-dev`, message});
    } else {
      throw new Error(message);
    }
  }
  const maxVersionCompatible = (0, import_utils.isMaxVersionCompatible)(lwrVerison, import_config.LWR_VERSION);
  if (!maxVersionCompatible) {
    import_diagnostics.logger.warn({
      label: `local-dev`,
      message: `The installed version of Local Dev is out of date and may not support your current lwr site version '${lwrVerison}'. Please run 'sf update' and then rerun this command.`
    });
  }
  replaceSecureHasSid(import_path.default.join(pathToAppFolder, "experience", "index_csr.html"));
  replaceSecureHasSid(import_path.default.join(pathToAppFolder, "experience", "index.html"));
}
