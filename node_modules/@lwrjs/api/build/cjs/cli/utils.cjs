var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/api/src/cli/utils.ts
__markAsModule(exports);
__export(exports, {
  getDefaultBuildDirectory: () => getDefaultBuildDirectory,
  getVersions: () => getVersions,
  isMaxVersionCompatible: () => isMaxVersionCompatible,
  isMinVersionCompatible: () => isMinVersionCompatible,
  setupProxy: () => setupProxy
});
var import_fs_extra = __toModule(require("fs-extra"));
var import_semver = __toModule(require("semver"));
var import_config = __toModule(require("@lwrjs/config"));
var import_dev_proxy_server = __toModule(require("@lwrjs/dev-proxy-server"));
var import_diagnostics = __toModule(require("@lwrjs/diagnostics"));
function getDefaultBuildDirectory(rootDir, configFile, target) {
  const rawConfig = (0, import_config.getLwrConfigFromFile)(rootDir, configFile);
  let buildDir = rawConfig?.staticSiteGenerator?.outputDir;
  if (!buildDir) {
    buildDir = target === "mrt" ? "app" : "site";
  }
  return buildDir;
}
function getVersions(filePath) {
  const json = JSON.parse(import_fs_extra.default.readFileSync(filePath, "utf-8"));
  const lwcVersion = json.lwc;
  const lwrVersion = json.lwr;
  return {
    lwrVersion,
    lwcVersion
  };
}
function isMinVersionCompatible(currentVersion, minSupportedVersion) {
  try {
    const cleanedCurrentVersion = import_semver.default.clean(currentVersion);
    const cleanedMinSupportedVersion = import_semver.default.clean(minSupportedVersion);
    if (!cleanedCurrentVersion || !cleanedMinSupportedVersion) {
      throw new Error("Invalid version format");
    }
    return import_semver.default.gte(cleanedCurrentVersion, cleanedMinSupportedVersion);
  } catch (error) {
    import_diagnostics.logger.warn({
      label: "local-dev",
      message: `Error checking version compatibility: ${error}`
    });
    return true;
  }
}
function isMaxVersionCompatible(currentVersion, maxSupportedVersion) {
  try {
    const cleanedCurrentVersion = import_semver.default.clean(currentVersion);
    const cleanedMaxSupportedVersion = import_semver.default.clean(maxSupportedVersion);
    if (!cleanedCurrentVersion || !cleanedMaxSupportedVersion) {
      throw new Error("Invalid version format");
    }
    return import_semver.default.lte(cleanedCurrentVersion, cleanedMaxSupportedVersion);
  } catch (error) {
    import_diagnostics.logger.warn({
      label: "local-dev",
      message: `Error checking version compatibility: ${error}`
    });
    return true;
  }
}
async function setupProxy(runtimePort, proxyPort, proxyConfig) {
  if (proxyConfig) {
    const proxyServer = (0, import_dev_proxy_server.createProxyServer)({
      port: proxyPort,
      defaultHost: `http://localhost:${runtimePort}`,
      ...proxyConfig
    });
    await proxyServer.listen();
  }
}
