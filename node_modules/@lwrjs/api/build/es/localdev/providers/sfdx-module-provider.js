import path from 'path';
import fs from 'fs';
import LWCModuleProvider from '@lwrjs/lwc-module-provider';
import { explodeSpecifier } from '@lwrjs/shared-utils';
import { logger } from '@lwrjs/diagnostics';
const SFDX_SCOPE = 'c/';
const MODULE_DIR = path.join(process.cwd(), 'force-app', 'main', 'default', 'lwc');
export default class SFDXProvider extends LWCModuleProvider {
    constructor() {
        super(...arguments);
        this.name = 'sfdx-module-provider';
    }
    async getModuleEntry({ specifier }) {
        if (!specifier.startsWith(SFDX_SCOPE)) {
            return undefined;
        }
        const { name } = explodeSpecifier(specifier);
        const [component, resource] = name.split('#');
        // TODO figure all possible entires for an SFDX component
        const entry = path.join(MODULE_DIR, component, resource ?? `${component}.js`);
        // Check to see if we can find the parent directory locally (indicating we should have the component source)
        // this is more safe as some of the entires look like: 'c/dev#dev.scoped.css?scoped=true' (which wouldn't map to a file)
        const parentDir = path.dirname(entry);
        if (!fs.existsSync(parentDir)) {
            // if we can't find local c/src files, output a warning to the user and return undefined here
            // we could also throw here but I think returning undefined is safer for now
            logger.warn({
                label: `local-dev`,
                message: `Missing source files for module '${specifier}' at path '${entry}'`,
            });
            return undefined;
        }
        return {
            id: specifier,
            specifier,
            entry,
            version: '',
            scope: process.cwd(),
        };
    }
}
//# sourceMappingURL=sfdx-module-provider.js.map