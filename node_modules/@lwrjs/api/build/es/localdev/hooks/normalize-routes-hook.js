import path from 'path';
import fs from 'fs-extra';
import { logger } from '@lwrjs/diagnostics';
/**
 * This hook is run after the CLWR on start hook runs (which adds every route for the MRT bundle).
 * It then sets the LWR/LWC versions to the ones included in the bundle rather than use the default
 * versions from the LWR CLI. If CLWR starts including these by default we can remove this code.
 *
 * MRT bundle routes don't currently contain any version information in their bootstrap properties.
 * Local development needs to set the LWR/LWC versions on every route, otherwise, we will not
 * be able to resolve the loader shim or @lwc/* packages from the static bundle provider.

 * Reference: https://github.com/salesforce-experience-platform-emu/lwr/pull/3040
 *
 */
export default class NormalizeRoutesStartHook {
    onStart(config) {
        const versionsPath = path.join(process.cwd(), process.env.MRT_BUNDLE_ROOT ?? 'app', 'localdev', 'versions.json');
        const runtimeInfo = path.join(process.cwd(), process.env.MRT_BUNDLE_ROOT ?? 'app', 'site', '.metadata', 'runtime-info.json');
        // Use metadata to determine if we are a LWR Core Site vs MRT Site
        let isCoreSite = false;
        if (fs.existsSync(runtimeInfo)) {
            const json = JSON.parse(fs.readFileSync(runtimeInfo, 'utf-8'));
            isCoreSite = json?.deployTarget?.toLowerCase() === 'core';
        }
        if (fs.existsSync(versionsPath)) {
            const json = JSON.parse(fs.readFileSync(versionsPath, 'utf-8'));
            const lwcVersion = json.lwc;
            const lwrVersion = json.lwr;
            config.routes?.map((route) => {
                if (!route.bootstrap)
                    route.bootstrap = {};
                route.bootstrap.lwcVersion = lwcVersion;
                route.bootstrap.lwrVersion = lwrVersion;
                // set preloadData = false for all CLWR core sites
                if (isCoreSite)
                    route.bootstrap.preloadData = false;
            });
            config.errorRoutes?.map((route) => {
                if (!route.bootstrap)
                    route.bootstrap = {};
                route.bootstrap.lwcVersion = lwcVersion;
                route.bootstrap.lwrVersion = lwrVersion;
                // set preloadData = false for all CLWR core sites
                if (isCoreSite)
                    route.bootstrap.preloadData = false;
            });
        }
        else {
            logger.warn(`${versionsPath} does not exist. Skipping route updates`);
        }
    }
}
//# sourceMappingURL=normalize-routes-hook.js.map