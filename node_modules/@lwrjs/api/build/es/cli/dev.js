import chalk from 'chalk';
import { logger } from '@lwrjs/diagnostics';
import { launch } from '@lwrjs/shared-utils';
import { DEFAULT_PROXY_PORT, findProxyConfiguration } from '@lwrjs/dev-proxy-server';
import { setupProxy } from './utils.js';
export async function dev(options) {
    const { port, mode, rootDir, config, open, logLevel } = options;
    const { createServer } = await import('@lwrjs/core');
    process.env.LWR_LOG_LEVEL = logLevel; // Set the log level
    // runtimePort can be undefined on invocation. The actual value is resolved via createServer()
    let runtimePort = port;
    const proxyPort = port === undefined ? DEFAULT_PROXY_PORT : port;
    try {
        const proxyConfig = findProxyConfiguration(rootDir);
        if (proxyConfig) {
            runtimePort = proxyPort + 1;
            await setupProxy(runtimePort, proxyPort, proxyConfig);
        }
        const server = createServer({
            port: runtimePort,
            serverMode: mode,
            rootDir,
            lwrConfigFile: config,
        });
        await server.listen(async ({ serverMode, port: appPort }) => {
            runtimePort = appPort;
        });
        const sitePort = proxyConfig !== undefined ? proxyPort : runtimePort;
        // TODO
        // eslint-disable-next-line no-console
        console.log(chalk.green(`Application is available at: http://localhost:${sitePort}`));
        if (open) {
            await launch(sitePort);
        }
        return server;
    }
    catch (error) {
        logger.error(error);
        process.exit(1);
    }
}
//# sourceMappingURL=dev.js.map