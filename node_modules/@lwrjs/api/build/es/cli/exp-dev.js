import chalk from 'chalk';
import { logger } from '@lwrjs/diagnostics';
import { launch } from '@lwrjs/shared-utils';
import { setupDev } from './setup-dev.js';
export async function expDev(options) {
    const { port, open, logLevel, mode, timeout, regenerateAllRoutes, writeSrcFilesToBundle } = options;
    // Set the log level first
    process.env.LWR_LOG_LEVEL = logLevel;
    // Setup and verify we can run this command
    await setupDev(options);
    if (timeout) {
        process.env.SSR_TIMEOUT = `${timeout}`;
    }
    if (options.authToken) {
        process.env.AUTH_TOKEN = options.authToken;
        process.env.MRT_ALLOW_COOKIES = 'true';
    }
    let serverUrl = `http://localhost:${port}`;
    if (options.basePath) {
        options.basePath = options.basePath.startsWith('/') ? options.basePath : `/${options.basePath}`;
        serverUrl += options.basePath;
    }
    // Site expects a '/' at the end of server url
    serverUrl = serverUrl.endsWith('/') ? serverUrl : `${serverUrl}/`;
    process.env.MRT_HMR = 'true';
    // Turn on SSR_DEBUG unless its explicitly set to false
    if (mode === 'dev' && process.env.SSR_DEBUG === undefined)
        process.env.SSR_DEBUG = 'true';
    // Turn on SSR_WITH_CSR_FALLBACK unless its explicitly set to false
    if (mode === 'dev' && process.env.SSR_WITH_CSR_FALLBACK === undefined)
        process.env.SSR_WITH_CSR_FALLBACK = 'true';
    // Experimental: Use server warmup to automatically regenerate our views with latest local source
    if (regenerateAllRoutes)
        process.env.WARMUP = 'true';
    // runtimePort can be undefined on invocation. The actual value is resolved via createServer()
    let runtimePort = port;
    let server;
    try {
        const { createDevServer } = await import('../localdev/dev-server.js');
        server = await createDevServer(options);
        await server.listen(async ({ serverMode, port: appPort }) => {
            runtimePort = appPort;
        });
        // eslint-disable-next-line no-console
        console.log(chalk.green(`Site is available at: ${serverUrl}`));
        // Provide scary warning message if we have write bundles back to source
        if (writeSrcFilesToBundle) {
            // eslint-disable-next-line no-console
            console.log(chalk.yellow(`WARNING: Any routes you navigate to in your browser will be compiled from local source and written directly into the MRT pre-built site. Use at your own risk!`));
        }
        if (open) {
            await launch(runtimePort, undefined, options.basePath);
        }
        return server;
    }
    catch (error) {
        logger.error(error);
        process.exit(1);
    }
}
//# sourceMappingURL=exp-dev.js.map