import fs from 'fs-extra';
import semver from 'semver';
import { getLwrConfigFromFile } from '@lwrjs/config';
import { createProxyServer } from '@lwrjs/dev-proxy-server';
import { logger } from '@lwrjs/diagnostics';
export function getDefaultBuildDirectory(rootDir, configFile, target) {
    // need to get raw config so we know if user has declared a default
    const rawConfig = getLwrConfigFromFile(rootDir, configFile);
    let buildDir = rawConfig?.staticSiteGenerator?.outputDir;
    if (!buildDir) {
        // Default based on target
        buildDir = target === 'mrt' ? 'app' : 'site';
    }
    return buildDir;
}
/**
 * Get LWR and LWC versions from a bundle
 *
 * @param filePath
 * @returns
 */
export function getVersions(filePath) {
    const json = JSON.parse(fs.readFileSync(filePath, 'utf-8'));
    const lwcVersion = json.lwc;
    const lwrVersion = json.lwr;
    return {
        lwrVersion,
        lwcVersion,
    };
}
/**
 * Checks if the given version is compatible with the minimum supported version.
 * @param currentVersion - The current version of the package.
 * @param minSupportedVersion - The minimum supported version of the package.
 * @returns true if the current version is compatible, false otherwise.
 */
export function isMinVersionCompatible(currentVersion, minSupportedVersion) {
    try {
        const cleanedCurrentVersion = semver.clean(currentVersion);
        const cleanedMinSupportedVersion = semver.clean(minSupportedVersion);
        if (!cleanedCurrentVersion || !cleanedMinSupportedVersion) {
            throw new Error('Invalid version format');
        }
        return semver.gte(cleanedCurrentVersion, cleanedMinSupportedVersion);
    }
    catch (error) {
        logger.warn({
            label: 'local-dev',
            message: `Error checking version compatibility: ${error}`,
        });
        return true;
    }
}
/**
 * Checks if the given version is compatible with the maximum supported version.
 * @param currentVersion - The current version of the package.
 * @param maxSupportedVersion - The maximum supported version of the package.
 * @returns true if the current version is compatible, false otherwise.
 */
export function isMaxVersionCompatible(currentVersion, maxSupportedVersion) {
    try {
        const cleanedCurrentVersion = semver.clean(currentVersion);
        const cleanedMaxSupportedVersion = semver.clean(maxSupportedVersion);
        if (!cleanedCurrentVersion || !cleanedMaxSupportedVersion) {
            throw new Error('Invalid version format');
        }
        return semver.lte(cleanedCurrentVersion, cleanedMaxSupportedVersion);
    }
    catch (error) {
        logger.warn({
            label: 'local-dev',
            message: `Error checking version compatibility: ${error}`,
        });
        return true;
    }
}
/**
 * Creates a proxy server or adds proxy routes to an existing server.
 * @param runtimePort  - The port for the site.
 * @param proxyPort - The port for the proxy.
 * @param proxyConfig - Proxy configuration, including the proxy rules (path -> URI)
 */
export async function setupProxy(runtimePort, proxyPort, proxyConfig) {
    if (proxyConfig) {
        // Start a separate express proxy
        const proxyServer = createProxyServer({
            port: proxyPort,
            defaultHost: `http://localhost:${runtimePort}`,
            ...proxyConfig,
        });
        await proxyServer.listen();
    }
}
//# sourceMappingURL=utils.js.map