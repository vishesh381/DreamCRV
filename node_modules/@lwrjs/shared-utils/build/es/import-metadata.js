import { parse as parseImports } from 'es-module-lexer';
import { logger } from '@lwrjs/diagnostics';
const IMPORT_META_REGEX = /^import\.meta(\.\w+)+/;
export var ModuleNameType;
(function (ModuleNameType) {
    ModuleNameType["string"] = "string";
    ModuleNameType["unresolved"] = "unresolved";
})(ModuleNameType || (ModuleNameType = {}));
export async function getImportMetadata(compiledSource) {
    const imports = [];
    const dynamicImports = [];
    const importMeta = [];
    // Use very fast parser to get the location of the imports/exports
    const [moduleImportLocations] = await parseImports(compiledSource);
    for (const moduleImportLocation of moduleImportLocations) {
        // This will give us the source specifier of the import (ex. import x from "bar" <= will get us bar)
        let moduleSpecifier = compiledSource.substring(moduleImportLocation.s, moduleImportLocation.e);
        const isStatic = moduleImportLocation.d === -1;
        const isDynamic = moduleImportLocation.d > -1;
        const isMeta = moduleImportLocation.d === -2;
        const location = {
            startColumn: moduleImportLocation.s,
            endColumn: moduleImportLocation.e,
        };
        if (isDynamic) {
            const isStringLiteral = moduleSpecifier.startsWith("'") || moduleSpecifier.startsWith('"');
            const moduleNameType = isStringLiteral ? ModuleNameType.string : ModuleNameType.unresolved;
            moduleSpecifier = isStringLiteral ? moduleSpecifier.slice(1, -1) : moduleSpecifier; // remove quotes
            // Expecting: import(rootSpecifier) -> import(
            if (logger.isDebugEnabled()) {
                logger.debug({
                    label: `import-metadata`,
                    message: `Import from dynamic import ${compiledSource.slice(moduleImportLocation.ss, moduleImportLocation.se)} -> ${compiledSource.slice(moduleImportLocation.ss, moduleImportLocation.s)}`,
                });
            }
            dynamicImports.push({
                moduleSpecifier,
                moduleNameType,
                location,
                importLocation: {
                    startColumn: moduleImportLocation.ss,
                    endColumn: moduleImportLocation.s,
                },
            });
        }
        else if (isStatic) {
            imports.push({ moduleSpecifier, location });
        }
        else if (isMeta) {
            // moduleImportLocation.s => moduleImportLocation.e only captures "import.meta"
            // this regex will capture the entire statement, eg: `import.meta.env.SSR"
            const metaMatch = IMPORT_META_REGEX.exec(compiledSource.substring(moduleImportLocation.s));
            if (metaMatch) {
                const statement = metaMatch[0];
                const extraLength = statement.length - 11; // to include meta property, eg: ".env.SSR"
                importMeta.push({
                    statement,
                    location: {
                        startColumn: moduleImportLocation.s,
                        endColumn: moduleImportLocation.e + extraLength,
                    },
                });
            }
        }
    }
    return {
        imports,
        dynamicImports,
        importMeta,
    };
}
//# sourceMappingURL=import-metadata.js.map