import type { I18NConfig, RuntimeEnvironment, RuntimeParams, ViewRequestQs } from '@lwrjs/types';
export declare function getClientBootstrapConfigurationUri(routeInfo: {
    id: string;
    url: string;
    query?: ViewRequestQs;
}, runtimeEnvironment: RuntimeEnvironment, runtimeParams?: RuntimeParams, signature?: string): string;
export declare function decodeViewPath(encodedViewPath: string): string;
export declare function getClientBootstrapConfigurationUriPrefix(routeInfo: {
    id: string;
}, runtimeEnvironment: RuntimeEnvironment, runtimeParams?: RuntimeParams): string;
/**
 * Remove the suffix from config
 */
export declare function removeClientBootstrapConfigurationSuffix(url: string): string;
/**
 * Get the parameterized client bootstrap app configuration routes
 */
export declare function getClientBootstrapConfigurationRoutes(): string[];
/**
 * Extract param values from a resolved URL based on a parameterized route.  Keep existing param values.
 * Uses path-to-regexp to match -> https://www.npmjs.com/package/path-to-regexp
 *
 * extractRequestParams('/:p1/:p2*', '/foo/bar/barz', {e1:'v1'}) => {e1:'v1', p1:'foo', p2:'bar/barz'}
 *
 * @param parameterizedRoute - A Url with parameter tokens
 * @param resolvedUrl - A url with tokens filled in to match against
 * @param existingParams - optional existing request parameters to match against
 * @returns A parameter maps with existing parameters plus token value pairs from route and url
 */
export declare function extractRequestParams(parameterizedRoute: string, resolvedUrl: string, existingParams?: Record<string, string>): Record<string, string>;
export declare function isModuleOrBundleUrl(url: string): boolean;
/**
 * Return a view route URL considering the basePath and the i18N config
 */
export declare function getViewUri(routePath: string, basePath: string, locale: string, i18n: I18NConfig): string;
/**
 * Returns true is the URI starts with http:// or https://
 */
export declare function isURL(uri: string): boolean;
export declare function crossEnvFileURL(url: string): string;
//# sourceMappingURL=urls.d.ts.map