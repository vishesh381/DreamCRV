import { LATEST_SIGNATURE } from './identity.js';
export function getGroupName(rawSpecifier, groupsConfig) {
    for (const [groupName, groupies] of Object.entries(groupsConfig)) {
        if (groupies.indexOf(rawSpecifier) >= 0) {
            return groupName;
        }
    }
}
export function isGroupie(rawSpecifier, groupsConfig) {
    for (const groupies of Object.values(groupsConfig)) {
        if (groupies.indexOf(rawSpecifier) >= 0) {
            return true;
        }
    }
    return false;
}
/**
 * Create an AMD Alias to another AMD module
 *
 * In the spirit of...
 * LWR.define('alias', 'og', og=>og);
 *
 * But if OG has a default it is exposed as exports.default
 *
 * All enumerable properties of og are exposed as enumerable properties of exports.
 *
 */
export function createAmdAlias(aliasSpecifier, originalSpecifier) {
    // If the aliasSpecifier === the originalSpecifier specifier do not bother creating an alias
    if (aliasSpecifier === originalSpecifier) {
        return '';
    }
    const builder = [];
    // Define statement
    builder.push(`LWR.define('${aliasSpecifier}',['exports','${originalSpecifier}'],function(e,m){`);
    // un-wrap default
    builder.push(`e.default=m&&'object'==typeof m&&'default'in m?m.default:m;`);
    // Expose enumerable properties
    builder.push(`Object.keys(m).forEach(function(n){'default'===n||e.hasOwnProperty(n)||Object.defineProperty(e,n,{enumerable:!0,get:function(){return m[n]}})});`);
    // End the define
    builder.push('});');
    return builder.join('');
}
/**
 * Creates a BundleSigner to fetch bundle signatures.  This creates a facade over the bundle registry.
 */
export function createBundleSigner(moduleBundler) {
    return {
        getBundleSignature: async (moduleId, runtimeEnvironment, runtimeParams, exclude) => {
            const def = await moduleBundler.getModuleBundle(moduleId, runtimeEnvironment, runtimeParams, exclude ? { exclude } : undefined);
            return signBundle(def);
        },
    };
}
export function signBundle(bundleDef) {
    const integrityHash = bundleDef?.integrity ?? LATEST_SIGNATURE;
    // Replace URL-unsafe characters (+, /) with URL-safe ones (-, _)
    return integrityHash.replace(/\+/g, '-').replace(/\//g, '_').replace(/=+$/, '');
}
//# sourceMappingURL=bundle.js.map