import type { EnvironmentContext, FeatureFlags, Headers, RuntimeParams } from '@lwrjs/types';
export declare function getFeatureFlags(): FeatureFlags;
/**
 * This function is used to determine if the current environment is a lambda.
 *
 * @returns true if process is running in lambda environment
 */
export declare function isLambdaEnv(): boolean;
/**
 * This function is used to determine if lwr is running in the context of local development.
 *
 * @returns true if running in localdev mode
 */
export declare function isLocalDev(): boolean;
/**
 * This function is used to determine if lwr is running in the context of local preview.
 *
 * @returns true if running in preview mode
 */
export declare function isLocalPreview(): boolean;
/**
 * This function is used to determine if lwr is running with an authenticated context locally
 *
 * @returns true if local dev/preview authentication is enabled
 */
export declare function isLocalAuthEnabled(): boolean;
/**
 * Create a serializable context for user-land exposed environment variables
 */
export declare function buildEnvironmentContext(runtimeParams: RuntimeParams): EnvironmentContext;
export declare const REQUEST_DEPTH_HEADER = "X-SFDC-Request-Depth";
export declare const REQUEST_DEPTH_KEY: string;
export declare function parseRequestDepth(headers?: Headers, query?: Record<string, string>): number;
//# sourceMappingURL=env.d.ts.map