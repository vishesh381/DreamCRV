/// <reference types="node" />
/// <reference types="node" />
import type { AssetIdentifier, ResourcePaths, ViewSource } from '@lwrjs/types';
import { lookup } from 'mime-types';
import { Readable } from 'stream';
export declare const PROTOCOL_HTTP = "http://";
export declare const PROTOCOL_HTTPS = "https://";
export declare const PROTOCOL_FILE = "file://";
/**
 * Create a hash string for a source
 * @param source
 */
export declare function hashContent(source: string | Buffer): string;
/**
 * Create a Sub-resource Integrity Hash https://developer.mozilla.org/en-US/docs/Web/Security/Subresource_Integrity
 */
export declare function createIntegrityHash(source: string | Buffer): string;
/**
 * Read in the contents of the file path
 * @param filePath
 */
export declare function readFile(filePath: string): string;
/**
 * Given a filepath, ensure it has a file extension by checking for the file on the fs
 * @param filePath
 */
export declare function resolveFileExtension(filePath: string): string;
/**
 * Returns if view of specific type can be resolved
 *
 * @param source - possible path to view
 * @param type - extension of file that should be expected, i.e. 'html'
 */
export declare function canResolveView(source: unknown, type: string): boolean;
/**
 * Construct a ViewSource from the associated file on the fs
 * @param source - Filepath with the source (source can be an absolute or relative path)
 * @param viewFolder - File in the fs which holds the view
 */
export declare function getViewSourceFromFile(source: string): ViewSource;
export declare function normalizeDirectory(dir: string, rootDir: string): string;
/**
 * Replace all instances of `$rootDir` with `rootDir`.
 * Convert path to file:// url
 * @param file
 * @param rootDir
 */
export declare function normalizeToFileUrl(filePath: string, rootDir: string): string;
export declare function normalizeFromFileURL(fileURL: string | undefined, basePath: string): string | null;
export declare function isLocalPath(filePath: string): boolean;
export declare function normalizeResourcePath(rawPath: string, { rootDir, assets, contentDir, layoutsDir }: ResourcePaths, allowUnresolvedAlias?: boolean): string;
export { lookup as mimeLookup };
/**
 * Tries to convert any URL or $aliased path into a canonical fs path
 */
export declare function normalizeAssetSpecifier(assetId: AssetIdentifier, assetPathMap: Map<string, string>, resourcePaths: ResourcePaths, basePath: string): string;
export declare function streamToString(stream: Readable, encoding?: BufferEncoding): Promise<string>;
export declare function stringToStream(str: string | Buffer): Readable;
export declare function filterProtocolEntries(record: Record<string, string>, protocol: string): Record<string, string>;
//# sourceMappingURL=fs.d.ts.map