var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/shared-utils/src/fs.ts
__markAsModule(exports);
__export(exports, {
  PROTOCOL_FILE: () => PROTOCOL_FILE,
  PROTOCOL_HTTP: () => PROTOCOL_HTTP,
  PROTOCOL_HTTPS: () => PROTOCOL_HTTPS,
  canResolveView: () => canResolveView,
  createIntegrityHash: () => createIntegrityHash,
  filterProtocolEntries: () => filterProtocolEntries,
  getViewSourceFromFile: () => getViewSourceFromFile,
  hashContent: () => hashContent,
  isLocalPath: () => isLocalPath,
  mimeLookup: () => import_mime_types.lookup,
  normalizeAssetSpecifier: () => normalizeAssetSpecifier,
  normalizeDirectory: () => normalizeDirectory,
  normalizeFromFileURL: () => normalizeFromFileURL,
  normalizeResourcePath: () => normalizeResourcePath,
  normalizeToFileUrl: () => normalizeToFileUrl,
  readFile: () => readFile,
  resolveFileExtension: () => resolveFileExtension,
  streamToString: () => streamToString,
  stringToStream: () => stringToStream
});
var import_fs_extra = __toModule(require("fs-extra"));
var import_path = __toModule(require("path"));
var import_url = __toModule(require("url"));
var import_crypto = __toModule(require("crypto"));
var import_identity = __toModule(require("./identity.cjs"));
var import_diagnostics = __toModule(require("@lwrjs/diagnostics"));
var import_mime_types = __toModule(require("mime-types"));
var import_stream = __toModule(require("stream"));
var import_diagnostics2 = __toModule(require("@lwrjs/diagnostics"));
var fileCount = 0;
var files = new Map();
var PROTOCOL_HTTP = "http://";
var PROTOCOL_HTTPS = "https://";
var PROTOCOL_FILE = "file://";
function hashContent(source) {
  return import_crypto.default.createHash("md5").update(source).digest("hex");
}
function createIntegrityHash(source) {
  const hash = import_crypto.default.createHash("sha256").update(source).digest("base64");
  return `sha256-${hash}`;
}
function readFile(filePath) {
  logMetrics(filePath);
  return import_fs_extra.default.readFileSync(filePath, "utf8");
}
function resolveFileExtension(filePath) {
  const fileName = import_path.default.basename(filePath);
  const hasExt = !!import_path.default.extname(fileName);
  if (hasExt) {
    return filePath;
  }
  if (import_fs_extra.default.existsSync(filePath)) {
    if (import_fs_extra.default.statSync(filePath).isFile()) {
      return filePath;
    } else {
      filePath = import_path.default.join(filePath, "index");
    }
  }
  if (import_fs_extra.default.existsSync(filePath + ".js")) {
    return filePath + ".js";
  } else if (import_fs_extra.default.existsSync(filePath + ".ts")) {
    return filePath + ".ts";
  } else {
    throw new Error(`Unable to find file "${filePath}"`);
  }
}
function canResolveView(source, type) {
  if (typeof source !== "string") {
    return false;
  }
  if (!source.endsWith(`.${type}`)) {
    return false;
  }
  if (!import_fs_extra.default.existsSync(import_path.default.resolve(source))) {
    throw new Error(`View template cannot be found: "${source}"`);
  }
  return true;
}
function getViewSourceFromFile(source) {
  const sourceFilePath = import_path.default.resolve(source);
  const viewSource = readFile(sourceFilePath);
  const ext = import_path.default.extname(sourceFilePath);
  const name = import_path.default.basename(sourceFilePath, ext);
  return {
    name,
    slug: (0, import_identity.slugify)(name),
    filePath: sourceFilePath,
    ownHash: hashContent(viewSource),
    originalSource: viewSource
  };
}
var ROOT_DIR_REGEX = /\$rootDir/g;
function normalizeDirectory(dir, rootDir) {
  return dir.replace(ROOT_DIR_REGEX, rootDir);
}
function normalizeToFileUrl(filePath, rootDir) {
  if (filePath.startsWith(PROTOCOL_FILE)) {
    return filePath;
  }
  const replacedPath = filePath.replace(ROOT_DIR_REGEX, rootDir);
  const fullPath = import_path.default.resolve(rootDir, replacedPath);
  return import_url.default.pathToFileURL(fullPath).href;
}
function normalizeFromFileURL(fileURL, basePath) {
  if (typeof fileURL !== "string" || !fileURL.startsWith("file://")) {
    return null;
  }
  const filePath = import_url.default.fileURLToPath(fileURL);
  const normalizedBasePath = import_path.default.resolve(import_path.default.normalize(basePath));
  const compatibleFilePath = filePath.split(import_path.default.sep).join("/");
  const compatibleBasePath = normalizedBasePath.split(import_path.default.sep).join("/");
  if (compatibleFilePath.startsWith(compatibleBasePath)) {
    const relativePath = "/" + import_path.default.relative(normalizedBasePath, filePath).split(import_path.default.sep).join("/");
    return relativePath;
  } else {
    return compatibleFilePath.startsWith("/") ? compatibleFilePath : "/" + compatibleFilePath;
  }
}
function isLocalPath(filePath) {
  if (!filePath) {
    return false;
  }
  if (filePath.startsWith("//")) {
    return false;
  }
  if (filePath.startsWith("$rootDir") || filePath.startsWith(PROTOCOL_FILE) || filePath.startsWith("/")) {
    return true;
  }
  if (/^[a-zA-Z]:\\/.test(filePath)) {
    return true;
  }
  return false;
}
var RESOURCE_DIR_REGEX = /\$(\w+)|^\$(\w+)/g;
function normalizeResourcePath(rawPath, {rootDir, assets, contentDir, layoutsDir}, allowUnresolvedAlias) {
  const assetsMap = assets.reduce((map, asset) => {
    if (asset.alias) {
      map[asset.alias] = asset.dir || asset.file;
    }
    return map;
  }, {rootDir, contentDir, layoutsDir});
  return rawPath.replace(RESOURCE_DIR_REGEX, function(fullMatch, m1, m2) {
    const alias = assetsMap[m1] || assetsMap[m2];
    if (!alias && !allowUnresolvedAlias) {
      throw (0, import_diagnostics.createSingleDiagnosticError)({
        description: import_diagnostics.descriptions.UNRESOLVABLE.DIR_ALIAS(fullMatch)
      }, import_diagnostics.LwrUnresolvableError);
    }
    return alias;
  });
}
function logMetrics(filePath) {
  if (import_diagnostics2.logger.isDebugEnabled()) {
    let count = files.get(filePath) || 0;
    if (++count % 100 === 0) {
      import_diagnostics2.logger.debug({label: `logMetrics`, message: `[${count}] Repeat Read ${filePath}`});
    }
    files.set(filePath, count);
    if (++fileCount % 1e3 === 0) {
      import_diagnostics2.logger.debug({label: `logMetrics`, message: `Open file count [${fileCount}]`});
    }
  }
}
function normalizeAssetSpecifier(assetId, assetPathMap, resourcePaths, basePath) {
  const {specifier, importer, type} = assetId;
  if (specifier.startsWith("./") || specifier.startsWith("../")) {
    if (!importer) {
      throw Error(`Unable to resolve relative import "${specifier}" without an importer.`);
    }
    return import_path.default.join(import_path.default.dirname(importer), specifier);
  }
  if (type === "content-asset") {
    const originSpecifier = !basePath ? specifier : specifier.split(basePath)[1];
    return import_path.default.join(resourcePaths.contentDir, originSpecifier);
  }
  if (specifier[0] === "$") {
    return normalizeResourcePath(specifier, resourcePaths);
  }
  for (const [urlPath, fsPath] of assetPathMap.entries()) {
    const slashPath = urlPath.endsWith("/") ? urlPath : `${urlPath}/`;
    const fsSlashPath = fsPath.endsWith("/") ? fsPath : `${fsPath}/`;
    if (specifier.startsWith(slashPath)) {
      return specifier.replace(slashPath, fsSlashPath);
    } else if (specifier === urlPath) {
      return specifier.replace(urlPath, fsPath);
    }
  }
  return specifier;
}
function streamToString(stream, encoding = "utf8") {
  const chunks = [];
  return new Promise((resolve, reject) => {
    stream.on("data", (c) => chunks.push(c));
    stream.on("error", reject);
    stream.on("end", () => resolve(Buffer.concat(chunks).toString(encoding)));
  });
}
function stringToStream(str) {
  let index = 0;
  const isBuffer = Buffer.isBuffer(str);
  const readable = new import_stream.Readable({
    read(size) {
      if (index >= str.length) {
        this.push(null);
        return;
      }
      let chunk;
      if (isBuffer) {
        chunk = str.subarray(index, index + size);
      } else {
        chunk = str.slice(index, index + size);
      }
      index += size;
      this.push(chunk);
    }
  });
  return readable;
}
function filterProtocolEntries(record, protocol) {
  const filteredEntries = Object.entries(record).filter(([_key, value]) => !value || !value.startsWith(protocol));
  return Object.fromEntries(filteredEntries);
}
