var __defProp = Object.defineProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};

// packages/@lwrjs/shared-utils/src/env.ts
__markAsModule(exports);
__export(exports, {
  REQUEST_DEPTH_HEADER: () => REQUEST_DEPTH_HEADER,
  REQUEST_DEPTH_KEY: () => REQUEST_DEPTH_KEY,
  buildEnvironmentContext: () => buildEnvironmentContext,
  getFeatureFlags: () => getFeatureFlags,
  isLambdaEnv: () => isLambdaEnv,
  isLocalAuthEnabled: () => isLocalAuthEnabled,
  isLocalDev: () => isLocalDev,
  isLocalPreview: () => isLocalPreview,
  parseRequestDepth: () => parseRequestDepth
});
if (getFeatureFlags().REEVALUATE_MODULES && !getFeatureFlags().LEGACY_LOADER) {
  throw new Error("REEVALUATE_MODULES is only supported with LEGACY_LOADER");
}
function getFeatureFlags() {
  return {
    ASSETS_ON_LAMBDA: parseBooleanFlag("ASSETS_ON_LAMBDA"),
    BUNDLE_CACHE_SIZE: parseStringFlag("BUNDLE_CACHE_SIZE"),
    ENABLE_NONCE: parseBooleanFlag("ENABLE_NONCE"),
    EXPERIMENTAL_UNVERSIONED_ALIASES: parseBooleanFlag("EXPERIMENTAL_UNVERSIONED_ALIASES"),
    LEGACY_LOADER: parseBooleanFlag("LEGACY_LOADER"),
    LWR_TRACING: parseTracingFlag(),
    MAX_VIEW_CACHE_TTL: parseStringFlag("MAX_VIEW_CACHE_TTL"),
    REEVALUATE_MODULES: parseBooleanFlag("REEVALUATE_MODULES"),
    SSR_COMPILER_ENABLED: parseBooleanFlag("SSR_COMPILER_ENABLED"),
    SSR_LOADER_PER_REQUEST: parseBooleanFlag("SSR_LOADER_PER_REQUEST"),
    SSR_WITH_CSR_FALLBACK: parseBooleanFlag("SSR_WITH_CSR_FALLBACK"),
    VIEW_CACHE_SIZE: parseStringFlag("VIEW_CACHE_SIZE"),
    EXPERIMENTAL_ASSET_HEADERS: parseStringFlag("EXPERIMENTAL_ASSET_HEADERS")
  };
}
function parseBooleanFlag(flag) {
  return process.env[flag]?.toLowerCase() === "true" || false;
}
function parseStringFlag(flag) {
  const value = process.env[flag]?.trim();
  return value || void 0;
}
function parseTracingFlag() {
  const tracingValue = process.env.LWR_TRACING?.toLowerCase();
  return tracingValue && tracingValue !== "off" ? process.env.LWR_TRACING : void 0;
}
function isLambdaEnv() {
  return process.env.AWS_LAMBDA_FUNCTION_NAME !== void 0;
}
function isLocalDev() {
  return process.env.MRT_HMR === "true";
}
function isLocalPreview() {
  return process.env.LOCAL_PREVIEW_MODE === "true";
}
function isLocalAuthEnabled() {
  return process.env.AUTH_TOKEN !== void 0;
}
function buildEnvironmentContext(runtimeParams) {
  const basePath = runtimeParams.basePath;
  const locale = runtimeParams.locale;
  const assetBasePath = runtimeParams.assetBasePath;
  const uiBasePath = runtimeParams.uiBasePath;
  return {
    basePath,
    locale,
    assetBasePath,
    uiBasePath
  };
}
var REQUEST_DEPTH_HEADER = "X-SFDC-Request-Depth";
var REQUEST_DEPTH_KEY = REQUEST_DEPTH_HEADER.toLowerCase();
function parseRequestDepth(headers = {}, query = {}) {
  let maxDepth = 0;
  const value = headers && headers[REQUEST_DEPTH_KEY];
  if (value) {
    if (Array.isArray(value)) {
      for (const depth of value) {
        if (typeof depth === "string") {
          const depthValue = parseInt(depth, 10);
          if (!isNaN(depthValue) && depthValue > maxDepth) {
            maxDepth = depthValue;
          }
        }
      }
    } else if (typeof value === "string") {
      const depth = parseInt(value, 10);
      if (!isNaN(depth) && depth > maxDepth) {
        maxDepth = depth;
      }
    }
  }
  if (query[REQUEST_DEPTH_KEY]) {
    const queryValue = parseInt(query[REQUEST_DEPTH_KEY], 10);
    if (!isNaN(queryValue) && queryValue > maxDepth) {
      maxDepth = queryValue;
    }
  }
  return maxDepth;
}
