var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/shared-utils/src/bundle.ts
__markAsModule(exports);
__export(exports, {
  createAmdAlias: () => createAmdAlias,
  createBundleSigner: () => createBundleSigner,
  getGroupName: () => getGroupName,
  isGroupie: () => isGroupie,
  signBundle: () => signBundle
});
var import_identity = __toModule(require("./identity.cjs"));
function getGroupName(rawSpecifier, groupsConfig) {
  for (const [groupName, groupies] of Object.entries(groupsConfig)) {
    if (groupies.indexOf(rawSpecifier) >= 0) {
      return groupName;
    }
  }
}
function isGroupie(rawSpecifier, groupsConfig) {
  for (const groupies of Object.values(groupsConfig)) {
    if (groupies.indexOf(rawSpecifier) >= 0) {
      return true;
    }
  }
  return false;
}
function createAmdAlias(aliasSpecifier, originalSpecifier) {
  if (aliasSpecifier === originalSpecifier) {
    return "";
  }
  const builder = [];
  builder.push(`LWR.define('${aliasSpecifier}',['exports','${originalSpecifier}'],function(e,m){`);
  builder.push(`e.default=m&&'object'==typeof m&&'default'in m?m.default:m;`);
  builder.push(`Object.keys(m).forEach(function(n){'default'===n||e.hasOwnProperty(n)||Object.defineProperty(e,n,{enumerable:!0,get:function(){return m[n]}})});`);
  builder.push("});");
  return builder.join("");
}
function createBundleSigner(moduleBundler) {
  return {
    getBundleSignature: async (moduleId, runtimeEnvironment, runtimeParams, exclude) => {
      const def = await moduleBundler.getModuleBundle(moduleId, runtimeEnvironment, runtimeParams, exclude ? {exclude} : void 0);
      return signBundle(def);
    }
  };
}
function signBundle(bundleDef) {
  const integrityHash = bundleDef?.integrity ?? import_identity.LATEST_SIGNATURE;
  return integrityHash.replace(/\+/g, "-").replace(/\//g, "_").replace(/=+$/, "");
}
