var __defProp = Object.defineProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};

// packages/@lwrjs/shared-utils/src/localization.ts
__markAsModule(exports);
__export(exports, {
  getFallbackLocale: () => getFallbackLocale,
  sortLocalesByFallback: () => sortLocalesByFallback,
  walkLocaleFallbacks: () => walkLocaleFallbacks
});
function getFallbackLocale(localeId, i18n) {
  const locale = i18n.locales.find((l) => l.id === localeId);
  return locale?.fallback;
}
async function walkLocaleFallbacks(initialLocale, i18n, test) {
  const visited = new Set();
  let localeId = initialLocale;
  while (localeId && !visited.has(localeId)) {
    const result = await test(localeId);
    if (result) {
      return result;
    }
    visited.add(localeId);
    const config = i18n.locales.find((l) => l.id === localeId);
    localeId = config && config.fallback;
  }
  if (!visited.has(i18n.defaultLocale)) {
    return test(i18n.defaultLocale);
  }
  return void 0;
}
function sortLocalesByFallback(i18n) {
  const sortedLocales = [...i18n.locales];
  return sortedLocales.sort((a, b) => {
    if (a.id === i18n.defaultLocale)
      return -1;
    if (b.id === i18n.defaultLocale)
      return 1;
    if (a.fallback && !b.fallback)
      return 1;
    if (b.fallback && !a.fallback)
      return -1;
    if (a.fallback && b.id === a.fallback)
      return 1;
    if (b.fallback && a.id === b.fallback)
      return -1;
    return 0;
  });
}
