var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/shared-utils/src/serialize.ts
__markAsModule(exports);
__export(exports, {
  replaceStringFromLocation: () => replaceStringFromLocation,
  serializeModuleToJson: () => serializeModuleToJson,
  shortestTtl: () => shortestTtl
});
var import_ms = __toModule(require("ms"));
async function createJsonModule(moduleId, moduleRegistry, runtimeEnvironment, runtimeParams) {
  const {
    ownHash,
    moduleEntry: {version}
  } = await moduleRegistry.getModule(moduleId, runtimeParams);
  return {
    specifier: moduleId.specifier,
    version,
    ownHash,
    links: {
      self: await moduleRegistry.resolveModuleUri(moduleId, runtimeEnvironment, runtimeParams, ownHash)
    }
  };
}
async function serializeModuleToJson(code = "", {
  specifier,
  version,
  ownHash,
  runtimeEnvironment,
  linkedConfig: {minified},
  moduleRecord: {imports = []}
}, moduleRegistry, runtimeParams) {
  const {format} = runtimeEnvironment;
  const dependencies = imports.map((dep) => createJsonModule(dep, moduleRegistry, runtimeEnvironment, runtimeParams));
  return {
    specifier,
    version,
    ownHash,
    dependencies: await Promise.all(dependencies),
    format,
    minified,
    code
  };
}
function replaceStringFromLocation(src, {startOffset, endOffset}, replaceValue) {
  return src.substr(0, startOffset) + replaceValue + src.substr(endOffset, src.length);
}
function shortestTtl(newTtl, oldTtl, maxTtl) {
  if (newTtl === void 0 && oldTtl === void 0)
    return void 0;
  const newSeconds = typeof newTtl === "string" ? (0, import_ms.default)(newTtl) / 1e3 : newTtl;
  const oldSeconds = typeof oldTtl === "string" ? (0, import_ms.default)(oldTtl) / 1e3 : oldTtl;
  const maxSeconds = typeof maxTtl === "string" ? (0, import_ms.default)(maxTtl) / 1e3 : maxTtl;
  let shortest = void 0;
  if (newSeconds !== void 0 && (shortest === void 0 || newSeconds < shortest)) {
    shortest = newSeconds;
  }
  if (oldSeconds !== void 0 && (shortest === void 0 || oldSeconds < shortest)) {
    shortest = oldSeconds;
  }
  if (maxSeconds !== void 0 && (shortest === void 0 || maxSeconds < shortest)) {
    shortest = maxSeconds;
  }
  return shortest;
}
