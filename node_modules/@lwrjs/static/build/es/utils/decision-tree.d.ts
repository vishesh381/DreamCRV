import type { DecisionTree, I18NConfig, SiteArtifact } from '@lwrjs/types';
export interface ArtifactVariantId {
    specifier: string;
    version?: string;
    localeId?: string;
    debug?: boolean;
    ssr?: boolean;
}
export default class DecisionTreeImpl<Artifact extends SiteArtifact> implements DecisionTree<Artifact> {
    private readonly root;
    insert(siteArtifactId: string, artifact: Artifact, debug?: boolean, localeFallbacks?: Record<string, string[]>): void;
    /**
     * A method to handle deeper insertions, preserving the unique paths.
     * This will be called for each node in the decision path.
     */
    private deepInsert;
    find(siteArtifactId: string, debug?: boolean, ssr?: boolean, localeId?: string): Artifact | undefined;
    /**
     * Create a decision tree patch to look up the most appropriate bundle
     *
     * @param specifier Bundle specifier
     * @param version known version or will add the choice ''
     * @param localeId preferred bundle locale or will add '' for default locale
     * @param debug flag if debug bundle is preferred
     * @param ssr flag if server bundle is requested
     */
    private createArtifactChoices;
    /**
     * Get the choices in a consistent order for possible choices or choices for lookup
     */
    private getOrderedChoices;
    private createPossibleArtifactChoices;
}
export declare function createFallbackMap(config: I18NConfig): Record<string, string[]>;
//# sourceMappingURL=decision-tree.d.ts.map