import { logger } from '@lwrjs/diagnostics';
import { VERSION_SIGIL, explodeSpecifier, getSpecifier, isLambdaEnv } from '@lwrjs/shared-utils';
import path from 'path';
import fs from 'fs-extra';
import { LRUCache } from 'lru-cache';
import { getSiteBundleId, parseSiteId, resolveStaticBundleVersion } from '../site-metadata.js';
import { cacheCountStore } from '@lwrjs/instrumentation';
import { getTracer, BundleSpan } from '@lwrjs/instrumentation';
const BUNDLE_SOURCE_NOT_FOUND = 'Bundle Source Path Not Found';
export default class StaticBundleProvider {
    constructor(config, context) {
        this.name = 'static-bundle-provider';
        if (!context.siteMetadata) {
            throw new Error(`[${this.name}] Site metadata was not found`);
        }
        this.siteMetadata = context.siteMetadata;
        this.siteRootDir = context.siteMetadata.getSiteRootDir();
        this.bundleConfig = context.config.bundleConfig;
        this.i18n = context.config.i18n;
        this.bundleCacheSize = config.bundleCacheSize ?? parseInt(process.env.BUNDLE_CACHE_SIZE ?? '500', 10);
        if (this.bundleCacheSize > 0) {
            this.codeCache = new LRUCache({
                max: this.bundleCacheSize,
                dispose: (_value, key) => {
                    if (isLambdaEnv()) {
                        logger.warn(`Bundle Code evicted from cache ${key}`);
                    }
                    else {
                        logger.verbose(`Bundle Code evicted from cache ${key}`);
                    }
                },
            });
        }
    }
    async bundle(moduleId, runtimeEnvironment, runtimeParams) {
        const { specifier, name, namespace, version } = moduleId;
        const { debug, i18n: { defaultLocale }, } = runtimeEnvironment;
        const localeId = (runtimeParams?.locale || defaultLocale);
        const ssr = runtimeParams?.ssr;
        const metadata = this.getBundleMetadata({ moduleId, localeId, debug, ssr });
        if (!metadata) {
            return undefined;
        }
        // Default bundle source path
        const bundlePath = path.join(this.siteRootDir, metadata.path);
        // Get the associated bundle source code
        const resolvedBundlePath = this.getCodePath(bundlePath, debug, specifier, version, localeId, ssr);
        const codePromiser = this.getCodePromiser(resolvedBundlePath, {
            specifier,
            version,
            locale: localeId,
            ssr,
            debug,
        });
        const imports = metadata.imports.map((importSpecifier) => this.getModuleReference(importSpecifier, localeId, debug, false));
        const dynamicImports = metadata.dynamicImports?.map((importSpecifier) => this.getModuleReference(importSpecifier, localeId, debug, false));
        const id = getSpecifier(moduleId);
        const exploded = explodeSpecifier(id);
        // Seem unlikely name was not in the moduleId but just incase set it form the exploded id
        const resolvedName = name ?? exploded.name;
        const resolvedNamespace = namespace ?? exploded.namespace;
        const resolvedVersion = resolveStaticBundleVersion(metadata.version, version);
        const includedModules = metadata.includedModules?.map((includedId) => {
            const includedModule = this.getModuleReference(includedId, localeId, debug, ssr);
            return getSpecifier(includedModule);
        }) || [];
        return {
            getCode: codePromiser,
            id: getSpecifier({
                specifier: specifier,
                version: resolvedVersion,
                name: resolvedName,
                namespace: resolvedNamespace,
            }),
            name: resolvedName,
            namespace: resolvedNamespace,
            version: resolvedVersion,
            specifier: specifier,
            config: this.bundleConfig,
            integrity: metadata.integrity,
            bundleRecord: {
                // TODO we need to solve include modules for fingerprints support
                includedModules,
                imports,
                dynamicImports,
            },
            src: bundlePath,
        };
    }
    getBundleMetadata({ moduleId, localeId, debug, ssr, }) {
        const siteBundleId = getSiteBundleId(moduleId, localeId, ssr, this.i18n);
        return this.siteMetadata.getSiteBundlesDecisionTree().find(siteBundleId, debug);
    }
    /**
     * Takes a key from the site bundle metadata and creates an appropriate runtime BaseModuleReference to use in the LWR runtime.
     */
    getModuleReference(siteBundleIdStr, localeId, debug, ssr) {
        const siteBundleId = parseSiteId(siteBundleIdStr);
        const includedModule = explodeSpecifier(siteBundleId.specifier);
        if (!siteBundleId.variants[VERSION_SIGIL]) {
            const importBundleMetadata = this.siteMetadata
                .getSiteBundlesDecisionTree()
                .find(siteBundleIdStr, debug, ssr, localeId);
            includedModule.version = resolveStaticBundleVersion(importBundleMetadata?.version);
        }
        else {
            includedModule.version = siteBundleId.variants[VERSION_SIGIL];
        }
        return includedModule;
    }
    getCodePromiser(bundleSourcePath, { specifier, version, locale, ssr, debug, }) {
        const cache = this.codeCache;
        return async () => {
            let code = cache?.get(bundleSourcePath);
            if (!code) {
                try {
                    // Debug metadata was not found
                    if (bundleSourcePath === BUNDLE_SOURCE_NOT_FOUND) {
                        throw new Error(BUNDLE_SOURCE_NOT_FOUND);
                    }
                    // Increment the cache count store
                    cacheCountStore.incrementCacheKey('missedReads');
                    await getTracer().trace({
                        name: BundleSpan.ReadBundle,
                        attributes: {
                            specifier,
                            version: version ?? '',
                            locale,
                            ssr: ssr ? 'TRUE' : 'FALSE',
                            debug: debug ? 'TRUE' : 'FALSE',
                            bundleSourcePath,
                        },
                    }, async () => {
                        code = await fs.readFile(path.join(bundleSourcePath), 'utf-8');
                        if (cache) {
                            cache.set(bundleSourcePath, code);
                        }
                    });
                }
                catch (err) {
                    // Ran it an un-expected error reading the bundle source code
                    logger.warn({
                        label: 'static-bundle-provider',
                        message: `Unexpected code reference: ${specifier} ${bundleSourcePath}`,
                    }, err);
                    // Returning source code that throws and error is someone tries to evaluate it
                    code = `throw new Error('Unexpected code reference: ${specifier} ${bundleSourcePath}');`;
                    if (cache) {
                        cache.set(bundleSourcePath, code);
                    }
                }
            }
            return code;
        };
    }
    /**
     * Get the local source code path for the a static bundle
     * If we are running in a lambda and the mode is debug we will return the prod source code instead of the debug source code
     *
     * @param bundlePath The default path for the bundle for prod read from .metadata/bundle-metadata.json, for debug .metadata/bundle-metadata-debug.json
     * @param debug Is the request in debug mode?
     * @param specifier Root specifier for the requested bundle
     * @param version Root specifier version
     * @param localeId Locale id (e.g. en-US) for the current request
     * @param ssr True if this is a server bundle
     */
    getCodePath(bundlePath, debug, specifier, version, localeId, ssr) {
        // Flag is used to indicate that we are running on a lambda
        const isLambda = isLambdaEnv();
        // Default source code path determined from metadata based on debug mode
        let bundleSourcePath = bundlePath;
        // This is the special case where the request is in debug mode and we are on the lambda
        // So we will look up the prod source code instead of the debug source code
        if (debug && isLambda) {
            const metadata = this.getBundleMetadata({
                moduleId: { specifier, version },
                localeId,
                debug: false,
                ssr,
            });
            if (!metadata) {
                // We did not find the bundle prod bundle even though we did find it in the debug metadata before
                logger.error({
                    label: 'static-bundle-provider',
                    message: `Unexpected code reference: ${specifier}`,
                });
                return BUNDLE_SOURCE_NOT_FOUND;
            }
            // Overwrite the default source code path the prod source code path
            bundleSourcePath = path.join(this.siteRootDir, metadata.path);
        }
        return bundleSourcePath;
    }
}
//# sourceMappingURL=static-bundle-provider.js.map