import { logger } from '@lwrjs/diagnostics';
import { mimeLookup } from '@lwrjs/shared-utils';
import path from 'path';
import fs from 'fs-extra';
import { getSiteResourceId } from '../site-metadata.js';
export default class StaticResourceProvider {
    constructor(_config, context) {
        this.name = 'static-resource-provider';
        if (!context.siteMetadata) {
            throw new Error(`[${this.name}] Site metadata was not found`);
        }
        this.resourceRegistry = context.resourceRegistry;
        this.siteRootDir = context.siteMetadata.getSiteRootDir();
        this.siteMetadata = context.siteMetadata;
    }
    async getResource(resourceIdentity, runtimeEnvironment, runtimeParams) {
        const { debug } = runtimeEnvironment;
        // HACK: this code is tricky because resource IDs are different between prod vs debug ("lwr-loader-shim.bundle.min.js" vs "lwr-loader-shim.bundle.js").
        // 1. In debug mode on Lambda (during SSR), we need to ignore runtimeEnvironment.debug because we will always ask for the prod version (lwr-loader-shim.bundle.min.js)
        // 2. But when we generate the view, we can't ignore runtimeEnvironment.debug because we need the debug version of the loader shim (lwr-loader-shim.bundle.js)
        const { ignoreDebug } = runtimeParams;
        const resourceMetadata = this.siteMetadata
            .getSiteResourcesDecisionTree()
            .find(getSiteResourceId(resourceIdentity), debug && !ignoreDebug);
        if (!resourceMetadata) {
            logger.warn({
                label: `${this.name}`,
                message: `Did not find requested specifier ${resourceIdentity.specifier}`,
            });
            return undefined;
        }
        const resourcePath = path.join(this.siteRootDir, resourceMetadata.path);
        // Figure out mime type
        const type = resourceMetadata.mimeType ||
            mimeLookup(resourcePath) ||
            'application/javascript';
        return {
            type,
            stream: () => {
                logger.debug({
                    label: `${this.name}`,
                    message: `Resource read from lambda ${resourceIdentity.specifier}`,
                });
                return fs.createReadStream(resourcePath);
            },
            src: resourcePath,
            inline: resourceMetadata.inline,
            integrity: resourceMetadata.integrity,
            entry: path.resolve(resourcePath),
        };
    }
}
//# sourceMappingURL=static-resource-provider.js.map