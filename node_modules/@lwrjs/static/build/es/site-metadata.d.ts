import type { AbstractModuleId, I18NConfig, ResourceIdentifier, SiteAssets, SiteBundle, SiteBundles, SiteMetadata, SiteResource, SiteResources } from '@lwrjs/types';
import DecisionTree from './utils/decision-tree.js';
import { LOCALE_SIGIL, SSR_SIGIL, VERSION_SIGIL } from '@lwrjs/shared-utils';
type Options = {
    rootDir: string;
    i18n: I18NConfig;
};
export declare const SITE_VERSION_PREFIX: string;
export declare const SITE_LOCALE_PREFIX: string;
export declare const SITE_SSR_PREFIX: string;
type SIGIL = typeof VERSION_SIGIL | typeof SSR_SIGIL | typeof LOCALE_SIGIL;
interface SiteArtifactId {
    specifier: string;
    variants: Record<SIGIL, string>;
}
export declare class SiteMetadataImpl implements SiteMetadata {
    private options;
    private siteBundles;
    private debugSiteBundles;
    private siteResources;
    private debugSiteResources;
    private siteAssets;
    private bundleDecisionTree?;
    private resourceDecisionTree?;
    constructor(options: Options);
    getSiteRootDir(): string;
    getSiteBundles(): SiteBundles;
    getDebugSiteBundles(): SiteBundles;
    getSiteResources(): SiteResources;
    getDebugSiteResources(): SiteResources;
    getSiteAssets(): SiteAssets;
    /**
     * Returns a decision tree for site bundles in the form [debug, specifier, version, locale].
     * It is assumed this is static after creation subsequent calls will return the same instance.
     */
    getSiteBundlesDecisionTree(): DecisionTree<SiteBundle>;
    /**
     * Returns a decision tree for site resources.
     * It is assumed this is static after creation subsequent calls will return the same instance.
     */
    getSiteResourcesDecisionTree(): DecisionTree<SiteResource>;
    persistSiteMetadata(): Promise<void>;
    private readStaticBundleMetadata;
    /**
     * Read the metadata about the pre-built resources of the current site.
     */
    private readStaticResourceMetadata;
    /**
     * Read the metadata about the pre-built assets of the current site.
     */
    private readStaticAssetsMetadata;
}
/**
 * Return the version for a static module bundle.
 *
 * Version defined in the metadata > Requested Version > 'version-not-provided'
 */
export declare function resolveStaticBundleVersion(metadataVersion?: string, requestedVersion?: string): string;
/**
 * Parse a site artifact ids string in the form specifier(|sigil(/value)?)*
 */
export declare function parseSiteId(input: string): SiteArtifactId;
/**
 * Get a  Site Bundle Identifier from a Root Module
 *
 * @param moduleId - Root Module Id
 * @param locale - Current locale
 * @param ssr - Component variant is required for SSR
 * @returns Site Bundle Identifier
 */
export declare function getSiteBundleId({ specifier, namespace, name, version }: Partial<AbstractModuleId>, locale?: string, ssr?: boolean, i18n?: I18NConfig): string;
/**
 * Get a  Site Resource Identifier from a Resource Identifier
 *
 * @param resourceID -Resource Identifier
 * @returns Site Bundle Identifier
 */
export declare function getSiteResourceId({ specifier, version }: Partial<ResourceIdentifier>): string;
export {};
//# sourceMappingURL=site-metadata.d.ts.map