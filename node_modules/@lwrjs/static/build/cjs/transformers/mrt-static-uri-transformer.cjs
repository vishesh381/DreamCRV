var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/static/src/transformers/mrt-static-uri-transformer.ts
__markAsModule(exports);
__export(exports, {
  default: () => mrtStaticUriTransformer
});
var import_diagnostics = __toModule(require("@lwrjs/diagnostics"));
var import_shared_utils = __toModule(require("@lwrjs/shared-utils"));
function mrtStaticUriTransformer() {
  return {
    name: "mrt-static-uri-transformer",
    async transformUri(uriDef, _def, runtimeEnvironment) {
      if (uriDef.artifactType === "asset" && runtimeEnvironment?.featureFlags?.ASSETS_ON_LAMBDA) {
        import_diagnostics.logger.debug({
          label: `${this.name}`,
          message: `uri not transformed ${uriDef.entry} -> ${uriDef.uri}`
        });
        return {
          ...uriDef,
          external: false
        };
      }
      let basePathlessUri = uriDef.uri;
      if (runtimeEnvironment?.basePath) {
        basePathlessUri = uriDef.uri.replace(runtimeEnvironment?.basePath, "");
      }
      const uri = (0, import_shared_utils.getMrtArtifactUrl)(runtimeEnvironment?.basePath || "", basePathlessUri);
      import_diagnostics.logger.debug({
        label: `${this.name}`,
        message: `normalized ${uriDef.artifactType} url ${uriDef.entry} -> ${uri}`
      });
      return {
        ...uriDef,
        uri,
        immutable: true,
        external: true
      };
    }
  };
}
