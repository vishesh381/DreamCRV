var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/static/src/utils/decision-tree.ts
__markAsModule(exports);
__export(exports, {
  createFallbackMap: () => createFallbackMap,
  default: () => decision_tree_default
});
var import_diagnostics = __toModule(require("@lwrjs/diagnostics"));
var import_shared_utils = __toModule(require("@lwrjs/shared-utils"));
var import_site_metadata = __toModule(require("../site-metadata.cjs"));
var CHOICE_WILDCARD = "*";
var CHOICE_EMPTY = "";
var CHOICE_TRUE = "true";
var CHOICE_PROD = "prod";
var CHOICE_DEBUG = "debug";
var DecisionTreeImpl = class {
  constructor() {
    this.root = new TreeNode();
  }
  insert(siteArtifactId, artifact, debug, localeFallbacks) {
    const decisionPath = this.createPossibleArtifactChoices({
      id: siteArtifactId,
      localeFallbacks,
      debug
    });
    const choices = decisionPath[0];
    const isLeaf = decisionPath.length == 1;
    for (const [index, key] of choices.entries()) {
      const rank = [index];
      if (!this.root.getChild(key, false)) {
        this.root.addChild(key, new TreeNode(key, ""));
      }
      const nextNode = this.root.getChild(key, false);
      if (isLeaf) {
        nextNode.setArtifact(artifact, rank);
      } else {
        this.deepInsert(1, decisionPath, key, nextNode, artifact, rank);
      }
    }
  }
  deepInsert(level, decisionPath, currentPath, currentNode, artifact, rank) {
    if (level >= decisionPath.length)
      return;
    const choices = decisionPath[level];
    const isLeaf = level === decisionPath.length - 1;
    for (const [index, key] of choices.entries()) {
      const nextRank = [...rank, index];
      if (!currentNode.getChild(key, false)) {
        currentNode.addChild(key, new TreeNode(key, currentPath));
      }
      const nextNode = currentNode.getChild(key, false);
      if (isLeaf) {
        nextNode.setArtifact(artifact, nextRank);
      } else {
        this.deepInsert(level + 1, decisionPath, `${currentPath}/${key}`, nextNode, artifact, nextRank);
      }
    }
  }
  find(siteArtifactId, debug, ssr, localeId) {
    const parsedArtifactId = (0, import_site_metadata.parseSiteId)(siteArtifactId);
    const decisionPath = this.createArtifactChoices({
      specifier: parsedArtifactId.specifier,
      version: parsedArtifactId.variants[import_shared_utils.VERSION_SIGIL],
      ssr: ssr ?? import_shared_utils.SSR_SIGIL in parsedArtifactId.variants,
      localeId: localeId ?? parsedArtifactId.variants[import_shared_utils.LOCALE_SIGIL],
      debug
    });
    let currentNode = this.root;
    for (const key of decisionPath) {
      const lastPath = currentNode.getPath();
      currentNode = currentNode.getChild(key);
      if (!currentNode) {
        import_diagnostics.logger.debug(`Module ${key} not found at ${lastPath}`);
        return void 0;
      }
    }
    if (!currentNode.artifact) {
      import_diagnostics.logger.debug(`Artifact not found at ${currentNode.getPath()}`);
    }
    return currentNode.artifact;
  }
  createArtifactChoices({specifier, version, localeId, debug, ssr}) {
    const envChoice = debug ? CHOICE_DEBUG : CHOICE_PROD;
    const versionChoice = getVersionChoice(version);
    const uriVersion = (0, import_shared_utils.normalizeVersionToUri)(versionChoice);
    const ssrChoice = ssr ? CHOICE_TRUE : CHOICE_EMPTY;
    return this.getOrderedChoices(specifier, envChoice, ssrChoice, uriVersion, localeId);
  }
  getOrderedChoices(specifier, envChoice, ssrChoice, uriVersion, localeId) {
    return [specifier, envChoice, ssrChoice, uriVersion, localeId || CHOICE_WILDCARD];
  }
  createPossibleArtifactChoices({
    id,
    localeFallbacks,
    debug
  }) {
    const match = (0, import_site_metadata.parseSiteId)(id);
    const specifier = match.specifier;
    if (!specifier) {
      throw new Error(`Unable to parse${debug ? " debug" : ""} static bundle specifier: ${id}`);
    }
    const versionChoice = getVersionChoice(match.variants[import_shared_utils.VERSION_SIGIL]);
    const versions = versionChoice === CHOICE_EMPTY ? [...new Set([CHOICE_EMPTY, CHOICE_WILDCARD])] : [...new Set([versionChoice, CHOICE_EMPTY])];
    const envChoice = debug ? [CHOICE_DEBUG] : [CHOICE_PROD];
    const ssrChoice = match.variants[import_shared_utils.SSR_SIGIL] || CHOICE_EMPTY;
    const ssr = (0, import_shared_utils.getFeatureFlags)().SSR_COMPILER_ENABLED ? [ssrChoice] : ssrChoice ? [ssrChoice, CHOICE_WILDCARD] : [CHOICE_WILDCARD];
    const localeChoice = match.variants[import_shared_utils.LOCALE_SIGIL];
    const localeId = localeFallbacks?.[localeChoice] ?? [CHOICE_WILDCARD];
    return this.getOrderedChoices([specifier], envChoice, ssr, versions, localeId);
  }
};
var decision_tree_default = DecisionTreeImpl;
var TreeNode = class {
  constructor(value = "", parentPath = "") {
    this.children = new Map();
    this.artifact = void 0;
    this.decisionValue = value;
    this.parentPath = parentPath;
  }
  addChild(value, node) {
    this.children.set(value, node);
  }
  setArtifact(artifact, rank) {
    if (this.artifact && isLowerOrEqualRank(rank, this.rank)) {
      import_diagnostics.logger.debug({
        label: "DecisionTree",
        message: `Ignored Artifact ${this.getPath()} ${this.rank} <= ${rank}`
      });
      return;
    }
    import_diagnostics.logger.debug({
      label: "DecisionTree",
      message: `Added artifact at ${this.getPath()}`
    });
    this.rank = rank;
    this.artifact = artifact;
  }
  getChild(key, allowWildcard = true) {
    return allowWildcard ? this.children.get(key) || this.children.get(CHOICE_WILDCARD) : this.children.get(key);
  }
  getPath() {
    return this.parentPath ? this.parentPath + "|" + this.decisionValue : this.decisionValue;
  }
};
function isLowerOrEqualRank(contender, existing) {
  if (!existing) {
    return true;
  }
  if (existing.length !== contender.length) {
    throw new Error(`Paths must be of the same length ${existing} not found at ${contender}`);
  }
  for (let i = 0; i < existing.length; i++) {
    if (contender[i] > existing[i]) {
      return true;
    } else if (contender[i] < existing[i]) {
      return false;
    }
  }
  return true;
}
function getVersionChoice(version) {
  if (!version || version === import_shared_utils.VERSION_NOT_PROVIDED) {
    return CHOICE_EMPTY;
  }
  return (0, import_shared_utils.normalizeVersionToUri)(version);
}
function createFallbackMap(config) {
  const map = {};
  function findFallbacks(localeId, visited = new Set()) {
    if (visited.has(localeId) || localeId === config.defaultLocale) {
      return [];
    }
    visited.add(localeId);
    const locale = config.locales.find((l) => l.id === localeId);
    if (!locale || !locale.fallback) {
      return [localeId];
    }
    return [localeId, ...findFallbacks(locale.fallback, visited)];
  }
  config.locales.forEach((locale) => {
    if (locale.id !== config.defaultLocale) {
      map[locale.id] = [...new Set([...findFallbacks(locale.id)])];
    }
  });
  map[CHOICE_WILDCARD] = [CHOICE_WILDCARD];
  return map;
}
