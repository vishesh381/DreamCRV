var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/static/src/tools/dedupe-bundles.ts
__markAsModule(exports);
__export(exports, {
  dedupeBundles: () => dedupeBundles
});
var import_fs_extra = __toModule(require("fs-extra"));
var import_path = __toModule(require("path"));
var import_diagnostics = __toModule(require("@lwrjs/diagnostics"));
var import_site_metadata = __toModule(require("../site-metadata.cjs"));
var import_shared_utils = __toModule(require("@lwrjs/shared-utils"));
async function dedupeBundles(rootDir, i18n) {
  const siteMetadata = new import_site_metadata.SiteMetadataImpl({
    rootDir,
    i18n
  });
  const siteBundles = siteMetadata.getSiteBundles();
  const decisionTree = siteMetadata.getSiteBundlesDecisionTree();
  import_diagnostics.logger.info({
    label: `dedupeBundles`,
    message: `Deduplicating ${Object.keys(siteBundles.bundles).length} bundles`
  });
  for (const [siteIdStr, metadata] of Object.entries(siteBundles.bundles)) {
    const siteId = (0, import_site_metadata.parseSiteId)(siteIdStr);
    const localeId = siteId.variants[import_shared_utils.LOCALE_SIGIL];
    if (!localeId || localeId === i18n.defaultLocale) {
      continue;
    }
    const currentPath = import_path.default.join(rootDir, metadata.path);
    const currentSrc = import_fs_extra.default.readFileSync(currentPath);
    import_diagnostics.logger.debug({
      label: `dedupeBundles`,
      message: `${siteIdStr} -> ${(0, import_shared_utils.hashContent)(currentSrc)}`
    });
    const locale = i18n.locales.find((l) => l.id === localeId);
    const fallBackLocale = locale?.fallback ?? i18n.defaultLocale;
    const fallbackMetadata = decisionTree.find(siteIdStr, false, false, fallBackLocale);
    if (fallbackMetadata) {
      const fallbackSrc = import_fs_extra.default.readFileSync(import_path.default.join(rootDir, fallbackMetadata.path));
      import_diagnostics.logger.debug({
        label: `dedupeBundles`,
        message: `fallback ${siteIdStr},${fallBackLocale} -> ${(0, import_shared_utils.hashContent)(fallbackSrc)}`
      });
      if (currentSrc.equals(fallbackSrc)) {
        import_diagnostics.logger.debug({
          label: `dedupeBundles`,
          message: `Remove duplicate variant ${siteIdStr}`
        });
        delete siteBundles.bundles[siteIdStr];
        if (metadata.path != fallbackMetadata.path) {
          import_fs_extra.default.removeSync(currentPath);
        }
      }
    }
  }
  import_diagnostics.logger.info({
    label: `dedupeBundles`,
    message: `Deduplicated down to ${Object.keys(siteBundles.bundles).length} bundles`
  });
  await siteMetadata.persistSiteMetadata();
  deleteEmptyFolders(rootDir);
}
function deleteEmptyFolders(directory) {
  if (!import_fs_extra.default.existsSync(directory)) {
    import_diagnostics.logger.warn({label: `dedupeBundles`, message: `Directory does not exist: ${directory}`});
    return;
  }
  const files = import_fs_extra.default.readdirSync(directory);
  if (files.length === 0) {
    import_fs_extra.default.rmdirSync(directory);
    import_diagnostics.logger.debug({label: `dedupeBundles`, message: `Deleted empty folder: ${directory}`});
    return;
  }
  files.forEach((file) => {
    const filePath = import_path.default.join(directory, file);
    const isDirectory = import_fs_extra.default.statSync(filePath).isDirectory();
    if (isDirectory) {
      deleteEmptyFolders(filePath);
    }
  });
  const updatedFiles = import_fs_extra.default.readdirSync(directory);
  if (updatedFiles.length === 0) {
    import_fs_extra.default.rmdirSync(directory);
    import_diagnostics.logger.debug({label: `dedupeBundles`, message: `Deleted empty folder: ${directory}`});
  }
}
