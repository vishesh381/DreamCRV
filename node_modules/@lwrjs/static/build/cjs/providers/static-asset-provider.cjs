var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/static/src/providers/static-asset-provider.ts
__markAsModule(exports);
__export(exports, {
  default: () => static_asset_provider_default
});
var import_diagnostics = __toModule(require("@lwrjs/diagnostics"));
var import_shared_utils = __toModule(require("@lwrjs/shared-utils"));
var import_path = __toModule(require("path"));
var import_fs_extra = __toModule(require("fs-extra"));
var StaticAssetProvider = class {
  constructor(_config, context) {
    this.name = "static-asset-provider";
    if (!context.siteMetadata) {
      throw new Error(`[${this.name}] Site metadata was not found`);
    }
    const {assets, rootDir, layoutsDir, contentDir} = context.config;
    this.siteAssets = context.siteMetadata.getSiteAssets();
    this.siteRootDir = context.siteMetadata.getSiteRootDir();
    this.basePath = context.runtimeEnvironment.basePath;
    this.assetsOnLambda = !!context.runtimeEnvironment.featureFlags?.ASSETS_ON_LAMBDA;
    const ssgAssets = Array.from(assets, (asset) => {
      if (asset.dir) {
        return {
          ...asset,
          dir: asset.urlPath
        };
      }
      return asset;
    });
    this.resourcePaths = {assets: ssgAssets, rootDir, layoutsDir, contentDir};
  }
  async getAsset(assetIdentifier) {
    const fileAssetPath = this.normalizeSpecifier(assetIdentifier, this.resourcePaths);
    const metadata = this.siteAssets.assets[fileAssetPath];
    if (!metadata) {
      if (import_path.default.dirname(fileAssetPath) !== (this.basePath ? this.basePath : "/")) {
        import_diagnostics.logger.warn({
          label: `${this.name}`,
          message: `Did not find requested specifier ${fileAssetPath}`
        });
      }
      return void 0;
    }
    const siteAssetPath = import_path.default.join(this.siteRootDir, metadata.path);
    const mime = metadata.mimeType || (0, import_shared_utils.mimeLookup)(siteAssetPath);
    const ext = import_path.default.extname(`x.${siteAssetPath}`).toLowerCase().substring(1);
    const type = this.assetsOnLambda ? "asset" : "external";
    const content = function(encoding) {
      return import_fs_extra.default.readFileSync(siteAssetPath, encoding);
    };
    const uri = this.assetsOnLambda ? fileAssetPath : import_path.default.join(this.siteRootDir, fileAssetPath);
    import_diagnostics.logger.debug({label: `${this.name}`, message: `uri ${assetIdentifier.specifier} -> ${uri}`});
    return {
      entry: siteAssetPath,
      ext,
      mime,
      ownHash: (0, import_shared_utils.hashContent)(metadata.path),
      content,
      uri,
      type,
      noTransform: true
    };
  }
  normalizeSpecifier(assetId, resourcePaths) {
    const {specifier} = assetId;
    let normalizedSpecifier = specifier;
    if (normalizedSpecifier.includes("?")) {
      import_diagnostics.logger.debug({
        label: `${this.name}`,
        message: `Removed query param from asset specifier: ${specifier}`
      });
      normalizedSpecifier = normalizedSpecifier.split("?")[0];
    }
    if (normalizedSpecifier[0] === "$") {
      return (0, import_shared_utils.normalizeResourcePath)(normalizedSpecifier, resourcePaths);
    }
    return normalizedSpecifier;
  }
};
var static_asset_provider_default = StaticAssetProvider;
