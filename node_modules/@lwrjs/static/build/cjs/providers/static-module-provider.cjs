var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/static/src/providers/static-module-provider.ts
__markAsModule(exports);
__export(exports, {
  default: () => static_module_provider_default
});
var import_diagnostics = __toModule(require("@lwrjs/diagnostics"));
var import_shared_utils = __toModule(require("@lwrjs/shared-utils"));
var import_path = __toModule(require("path"));
var import_site_metadata = __toModule(require("../site-metadata.cjs"));
var StaticModuleProvider = class {
  constructor(_config, context) {
    this.name = "static-module-provider";
    if (!context.siteMetadata) {
      throw new Error(`[${this.name}] Site metadata was not found`);
    }
    this.externals = Object.keys(context.config.bundleConfig.external || {});
    this.siteRootDir = context.siteMetadata.getSiteRootDir();
    this.i18n = context.config.i18n;
    this.siteMetadata = context.siteMetadata;
    this.fingerprintIndex = buildFingerprintsIndex(context);
  }
  async getModule(moduleId, runtimeParams) {
    const localeId = runtimeParams?.locale || this.i18n.defaultLocale;
    const ssr = runtimeParams?.ssr;
    const metadata = this.getBundleMetadata({moduleId, localeId, debug: false, ssr});
    if (metadata && (0, import_shared_utils.isLambdaEnv)()) {
      import_diagnostics.logger.warn({
        label: `${this.name}`,
        message: `We should not be asking for module source we have in our site metadata: ${moduleId.specifier}`
      });
      return void 0;
    }
    return void 0;
  }
  async getModuleEntry(moduleId, runtimeParams) {
    const {specifier, version} = moduleId;
    const localeId = runtimeParams?.locale || this.i18n.defaultLocale;
    const ssr = runtimeParams?.ssr;
    const metadata = this.getBundleMetadata({moduleId, localeId, ssr, debug: false});
    if (metadata) {
      import_diagnostics.logger.debug({
        label: `${this.name}`,
        message: `Module Entry request for static bundle ${specifier}`
      });
      const bundlePath = import_path.default.join(this.siteRootDir, metadata.path);
      const resolvedVersion = (0, import_site_metadata.resolveStaticBundleVersion)(metadata.version, version);
      return {
        id: (0, import_shared_utils.getSpecifier)({...moduleId, version: resolvedVersion}),
        version: resolvedVersion,
        specifier,
        entry: "entry-not-provided",
        src: bundlePath
      };
    } else if (this.externals.includes(specifier)) {
      const resolvedVersion = (0, import_site_metadata.resolveStaticBundleVersion)(void 0, version);
      return {
        id: (0, import_shared_utils.getSpecifier)({...moduleId, version: resolvedVersion}),
        version: resolvedVersion,
        specifier,
        entry: "entry-not-provided"
      };
    }
    return this.getEntryFromFingerprintIndex(moduleId);
  }
  getEntryFromFingerprintIndex(moduleId) {
    const versionedSpecifier = (0, import_shared_utils.getSpecifier)(moduleId);
    return this.fingerprintIndex[versionedSpecifier] || this.fingerprintIndex[moduleId.specifier];
  }
  getBundleMetadata({
    moduleId,
    localeId,
    debug,
    ssr
  }) {
    const siteBundleId = (0, import_site_metadata.getSiteBundleId)(moduleId, localeId, ssr, this.i18n);
    return this.siteMetadata.getSiteBundlesDecisionTree().find(siteBundleId, debug);
  }
};
var static_module_provider_default = StaticModuleProvider;
function buildFingerprintsIndex(context) {
  const fingerprintIndex = {};
  if (!context.runtimeEnvironment.featureFlags.LEGACY_LOADER) {
    const bundles = context.siteMetadata?.getSiteBundles().bundles || {};
    for (const bundle of Object.values(bundles)) {
      const bundlePath = import_path.default.join(String(context.siteMetadata?.getSiteRootDir()), bundle.path);
      const includedModules = bundle.includedModules || [];
      for (const includedModule of includedModules) {
        const versionedSpecifier = convertSiteIdToVersionedSpecifier(includedModule);
        const moduleId = (0, import_shared_utils.explodeSpecifier)(versionedSpecifier);
        if (!fingerprintIndex[versionedSpecifier]) {
          fingerprintIndex[versionedSpecifier] = {
            id: versionedSpecifier,
            version: (0, import_site_metadata.resolveStaticBundleVersion)(moduleId.version),
            specifier: moduleId.specifier,
            entry: "entry-not-provided",
            src: bundlePath
          };
        }
        if (!fingerprintIndex[moduleId.specifier]) {
          fingerprintIndex[moduleId.specifier] = {
            id: moduleId.specifier,
            version: (0, import_site_metadata.resolveStaticBundleVersion)(moduleId.version),
            specifier: moduleId.specifier,
            entry: "entry-not-provided",
            src: bundlePath
          };
        }
      }
    }
  }
  return fingerprintIndex;
}
function convertSiteIdToVersionedSpecifier(siteId) {
  const parsedSiteId = (0, import_site_metadata.parseSiteId)(siteId);
  return (0, import_shared_utils.getSpecifier)({specifier: parsedSiteId.specifier, version: parsedSiteId.variants[import_shared_utils.VERSION_SIGIL]});
}
