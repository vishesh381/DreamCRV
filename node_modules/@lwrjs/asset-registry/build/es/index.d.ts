import type { AssetDefinition, AssetIdentifier, AssetProvider, AssetRegistry, AssetSource, AssetTransformPlugin, UriDefinition, LwrAppEmitter, LwrAppObserver, NormalizedLwrGlobalConfig, PublicAssetRegistry, ResourcePaths, RuntimeEnvironment, UriTransformPlugin } from '@lwrjs/types';
interface RegistryContext {
    appObserver: LwrAppObserver;
    appEmitter: LwrAppEmitter;
    runtimeEnvironment: RuntimeEnvironment;
}
export declare class LwrAssetRegistry implements AssetRegistry {
    name: string;
    providers: AssetProvider[];
    transformers: AssetTransformPlugin[];
    resourcePaths: ResourcePaths;
    cacheDir: string;
    _memoizeResolveUri: Function;
    constructor(context: RegistryContext, lwrGlobalConfig: NormalizedLwrGlobalConfig);
    delegateGetAsset(assetIdentifier: AssetIdentifier): Promise<AssetSource>;
    addAssetProviders(providers: AssetProvider[]): void;
    addAssetTransformers(transformers: (AssetTransformPlugin | UriTransformPlugin)[]): void;
    getAsset<T extends AssetIdentifier, R extends RuntimeEnvironment>(assetId: T, runtimeEnvironment: R, includeMetadata?: boolean): Promise<AssetDefinition>;
    private getHashedAssetPath;
    getAssetDefinition(assetSource: AssetSource, runtimeEnvironment: RuntimeEnvironment): Promise<AssetDefinition>;
    resolveAssetUri<M extends AssetIdentifier, R extends RuntimeEnvironment>(assetId: M, runtimeEnvironment: R): Promise<UriDefinition>;
    private resolveAssetUriWithoutLinking;
    getUriFromAsset(assetDef: AssetDefinition, runtimeEnvironment: RuntimeEnvironment): Promise<UriDefinition>;
    getPublicApi(): PublicAssetRegistry;
    private validateSpecifier;
}
export {};
//# sourceMappingURL=index.d.ts.map