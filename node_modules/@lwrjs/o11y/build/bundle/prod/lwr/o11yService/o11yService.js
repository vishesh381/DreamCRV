import{getInstrumentation as t}from"o11y/client";import{MODULE_DEFINE as e,MODULE_DYNAMIC_LOAD as n,MODULE_DEFINE_COUNT as r,MODULE_DYNAMIC_LOAD_COUNT as i,BOOTSTRAP_END as s,BOOTSTRAP_DURATION as a,MODULE_FETCH as o,MODULE_FETCH_DURATION as c,MAPPINGS_FETCH as m,MAPPINGS_FETCH_DURATION as h,INIT as l,INIT_MODULE as u,ROUTER_NAV as f,ROUTER_VIEW as k,INIT_DURATION as g,INIT_MODULE_DURATION as p,ROUTER_NAV_DURATION as y,ROUTER_VIEW_DURATION as b,BOOTSTRAP_ERROR as T,BOOTSTRAP_ERROR_COUNT as d,INIT_MODULE_COUNT as E,MODULE_FETCH_COUNT as W,MODULE_ERROR as v,MODULE_ERROR_COUNT as M,MAPPINGS_FETCH_COUNT as O,MAPPINGS_ERROR as w,MAPPINGS_ERROR_COUNT as C,ROUTER_NAV_COUNT as V,ROUTER_ERROR as j,ROUTER_ERROR_COUNT as x}from"lwr/metrics";const B=[n,o,m,l,u,f,k],F={[l]:g,[u]:p,[f]:y,[k]:b},L=Object.keys(F),P={[T]:d,[u]:E,[e]:r,[o]:W,[v]:M,[n]:i,[m]:O,[w]:C,[f]:V,[j]:x},R=Object.keys(P);class q{constructor(t,e){this.config=e||{},this.instrumentation=t}track(){this.trackExistingMarks(),this.setupObserver()}trackExistingMarks(){const t=performance.getEntriesByType("mark").filter((t=>t.name.startsWith(e))),s=performance.getEntriesByType("mark").filter((t=>t.name.startsWith(n)));t.length>0&&this.instrumentation.incrementCounter(r,t.length),s.length>0&&this.instrumentation.incrementCounter(i,s.length)}setupObserver(){new PerformanceObserver((t=>{t.getEntries().forEach((t=>{const{name:e,duration:n,startTime:r,entryType:i}=t,l=e.split("-")[0];if(e===s&&this.instrumentation.trackValue(a,r),"mark"===i){const e=t.detail||{},n=R.find((t=>t===l));n&&this.instrumentation.incrementCounter(P[n],1,!1,e)}if("measure"===i){const r=t.detail||{};this.config.enableModuleFetchTracking&&e.startsWith(o)&&this.instrumentation.trackValue(c,n,!1,r),this.config.enableMappingFetchTracking&&e.startsWith(m)&&this.instrumentation.trackValue(h,n,!1,r);const i=L.find((t=>t===l));i&&this.instrumentation.trackValue(F[i],n,!1,r)}B.some((t=>e.startsWith(t)))||performance.clearMarks(e)}))})).observe({entryTypes:["mark","measure"]})}}const z=void 0!==globalThis.performance&&"function"==typeof globalThis.performance.mark,A=globalThis.LWR,D={track:()=>{}};function G(e){const n=t("lwrjs"),r=A.metricsConfig||{};(z?new q(n,r):D).track()}export{G as default};
//# sourceMappingURL=o11yService.js.map
