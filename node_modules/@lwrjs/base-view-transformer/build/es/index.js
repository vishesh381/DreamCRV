import { LwrUnresolvableError, logger } from '@lwrjs/diagnostics';
import { isModuleOrBundleUrl } from '@lwrjs/shared-utils';
function applyImmutableUrlsToSource(codeStringBuilder, assetReferences) {
    assetReferences.forEach((assetRef) => {
        const { override, url, location: { startOffset, endOffset } = {} } = assetRef;
        if (typeof startOffset === 'number' && typeof endOffset === 'number' && startOffset !== endOffset) {
            codeStringBuilder.overwrite(startOffset, endOffset, override?.uri || url);
        }
    });
}
export default function baseViewTransformer(options, lwrGlobalContext) {
    const { assetRegistry } = lwrGlobalContext;
    return {
        name: 'lwr-base-view-transformer',
        async link(stringBuilder, viewContext, viewMeta) {
            const { assetReferences } = viewMeta;
            const { runtimeEnvironment, importer } = viewContext;
            const imageRefs = await Promise.all(assetReferences.map(async (ref) => {
                const { url: specifier } = ref;
                let override;
                try {
                    // We can ignore preload modules and bundle links.  They are not going to be in the asset registry
                    if (!isModuleOrBundleUrl(ref.url)) {
                        // Temporary solution for 252 backport.  In 254 we expect this will be updated in the associated CLWR template
                        let updatableSpecifier = specifier;
                        const { basePath } = runtimeEnvironment;
                        if (basePath && basePath !== '/') {
                            updatableSpecifier = specifier.replace(basePath, '');
                        }
                        override = await assetRegistry.resolveAssetUri({ specifier: updatableSpecifier, importer }, runtimeEnvironment);
                    }
                }
                catch (e) {
                    // FIXME: For some odd reason, cjs
                    if (e instanceof LwrUnresolvableError || e.diagnostics) {
                        // the asset may not exist, in which case the URL is not overwritten.  Log a warning so
                        // the developer can see the bad asset URL, and be able to correct it
                        logger.warn({
                            label: `${this.name}`,
                            message: 'Asset was not found for ' + (ref.url || 'empty url'),
                        });
                        return ref;
                    }
                    throw e;
                }
                return { ...ref, override };
            }));
            applyImmutableUrlsToSource(stringBuilder, imageRefs);
            // override assetReferences with the news ones
            viewMeta.assetReferences = imageRefs;
        },
    };
}
//# sourceMappingURL=index.js.map