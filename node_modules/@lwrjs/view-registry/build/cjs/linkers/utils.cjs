var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/view-registry/src/linkers/utils.ts
__markAsModule(exports);
__export(exports, {
  flattenCustomElements: () => flattenCustomElements,
  getBundleIntegrity: () => getBundleIntegrity,
  getViewBootstrapConfigurationResource: () => getViewBootstrapConfigurationResource,
  getViewHmrConfigurationResource: () => getViewHmrConfigurationResource
});
var import_shared_utils = __toModule(require("@lwrjs/shared-utils"));
var CONTENT_TYPE = "application/javascript";
function getViewBootstrapConfigurationResource(viewInfo, config, runtimeEnvironment, runtimeParams, debugMessage) {
  const {compat, debug, hmrEnabled, apiVersion, format} = runtimeEnvironment;
  const isESM = format === "esm";
  const defaultUrl = (0, import_shared_utils.getModuleUriPrefix)(runtimeEnvironment, runtimeParams);
  const mapping = (0, import_shared_utils.getMappingUriPrefix)(runtimeEnvironment, runtimeParams);
  const endpoints = {
    uris: {
      mapping,
      ...isESM && {module: defaultUrl},
      ...isESM && hmrEnabled && {
        hmr: `/${apiVersion}/hmr/${format}/${compat}?${debug ? "debug=true" : ""}`
      }
    },
    ...debug && {modifiers: {debug: "true"}}
  };
  const nodeEnv = {
    NODE_ENV: runtimeEnvironment.serverMode
  };
  const lwrEnv = {
    SSR: false,
    ...(0, import_shared_utils.buildEnvironmentContext)(runtimeParams)
  };
  const configString = [
    "/* This script is generated */",
    "/* Client Bootstrap configuration */",
    `globalThis.LWR = globalThis.LWR || {};`,
    `Object.assign(globalThis.LWR, ${JSON.stringify({
      ...config,
      endpoints
    })});`,
    `globalThis.LWR = {...globalThis.LWR, env: ${JSON.stringify(lwrEnv)}};`,
    `globalThis.process={...globalThis.process,env:{...globalThis.process?.env,...${JSON.stringify(nodeEnv)}}};`,
    `globalThis.lwcRuntimeFlags = { ENABLE_MIXED_SHADOW_MODE: ${viewInfo.mixedMode}, ENABLE_WIRE_SYNC_EMIT: ${viewInfo.ssr} };`,
    debug && debugMessage && `console.error(${JSON.stringify(debugMessage)});`
  ].filter(Boolean).join("\n");
  if (viewInfo.configAsSrc) {
    const viewUrl = viewInfo.url || "/";
    const url = (0, import_shared_utils.getClientBootstrapConfigurationUri)({id: viewInfo.id, url: viewUrl, query: runtimeParams.query}, runtimeEnvironment, runtimeParams, (0, import_shared_utils.hashContent)(configString));
    return {
      type: CONTENT_TYPE,
      content: configString,
      inline: false,
      nonce: viewInfo.nonce,
      src: url
    };
  } else {
    return {
      type: CONTENT_TYPE,
      content: configString,
      inline: true
    };
  }
}
function getViewHmrConfigurationResource(view, viewMetadata) {
  const {assetReferences} = viewMetadata;
  const {contentTemplate, layoutTemplate} = view;
  const refs = assetReferences.map((assetReference) => {
    if (assetReference.override) {
      return assetReference.override?.entry;
    }
  });
  const configString = [
    `
        /* generated View/HMR debug script */
        globalThis._lwrRuntimeDebug = {
            viewMetadata: {
                assetReferences: ${JSON.stringify(refs)},
                templates: ${JSON.stringify([contentTemplate, layoutTemplate].filter(Boolean))}
            }
        }
        `
  ].filter(Boolean).join("\n");
  return {
    type: CONTENT_TYPE,
    inline: true,
    content: configString
  };
}
function flattenCustomElements(arr, isSSR = false) {
  const ret = [];
  const visitedTags = new Set();
  function flatten(arr2) {
    for (const val of arr2) {
      const {tagName, children, props} = val;
      if (!visitedTags.has(tagName)) {
        if (isSSR) {
          ret.push({tagName, props});
        } else {
          ret.push({tagName});
        }
        visitedTags.add(tagName);
      }
      if (children) {
        flatten(children);
      }
    }
  }
  flatten(arr);
  return ret;
}
function getBundleIntegrity(bootstrapModuleGraph, versionedSpecifier) {
  const def = bootstrapModuleGraph.linkedDefinitions[versionedSpecifier];
  const integrity = def?.integrity;
  return integrity;
}
