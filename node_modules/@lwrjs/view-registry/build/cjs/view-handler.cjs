var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/view-registry/src/view-handler.ts
__markAsModule(exports);
__export(exports, {
  LwrViewHandler: () => LwrViewHandler
});
var import_path = __toModule(require("path"));
var import_shared_utils = __toModule(require("@lwrjs/shared-utils"));
var import_instrumentation = __toModule(require("@lwrjs/instrumentation"));
var import_utils = __toModule(require("./utils.cjs"));
var import_diagnostics = __toModule(require("@lwrjs/diagnostics"));
var LwrViewHandler = class {
  constructor(context, globalConfig) {
    this.globalConfig = globalConfig;
    this.routeHandlers = context.routeHandlers;
    this.viewRegistry = context.viewRegistry;
    this.moduleRegistry = context.moduleRegistry;
  }
  async getViewContent(viewRequest, route, runtimeEnvironment, runtimeParams) {
    if (route.routeHandler) {
      const response = await this.getRouteHandlerResponse(viewRequest, route, runtimeEnvironment, runtimeParams);
      if ((0, import_utils.isViewResponse)(response)) {
        return response;
      }
      const {view, viewParams, renderOptions} = normalizeViewProperties(viewRequest, response, route, this.globalConfig, runtimeParams);
      const viewDefinition2 = await this.viewRegistry.getViewDefinition(view, viewParams, runtimeEnvironment, runtimeParams, renderOptions);
      const link2 = !!route?.bootstrap?.preloadResources?.patterns?.length && (0, import_utils.generateLinkHeaders)(viewDefinition2.viewRecord.assetReferences || [], route?.bootstrap?.preloadResources?.patterns || []);
      return {
        ...response,
        body: viewDefinition2.renderedView,
        ...!!link2 && {headers: {link: link2}},
        metadata: {
          viewDefinition: viewDefinition2
        },
        cache: {ttl: (0, import_shared_utils.shortestTtl)(response.cache?.ttl, viewDefinition2.cache?.ttl)}
      };
    }
    const viewDefinition = await this.getDefaultRouteViewDefinition(viewRequest, route, runtimeEnvironment, runtimeParams);
    const link = !!route?.bootstrap?.preloadResources?.patterns?.length && (0, import_utils.generateLinkHeaders)(viewDefinition.viewRecord.assetReferences || [], route.bootstrap?.preloadResources?.patterns || []);
    return {
      body: viewDefinition.renderedView,
      metadata: {
        viewDefinition
      },
      cache: viewDefinition.cache,
      ...!!link && {headers: {link}}
    };
  }
  async getViewJson(viewRequest, route, runtimeEnvironment, runtimeParams = {}) {
    if (route.routeHandler) {
      const response = await this.getRouteHandlerResponse(viewRequest, route, runtimeEnvironment, runtimeParams);
      if ((0, import_utils.isViewResponse)(response)) {
        return response;
      }
      const {view, viewParams, renderOptions} = normalizeViewProperties(viewRequest, response, route, this.globalConfig, runtimeParams);
      const viewDefinition2 = await this.viewRegistry.getViewDefinition(view, viewParams, runtimeEnvironment, runtimeParams, renderOptions);
      return {
        ...response,
        ...await (0, import_utils.toJsonFormat)(viewRequest, viewDefinition2, route, runtimeEnvironment, runtimeParams, this.moduleRegistry)
      };
    }
    const viewDefinition = await this.getDefaultRouteViewDefinition(viewRequest, route, runtimeEnvironment, runtimeParams);
    return await (0, import_utils.toJsonFormat)(viewRequest, viewDefinition, route, runtimeEnvironment, runtimeParams, this.moduleRegistry);
  }
  async getViewConfiguration(viewRequest, route, runtimeEnvironment, runtimeParams = {}) {
    let viewDefinition;
    if (route.routeHandler) {
      const response = await this.getRouteHandlerResponse(viewRequest, route, runtimeEnvironment, runtimeParams);
      if ((0, import_utils.isViewResponse)(response)) {
        return response;
      }
      const {view, viewParams, renderOptions} = normalizeViewProperties(viewRequest, response, route, this.globalConfig, runtimeParams);
      viewDefinition = await this.viewRegistry.getViewDefinition(view, viewParams, runtimeEnvironment, runtimeParams, renderOptions);
    } else {
      viewDefinition = await this.getDefaultRouteViewDefinition(viewRequest, route, runtimeEnvironment, runtimeParams);
    }
    const bootstrapResources = viewDefinition.viewRecord.bootstrapModule?.resources;
    if (!bootstrapResources) {
      return;
    }
    const htmlResources = route.bootstrap?.configAsSrc ? bootstrapResources.map((resource) => resource.content).join("\n") : await (0, import_utils.generateHtmlTag)({
      type: "application/javascript",
      inline: true,
      content: bootstrapResources.map((resource) => resource.content).join("\n")
    });
    return {
      body: htmlResources
    };
  }
  async getDefaultRouteViewDefinition(viewRequest, route, runtimeEnvironment, runtimeParams = {}) {
    const {id, bootstrap, rootComponent, contentTemplate, layoutTemplate, properties} = route;
    const page = (0, import_utils.generatePageContext)(viewRequest, route, runtimeParams);
    const viewDefinition = await this.viewRegistry.getViewDefinition({
      id,
      bootstrap,
      rootComponent,
      contentTemplate,
      layoutTemplate
    }, {page, ...properties}, runtimeEnvironment, runtimeParams);
    return viewDefinition;
  }
  async getRouteHandlerResponse(viewRequest, route, runtimeEnvironment, runtimeParams = {}) {
    if (!route.routeHandler) {
      throw new Error("Route handler is required for a CustomView");
    }
    const routeHandlerOptions = route.routeHandler[1];
    const routeHandlerFn = this.routeHandlers[route.routeHandler[0]];
    if (!routeHandlerFn) {
      throw new Error(`Route handler does not exist for id: ${route.routeHandler}`);
    }
    const {rootDir, assets, contentDir, layoutsDir} = this.globalConfig;
    const paths = {rootDir, assets, contentDir, layoutsDir};
    const locale = runtimeParams.locale;
    const basePath = runtimeParams.basePath;
    const assetBasePath = runtimeParams.assetBasePath;
    const uiBasePath = runtimeParams.assetBasePath;
    const viewApi = this.getBoundApi(viewRequest, route, runtimeEnvironment, runtimeParams);
    const response = await (0, import_instrumentation.getTracer)().trace({
      name: import_instrumentation.ViewSpan.ExecuteRouteHandler,
      attributes: {
        view: route.id,
        route: viewRequest.requestPath
      }
    }, async () => {
      try {
        return await routeHandlerFn({...viewRequest, locale, basePath, assetBasePath, uiBasePath}, {route, viewApi, ...paths}, routeHandlerOptions);
      } catch (err) {
        if (err instanceof import_diagnostics.DiagnosticsError) {
          throw err;
        }
        const message = err instanceof Error ? err.message : String(err);
        throw (0, import_diagnostics.createSingleDiagnosticError)({description: import_diagnostics.descriptions.APPLICATION.ROUTE_HANDLER_ERROR(route.id, message)}, import_diagnostics.LwrApplicationError);
      }
    });
    if (response?.locale) {
      runtimeParams.locale = response.locale;
    }
    const preloadResources = route?.bootstrap?.preloadResources?.patterns;
    if (preloadResources && preloadResources.length) {
      let viewDefintionMeta = response.metadata?.viewDefinition;
      if (!viewDefintionMeta && (0, import_utils.isViewDefinitionResponse)(response)) {
        viewDefintionMeta = (await viewApi.getViewResponse(response.view, response.viewParams, response.renderOptions)).metadata?.viewDefinition;
      }
      if (viewDefintionMeta) {
        const link = (0, import_utils.generateLinkHeaders)(viewDefintionMeta?.viewRecord.assetReferences || [], preloadResources);
        if (link) {
          response.headers = {
            ...response.headers,
            link
          };
        }
      }
    }
    return response;
  }
  getBoundApi(viewRequest, route, runtimeEnvironment, runtimeParams) {
    return {
      getViewResponse: this.getViewResponse.bind(this, viewRequest, route, runtimeEnvironment, runtimeParams),
      hasViewResponse: this.hasViewResponse.bind(this, route, runtimeEnvironment, runtimeParams)
    };
  }
  hasViewResponse(route, runtimeEnvironment, runtimeParams = {}, view, viewParams, renderOptions) {
    const {id, bootstrap} = route;
    const managedView = {...view, id, bootstrap};
    return this.viewRegistry.hasViewDefinition(managedView, viewParams, runtimeEnvironment, runtimeParams, renderOptions);
  }
  async getViewResponse(viewRequest, route, runtimeEnvironment, runtimeParams = {}, view, viewParams, renderOptions) {
    const {id, bootstrap} = route;
    const managedView = {...view, id, bootstrap};
    if (view.locale) {
      runtimeParams.locale = view.locale;
    }
    const viewResponse = {
      view: managedView,
      viewParams,
      renderOptions
    };
    const {
      view: normalizedView,
      viewParams: normalizedViewParams,
      renderOptions: normalizedRenderOptions
    } = normalizeViewProperties(viewRequest, viewResponse, route, this.globalConfig, runtimeParams);
    const viewDefinition = await this.viewRegistry.getViewDefinition(normalizedView, normalizedViewParams, runtimeEnvironment, runtimeParams, normalizedRenderOptions);
    return {
      body: viewDefinition.renderedView,
      metadata: {
        viewDefinition
      },
      cache: viewDefinition.cache
    };
  }
};
function normalizeViewProperties(viewRequest, response, route, config, runtimeParams) {
  const {
    view: {rootComponent, contentTemplate: cTemplate, layoutTemplate: lTemplate},
    viewParams,
    renderOptions
  } = response;
  const {rootDir, assets, contentDir, layoutsDir} = config;
  const paths = {rootDir, assets, contentDir, layoutsDir};
  const page = (0, import_utils.generatePageContext)(viewRequest, {
    ...route,
    contentTemplate: cTemplate,
    properties: viewParams
  }, runtimeParams);
  const {id, bootstrap} = route;
  return {
    view: {
      id,
      bootstrap,
      ...rootComponent && {rootComponent},
      ...cTemplate && {
        contentTemplate: typeof cTemplate === "string" ? (0, import_path.resolve)((0, import_shared_utils.normalizeResourcePath)(cTemplate, paths)) : cTemplate
      },
      ...lTemplate && {layoutTemplate: (0, import_path.resolve)((0, import_shared_utils.normalizeResourcePath)(lTemplate, paths))}
    },
    viewParams: {page, ...viewParams},
    renderOptions
  };
}
