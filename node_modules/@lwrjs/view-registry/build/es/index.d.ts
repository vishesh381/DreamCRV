import type { AssetRegistry, AssetSource, CompiledView, Json, LinkedModuleDefinition, LinkedViewDefinition, LwrAppEmitter, LwrAppObserver, ModuleBundler, ModuleRegistry, NormalizedLwrGlobalConfig, PublicViewRegistry, RenderOptions, ResourceRegistry, RuntimeEnvironment, RuntimeParams, View, ViewIdentity, ViewParams, ViewProvider, ViewRegistry, ViewTransformPlugin } from '@lwrjs/types';
import { LRUCache } from 'lru-cache';
export { LwrViewHandler } from './view-handler.js';
interface ViewProviderContext {
    viewTransformers?: ViewTransformPlugin[];
    appObserver: LwrAppObserver;
    appEmitter: LwrAppEmitter;
    assetRegistry: AssetRegistry;
    moduleRegistry: ModuleRegistry;
    moduleBundler: ModuleBundler;
    resourceRegistry: ResourceRegistry;
    globalData: Json;
    runtimeEnvironment: RuntimeEnvironment;
}
interface ViewDefinitionCacheEntry {
    view: View;
    viewDefinition: LinkedViewDefinition;
    paramKey?: string;
}
export declare class LwrViewRegistry implements ViewRegistry {
    name: string;
    viewProviders: ViewProvider[];
    compiledViews: Map<string, CompiledView>;
    viewDefinitions: LRUCache<string, ViewDefinitionCacheEntry>;
    resourceRegistry: ResourceRegistry;
    moduleRegistry: ModuleRegistry;
    moduleBundler: ModuleBundler;
    assetRegistry: AssetRegistry;
    globalConfig: NormalizedLwrGlobalConfig;
    appEmitter: LwrAppEmitter;
    globalData: Json;
    runtimeEnvironment: RuntimeEnvironment;
    immutableAssets: Map<string, string>;
    viewTransformers: ViewTransformPlugin[];
    private pendingViewDefinitions;
    constructor(context: ViewProviderContext, globalConfig: NormalizedLwrGlobalConfig);
    onModuleDefinitionChange(moduleDefinition: LinkedModuleDefinition): Promise<void>;
    onViewSourceChange(compiledView: CompiledView): Promise<void>;
    onAssetSourceChange(asset: AssetSource): void;
    getPublicApi(): PublicViewRegistry;
    addViewProviders(providers: ViewProvider[]): void;
    addViewTransformers(transformers: ViewTransformPlugin[]): void;
    initializeViewProviders(): Promise<void[]>;
    delegateGetView(viewId: ViewIdentity): Promise<CompiledView>;
    getView(viewId: ViewIdentity): Promise<CompiledView>;
    hasViewDefinition(view: View, viewParams: ViewParams, runtimeEnvironment: RuntimeEnvironment, runtimeParams?: RuntimeParams, renderOptions?: RenderOptions): boolean;
    getViewDefinition(view: View, viewParams: ViewParams, runtimeEnvironment: RuntimeEnvironment, runtimeParams?: RuntimeParams, renderOptions?: RenderOptions): Promise<LinkedViewDefinition>;
    private renderView;
    private render;
    private link;
}
//# sourceMappingURL=index.d.ts.map