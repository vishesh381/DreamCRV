import type { AssetReference, JsonCompatible, LinkedViewDefinition, LwrErrorRoute, LwrRoute, ModuleBundler, ModuleId, ModuleJson, ModuleRegistry, NormalizedRenderingResult, PublicModuleRegistry, RenderOptions, RenderedAssetReference, RenderingResult, ResourceDefinition, RouteHandlerViewResponse, RuntimeEnvironment, RuntimeParams, ViewModuleResourceContext, ViewPageContext, ViewParams, ViewRequest, ViewResponse, ViewDefinitionResponse, View } from '@lwrjs/types';
export type HTMLResource = Partial<ResourceDefinition>;
export declare function generateHtmlTag(definition: HTMLResource): Promise<string>;
export declare function normalizeRenderedResult({ renderedView, metadata, options, cache, status, }: RenderingResult): NormalizedRenderingResult;
export declare function reduceSourceAssetReferences(assets: AssetReference[]): RenderedAssetReference[];
export declare function normalizeRenderOptions(runtimeEnvironment: RuntimeEnvironment, overrideRenderOptions?: RenderOptions, baseRenderOptions?: RenderOptions): Required<RenderOptions>;
export declare function generatePageContext({ requestPath: url }: ViewRequest, { id, contentTemplate, properties }: LwrRoute | LwrErrorRoute, runtimeParams: RuntimeParams): JsonCompatible<ViewPageContext>;
export declare function isViewResponse(response: RouteHandlerViewResponse): response is ViewResponse;
export declare function isViewDefinitionResponse(response: RouteHandlerViewResponse): response is ViewDefinitionResponse;
export declare function toJsonFormat(viewRequest: ViewRequest, viewDefinition: LinkedViewDefinition, route: LwrRoute | LwrErrorRoute, runtimeEnvironment: RuntimeEnvironment, runtimeParams: RuntimeParams, moduleRegistry: ModuleRegistry): Promise<ViewResponse>;
export declare function getModuleResource(moduleId: Pick<ModuleId, 'specifier' | 'version'>, runtimeEnvironment: RuntimeEnvironment, moduleResourceMeta: ViewModuleResourceContext, defRegistry: ModuleRegistry | ModuleBundler, runtimeParams: RuntimeParams): Promise<ResourceDefinition>;
export declare function getModuleResourceByUri(uri: string, runtimeEnvironment: RuntimeEnvironment, moduleResourceMeta: ViewModuleResourceContext): ResourceDefinition;
export declare function createJsonModule(specifier: string, moduleRegistry: PublicModuleRegistry, environment: RuntimeEnvironment, params: RuntimeParams): Promise<ModuleJson>;
/**
 * Get the nonce set on the page context of the view params
 */
export declare function getViewNonce(viewParams: ViewParams): string | undefined;
/**
 * Generate a nonce in the page context of the view params
 */
export declare function generateViewNonce(viewParams: ViewParams): void;
/**
 * Add a nonce to a script definition in view if it is external (not inline)
 */
export declare function addExternalScriptNonce(def: ResourceDefinition, nonce?: string): void;
export declare function generateLinkHeaders(assets: RenderedAssetReference[], patterns: Record<string, any>[]): string;
export declare function getViewDefCacheKey(view: View, runtimeEnvironment: RuntimeEnvironment, freezeAssets: boolean, runtimeParams?: RuntimeParams): string;
export declare function getModuleGraphCacheKey(specifier: string, runtimeEnvironment: RuntimeEnvironment, runtimeParams: RuntimeParams): string;
//# sourceMappingURL=utils.d.ts.map