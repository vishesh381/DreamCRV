import type { ModuleRegistry, LinkedViewDefinition, RenderedViewMetadata, ResourceRegistry, RuntimeEnvironment, RuntimeParams, View, ModuleBundler, ViewParams, BundleConfig } from '@lwrjs/types';
export interface LwrResourcesLinkedContext extends ResourceContext {
    lwrResourcesId: string;
}
export interface ResourceContext {
    viewMetadata: RenderedViewMetadata;
    runtimeEnvironment: RuntimeEnvironment;
    runtimeParams: RuntimeParams;
    moduleRegistry: ModuleRegistry;
    moduleBundler: ModuleBundler;
    resourceRegistry: ResourceRegistry;
    bundleConfig: BundleConfig;
    unsafeEnableViewLinkCaching: boolean;
    viewLinkCacheKey: string;
}
type LinkedResourcesViewDefinition = Pick<LinkedViewDefinition, 'renderedView' | 'viewRecord'>;
export declare function linkLwrResources(source: string, view: View, viewParams: ViewParams, cxt: LwrResourcesLinkedContext): Promise<LinkedResourcesViewDefinition>;
export {};
//# sourceMappingURL=link-lwr-resources.d.ts.map