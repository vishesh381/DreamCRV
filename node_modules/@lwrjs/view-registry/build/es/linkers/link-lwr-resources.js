import { ViewSpan, getTracer } from '@lwrjs/instrumentation';
import { getHtmlResources } from './view_bootstrap.js';
import { getHtmlResources as getLegacyHtmlResource } from './legacy_view_bootstrap.js';
export async function linkLwrResources(source, view, viewParams, cxt) {
    const { lwrResourcesId, ...resourceContext } = cxt;
    const LEGACY_LOADER = !!resourceContext.runtimeEnvironment.featureFlags.LEGACY_LOADER;
    return await getTracer().trace({
        name: ViewSpan.Generate,
        attributes: {
            legacyLoader: LEGACY_LOADER,
        },
    }, async () => {
        const { partial, viewRecord } = await (LEGACY_LOADER
            ? getLegacyHtmlResource(view, viewParams, resourceContext)
            : getHtmlResources(view, viewParams, resourceContext));
        // Finally replace the token with the real resources
        return {
            // partial may contain regex-token-like characters such as $$,
            // so we want to bypass regex replacement
            renderedView: source.replace(lwrResourcesId, () => partial),
            viewRecord,
        };
    });
}
//# sourceMappingURL=link-lwr-resources.js.map