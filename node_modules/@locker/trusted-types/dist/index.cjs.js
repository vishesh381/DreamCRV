/*!
 * Copyright (C) 2023 salesforce.com, inc.
 */
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

// @ts-ignore: Prevent cannot find name 'trustedTypes' error.
const SUPPORTS_TRUSTED_TYPES = typeof trustedTypes !== 'undefined';
function createTrustedTypesPolicy(name, options) {
  // @ts-ignore: Prevent cannot find name 'trustedTypes' error.
  return trustedTypes.createPolicy(name, options);
}
function createFallbackPolicy(_name, options) {
  return options;
}
// https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/trusted-types
const createPolicy = SUPPORTS_TRUSTED_TYPES ? createTrustedTypesPolicy : createFallbackPolicy;
const policyOptions = {
  createHTML(value) {
    return value;
  },
  createScript(value) {
    return value;
  },
  createScriptURL(value) {
    return value;
  }
};
// Temporarily surround in try-catch until migration to AMD run.
try {
  // istanbul ignore next: this creates a special policy described here https://developer.mozilla.org/en-US/docs/Web/API/TrustedTypePolicyFactory/createPolicy
  createPolicy('default', {
    createHTML(dirty) {
      // Treat null & undefined separately
      if (dirty === 'null' || dirty === 'undefined') {
        return dirty;
      }
      return dirty;
    },
    // Ignore typescript type validation for this policy.
    // Returning `undefined` from a TT policy blocks usages
    // of specific DOM sinks affected by this hook.
    // We want to block eval and inline scripts.
    // @ts-ignore
    createScript(dirty) {
      // Treat null & undefined separately
      if (dirty === 'null' || dirty === 'undefined') {
        return dirty;
      }
      // Block script evaluation
      return undefined;
    },
    createScriptURL(dirty) {
      // Treat null & undefined separately
      if (dirty === 'null' || dirty === 'undefined') {
        return dirty;
      }
      return dirty;
    }
  });
} catch (_unused) {
  // swallow
}
const trusted = createPolicy('trusted', policyOptions);
exports.createPolicy = createPolicy;
exports.trusted = trusted;
/*! version: 0.23.6 */
