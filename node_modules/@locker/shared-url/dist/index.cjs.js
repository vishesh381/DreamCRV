/*!
 * Copyright (C) 2019 salesforce.com, inc.
 */
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
var shared$LWS = require('@locker/shared');
var sharedDom$LWS = require('@locker/shared-dom');
const ALLOWED_MIME_TYPES$LWS = ['application/octet-stream', 'application/json', 'application/pdf', 'video/', 'audio/', 'image/', 'font/', 'text/plain', 'text/markdown', 'application/zip', 'application/x-bzip', 'application/x-rar-compressed', 'application/x-tar'];
const validMimeTypeRegExp$LWS = /^[a-z]+\/[a-z0-9.+-]+$/;
function isMIMETypeAllowed$LWS(mimeType$LWS) {
  // W-4896359 Avoid MIME types which try to escape using special characters:
  // Allow only alphanumeric, '-', '+', and '.' characters.
  if (shared$LWS.ReflectApply(shared$LWS.RegExpProtoTest, validMimeTypeRegExp$LWS, [mimeType$LWS])) {
    for (let i$LWS = 0, {
        length: length$LWS
      } = ALLOWED_MIME_TYPES$LWS; i$LWS < length$LWS; i$LWS += 1) {
      if (shared$LWS.ReflectApply(shared$LWS.StringProtoStartsWith, mimeType$LWS, [ALLOWED_MIME_TYPES$LWS[i$LWS]])) {
        return true;
      }
    }
  }
  return false;
}
const TRUSTED_DOMAINS_REG_EXP$LWS = /\.(force|salesforce|visualforce|documentforce|my\.site|salesforce-sites)\.com$/;
const URL_SCHEMES_LIST$LWS = shared$LWS.toSafeArray(['about:', 'http:', 'https:']);
const newlinesAndTabsRegExp$LWS = /[\u2028\u2029\n\r\t]/g;
const normalizerAnchor$LWS = shared$LWS.ReflectApply(sharedDom$LWS.DocumentProtoCreateElement, sharedDom$LWS.rootDocument, ['a']);
// @TODO: W-7302311 Make paths and domains configurable.
function isValidURL$LWS(parsedURL$LWS) {
  // Need to add /services to isValidUrl unit test and locker/scripts/test/disallowed-endpoints.js once we remove the gate.
  const DISALLOWED_ENDPOINTS_LIST$LWS = shared$LWS.isGaterEnabledFeature('enableBlockServicesEndpoint') ? ['/aura', '/webruntime', '/services'] : ['/aura', '/webruntime'];
  const loweredPathname$LWS = shared$LWS.ReflectApply(shared$LWS.StringProtoToLowerCase, parsedURL$LWS.pathname, []);
  for (let i$LWS = 0, {
      length: length$LWS
    } = DISALLOWED_ENDPOINTS_LIST$LWS; i$LWS < length$LWS; i$LWS += 1) {
    if (shared$LWS.ReflectApply(shared$LWS.StringProtoEndsWith, loweredPathname$LWS, [DISALLOWED_ENDPOINTS_LIST$LWS[i$LWS]]) || shared$LWS.ReflectApply(shared$LWS.StringProtoIncludes, loweredPathname$LWS, [`${DISALLOWED_ENDPOINTS_LIST$LWS[i$LWS]}/`])) {
      return false;
    }
  }
  return true;
}
function isValidURLScheme$LWS(url$LWS) {
  shared$LWS.ReflectApply(sharedDom$LWS.HTMLAnchorElementProtoHrefSetter, normalizerAnchor$LWS, [url$LWS]);
  return URL_SCHEMES_LIST$LWS.includes(shared$LWS.ReflectApply(sharedDom$LWS.HTMLAnchorElementProtoProtocolGetter, normalizerAnchor$LWS, []));
}
function parseURL$LWS(url$LWS) {
  const normalizedURL$LWS = sanitizeURLForElement$LWS(url$LWS);
  return {
    normalizedURL: normalizedURL$LWS,
    pathname: sharedDom$LWS.WindowDecodeURIComponent(shared$LWS.ReflectApply(sharedDom$LWS.HTMLAnchorElementProtoPathnameGetter, normalizerAnchor$LWS, []))
  };
}
function resolveURL$LWS(url$LWS) {
  shared$LWS.ReflectApply(sharedDom$LWS.HTMLAnchorElementProtoHrefSetter, normalizerAnchor$LWS, [url$LWS]);
  return shared$LWS.ReflectApply(sharedDom$LWS.HTMLAnchorElementProtoHrefGetter, normalizerAnchor$LWS, []);
}
function sanitizeURLForElement$LWS(url$LWS) {
  return resolveURL$LWS(sanitizeURLString$LWS(url$LWS));
}
function sanitizeURLString$LWS(urlString$LWS) {
  return urlString$LWS === '' ? urlString$LWS : shared$LWS.ReflectApply(shared$LWS.StringProtoReplace, urlString$LWS, [newlinesAndTabsRegExp$LWS, '']);
}
exports.TRUSTED_DOMAINS_REG_EXP = TRUSTED_DOMAINS_REG_EXP$LWS;
exports.URL_SCHEMES_LIST = URL_SCHEMES_LIST$LWS;
exports.isMIMETypeAllowed = isMIMETypeAllowed$LWS;
exports.isValidURL = isValidURL$LWS;
exports.isValidURLScheme = isValidURLScheme$LWS;
exports.normalizerAnchor = normalizerAnchor$LWS;
exports.parseURL = parseURL$LWS;
exports.resolveURL = resolveURL$LWS;
exports.sanitizeURLForElement = sanitizeURLForElement$LWS;
exports.sanitizeURLString = sanitizeURLString$LWS;
/*! version: 0.23.6 */
