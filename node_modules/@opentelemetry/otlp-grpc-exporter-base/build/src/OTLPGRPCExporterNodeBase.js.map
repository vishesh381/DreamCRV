{"version":3,"file":"OTLPGRPCExporterNodeBase.js","sourceRoot":"","sources":["../../src/OTLPGRPCExporterNodeBase.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { diag } from '@opentelemetry/api';\nimport { OTLPGRPCExporterConfigNode } from './types';\nimport {\n  OTLPExporterBase,\n  OTLPExporterError,\n} from '@opentelemetry/otlp-exporter-base';\nimport {\n  createEmptyMetadata,\n  GrpcExporterTransport,\n} from './grpc-exporter-transport';\nimport { ISerializer } from '@opentelemetry/otlp-transformer';\nimport { IExporterTransport } from '@opentelemetry/otlp-exporter-base';\nimport {\n  getOtlpGrpcDefaultConfiguration,\n  mergeOtlpGrpcConfigurationWithDefaults,\n} from './configuration/otlp-grpc-configuration';\nimport { getOtlpGrpcConfigurationFromEnv } from './configuration/otlp-grpc-env-configuration';\n\n/**\n * OTLP Exporter abstract base class\n */\nexport abstract class OTLPGRPCExporterNodeBase<\n  ExportItem,\n  ServiceResponse,\n> extends OTLPExporterBase<OTLPGRPCExporterConfigNode, ExportItem> {\n  private _transport: IExporterTransport;\n  private _serializer: ISerializer<ExportItem[], ServiceResponse>;\n  private _timeoutMillis: number;\n\n  constructor(\n    config: OTLPGRPCExporterConfigNode = {},\n    serializer: ISerializer<ExportItem[], ServiceResponse>,\n    grpcName: string,\n    grpcPath: string,\n    signalIdentifier: string\n  ) {\n    super(config);\n    // keep credentials locally in case user updates the reference on the config object\n    const userProvidedCredentials = config.credentials;\n    const actualConfig = mergeOtlpGrpcConfigurationWithDefaults(\n      {\n        url: config.url,\n        metadata: () => {\n          // metadata resolution strategy is merge, so we can return empty here, and it will not override the rest of the settings.\n          return config.metadata ?? createEmptyMetadata();\n        },\n        compression: config.compression,\n        timeoutMillis: config.timeoutMillis,\n        concurrencyLimit: config.concurrencyLimit,\n        credentials:\n          userProvidedCredentials != null\n            ? () => userProvidedCredentials\n            : undefined,\n      },\n      getOtlpGrpcConfigurationFromEnv(signalIdentifier),\n      getOtlpGrpcDefaultConfiguration()\n    );\n    this._serializer = serializer;\n    this._timeoutMillis = actualConfig.timeoutMillis;\n    this._concurrencyLimit = actualConfig.concurrencyLimit;\n    if (config.headers) {\n      diag.warn('Headers cannot be set when using grpc');\n    }\n\n    this._transport = new GrpcExporterTransport({\n      address: actualConfig.url,\n      compression: actualConfig.compression,\n      credentials: actualConfig.credentials,\n      grpcName: grpcName,\n      grpcPath: grpcPath,\n      metadata: actualConfig.metadata,\n    });\n  }\n\n  override onShutdown() {\n    this._transport.shutdown();\n  }\n\n  send(\n    objects: ExportItem[],\n    onSuccess: () => void,\n    onError: (error: OTLPExporterError) => void\n  ): void {\n    if (this._shutdownOnce.isCalled) {\n      diag.debug('Shutdown already started. Cannot send objects');\n      return;\n    }\n\n    const data = this._serializer.serializeRequest(objects);\n\n    if (data == null) {\n      onError(new Error('Could not serialize message'));\n      return;\n    }\n\n    const promise = this._transport\n      .send(data, this._timeoutMillis)\n      .then(response => {\n        if (response.status === 'success') {\n          onSuccess();\n        } else if (response.status === 'failure' && response.error) {\n          onError(response.error);\n        } else if (response.status === 'retryable') {\n          onError(new OTLPExporterError('Export failed with retryable status'));\n        } else {\n          onError(new OTLPExporterError('Export failed with unknown error'));\n        }\n      }, onError);\n\n    this._sendingPromises.push(promise);\n    const popPromise = () => {\n      const index = this._sendingPromises.indexOf(promise);\n      this._sendingPromises.splice(index, 1);\n    };\n    promise.then(popPromise, popPromise);\n  }\n}\n"]}