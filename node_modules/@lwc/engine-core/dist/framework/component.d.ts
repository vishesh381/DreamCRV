import type { VM } from './vm';
import type { LightningElementConstructor } from './base-lightning-element';
import type { Template } from './template';
import type { VNodes } from './vnodes';
import type { ReactiveObserver } from './mutation-tracker';
import type { APIVersion } from '@lwc/shared';
type ComponentConstructorMetadata = {
    tmpl: Template;
    sel: string;
    apiVersion: APIVersion;
};
/**
 * INTERNAL: This function can only be invoked by compiled code. The compiler
 * will prevent this function from being imported by userland code.
 * @param Ctor
 * @param metadata
 */
export declare function registerComponent(Ctor: any, metadata: ComponentConstructorMetadata): any;
export declare function getComponentRegisteredTemplate(Ctor: LightningElementConstructor): Template | undefined;
export declare function getComponentRegisteredName(Ctor: LightningElementConstructor): string | undefined;
export declare function getComponentAPIVersion(Ctor: LightningElementConstructor): APIVersion;
export declare function getTemplateReactiveObserver(vm: VM): ReactiveObserver;
export declare function resetTemplateObserverAndUnsubscribe(vm: VM): void;
export declare function renderComponent(vm: VM): VNodes;
export declare function markComponentAsDirty(vm: VM): void;
export declare function getWrappedComponentsListener(vm: VM, listener: EventListener): EventListener;
export {};
//# sourceMappingURL=component.d.ts.map