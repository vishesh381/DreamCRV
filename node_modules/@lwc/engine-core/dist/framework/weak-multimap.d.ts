/**
 * A map where the keys are weakly held and the values are a Set that are also each weakly held.
 * The goal is to avoid leaking the values, which is what would happen with a WeakMap<K, Set<V>>.
 *
 * Note that this is currently only intended to be used in dev/PRODDEBUG environments.
 * It leaks in legacy browsers, which may be undesired.
 */
export interface WeakMultiMap<T extends object, V extends object> {
    get(key: T): ReadonlySet<V>;
    add(key: T, vm: V): void;
    delete(key: T): void;
}
declare class LegacyWeakMultiMap<K extends object, V extends object> implements WeakMultiMap<K, V> {
    private _map;
    private _getValues;
    get(key: K): ReadonlySet<V>;
    add(key: K, vm: V): void;
    delete(key: K): void;
}
declare class ModernWeakMultiMap<K extends object, V extends object> implements WeakMultiMap<K, V> {
    private _map;
    private _registry;
    private _getWeakRefs;
    get(key: K): ReadonlySet<V>;
    add(key: K, value: V): void;
    delete(key: K): void;
}
export declare const WeakMultiMap: typeof LegacyWeakMultiMap | typeof ModernWeakMultiMap;
export {};
//# sourceMappingURL=weak-multimap.d.ts.map