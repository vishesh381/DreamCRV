import type { HTMLElementConstructor } from './base-bridge-element';
import type { Template } from './template';
import type { ShadowSupportMode } from './vm';
import type { Stylesheets, AccessibleElementProperties } from '@lwc/shared';
export interface LightningElementConstructor {
    new (): LightningElement;
    readonly prototype: LightningElement;
    readonly CustomElementConstructor: HTMLElementConstructor;
    delegatesFocus?: boolean;
    renderMode?: 'light' | 'shadow';
    formAssociated?: boolean;
    shadowSupportMode?: ShadowSupportMode;
    stylesheets: Stylesheets;
}
type HTMLElementTheGoodParts = {
    toString: () => string;
} & Pick<HTMLElement, 'accessKey' | 'addEventListener' | 'attachInternals' | 'children' | 'childNodes' | 'classList' | 'dir' | 'dispatchEvent' | 'draggable' | 'firstChild' | 'firstElementChild' | 'getAttribute' | 'getAttributeNS' | 'getBoundingClientRect' | 'getElementsByClassName' | 'getElementsByTagName' | 'hasAttribute' | 'hasAttributeNS' | 'hidden' | 'id' | 'isConnected' | 'lang' | 'lastChild' | 'lastElementChild' | 'ownerDocument' | 'querySelector' | 'querySelectorAll' | 'removeAttribute' | 'removeAttributeNS' | 'removeEventListener' | 'setAttribute' | 'setAttributeNS' | 'shadowRoot' | 'spellcheck' | 'tabIndex' | 'tagName' | 'title' | 'style'>;
type RefNodes = {
    [name: string]: Element;
};
/**
 * A `LightningElement` will always be attached to an [`HTMLElement`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement),
 * rather than the more broad `Element` used by the generic shadow root interface.
 */
export interface LightningElementShadowRoot extends ShadowRoot {
    readonly host: HTMLElement;
}
export interface LightningElement extends HTMLElementTheGoodParts, AccessibleElementProperties {
    constructor: LightningElementConstructor;
    template: LightningElementShadowRoot | null;
    refs: RefNodes | undefined;
    hostElement: Element;
    render(): Template;
    connectedCallback?(): void;
    disconnectedCallback?(): void;
    renderedCallback?(): void;
    errorCallback?(error: any, stack: string): void;
    formAssociatedCallback?(): void;
    formResetCallback?(): void;
    formDisabledCallback?(): void;
    formStateRestoreCallback?(): void;
}
/**
 * This class is the base class for any LWC element.
 * Some elements directly extends this class, others implement it via inheritance.
 */
export declare const LightningElement: LightningElementConstructor;
export declare const lightningBasedDescriptors: PropertyDescriptorMap;
export {};
//# sourceMappingURL=base-lightning-element.d.ts.map