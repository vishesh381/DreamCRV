import { RenderMode, ShadowMode } from './vm';
import type { VM } from './vm';
import type { MutationLog } from './mutation-logger';
export declare const enum OperationId {
    Constructor = 0,
    Render = 1,
    Patch = 2,
    ConnectedCallback = 3,
    RenderedCallback = 4,
    DisconnectedCallback = 5,
    ErrorCallback = 6,
    GlobalRender = 7,
    GlobalRerender = 8,
    GlobalSsrHydrate = 9
}
type GlobalOperationId = OperationId.GlobalRender | OperationId.GlobalRerender | OperationId.GlobalSsrHydrate;
declare const enum Phase {
    Start = 0,
    Stop = 1
}
type LogDispatcher = (opId: OperationId, phase: Phase, cmpName?: string, vmIndex?: number, renderMode?: RenderMode, shadowMode?: ShadowMode) => void;
export declare const profilerControl: {
    enableProfiler(): void;
    disableProfiler(): void;
    attachDispatcher(dispatcher: LogDispatcher): void;
    detachDispatcher(): LogDispatcher;
};
export declare function logOperationStart(opId: OperationId, vm: VM): void;
export declare function logOperationEnd(opId: OperationId, vm: VM): void;
export declare function logGlobalOperationStart(opId: GlobalOperationId): void;
export declare function logGlobalOperationStartWithVM(opId: GlobalOperationId, vm: VM): void;
export declare function logGlobalOperationEnd(opId: GlobalOperationId, mutationLogs: MutationLog[] | undefined): void;
export declare function logGlobalOperationEndWithVM(opId: GlobalOperationId, vm: VM): void;
export {};
//# sourceMappingURL=profiler.d.ts.map