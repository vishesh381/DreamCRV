/**
 * Copyright (c) 2025 Salesforce, Inc.
 */
/**
 * Copyright (c) 2025 Salesforce, Inc.
 */
/*
 * Copyright (c) 2018, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */
/**
 *
 * @param value
 * @param msg
 */
/**
 *
 * @param value
 * @param msg
 */
function isFalse$1(value, msg) {
    if (value) {
        throw new Error(`Assert Violation: ${msg}`);
    }
}

/*
 * Copyright (c) 2024, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */
let trustedSignals;
function setTrustedSignalSet(signals) {
    isFalse$1(trustedSignals, 'Trusted Signal Set is already set!');
    trustedSignals = signals;
}
function addTrustedSignal(signal) {
    // This should be a no-op when the trustedSignals set isn't set by runtime
    trustedSignals?.add(signal);
}
/** version: 8.13.1 */

/*
 * Copyright (c) 2023, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */
class SignalBaseClass {
    constructor() {
        this.subscribers = new Set();
        // Add the signal to the set of trusted signals
        // that rendering engine can track
        addTrustedSignal(this);
    }
    subscribe(onUpdate) {
        this.subscribers.add(onUpdate);
        return () => {
            this.subscribers.delete(onUpdate);
        };
    }
    notify() {
        for (const subscriber of this.subscribers) {
            subscriber();
        }
    }
}

export { SignalBaseClass, setTrustedSignalSet };
/** version: 8.13.1 */
//# sourceMappingURL=index.js.map
