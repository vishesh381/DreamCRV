import type { KEY__NATIVE_ONLY_CSS, KEY__SCOPED_CSS } from './keys';
export declare const IMPORTANT_FLAG: RegExp;
/**
 * Function producing style based on a host and a shadow selector. This function is invoked by
 * the engine with different values depending on the mode that the component is running on.
 */
export type Stylesheet = {
    /**
     * Function taking a stylesheet token (string), whether to render actual or "scoped" `:host()` pseudo-classes,
     * and whether to render actual or synthetic `:dir()` pseudo-classes and returning a CSS string.
     * This function signature should _not_ be considered a stable API surface - it is internal to the LWC engine.
     */
    (stylesheetToken: string | undefined, useActualHostSelector: boolean, useNativeDirPseudoclass: boolean): string;
    /**
     * True if this is a scoped style (e.g. `foo.scoped.css`)
     */
    [KEY__SCOPED_CSS]?: boolean;
    /**
     * True if this is a native-only style (i.e. compiled with `disableSyntheticShadowSupport`).
     */
    [KEY__NATIVE_ONLY_CSS]?: boolean;
};
/**
 * The list of stylesheets associated with a template. Each entry is either a `Stylesheet` or
 * an array of stylesheets that a given stylesheet depends on via CSS `@import` declarations.
 */
export type Stylesheets = Array<Stylesheet | Stylesheets>;
export declare function parseStyleText(cssText: string): {
    [name: string]: string;
};
export declare function normalizeStyleAttributeValue(style: string): string;
export declare function flattenStylesheets(stylesheets: Stylesheets): Stylesheet[];
//# sourceMappingURL=style.d.ts.map