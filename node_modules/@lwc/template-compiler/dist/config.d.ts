import type { CustomRendererConfig } from './shared/renderer-hooks';
import type { InstrumentationObject } from '@lwc/errors';
export interface Config {
    /** The name of the component. For example, the name in `<my-component>` is `"component"`. */
    name?: string;
    /** The namespace of the component. For example, the namespace in `<my-component>` is `"my"`. */
    namespace?: string;
    /**
     * Specification to use to determine which nodes in the template require custom renderer hooks.
     */
    customRendererConfig?: CustomRendererConfig;
    /**
     * Enable computed member expression in the template.
     * @example
     * <template>
     *     {list[0].name}
     * </template>
     */
    experimentalComputedMemberExpression?: boolean;
    /**
     * Enable use of (a subset of) JavaScript expressions in place of template bindings.
     * @example
     * <template>
     *     <input
     *         attr={complex ?? expressions()}
     *         onchange={({ target }) => componentMethod(target.value)}
     *     >
     *         Hey there {inAustralia ? 'mate' : 'friend'}
     *     </input>
     * </template>
     */
    experimentalComplexExpressions?: boolean;
    /**
     * TODO [#3331]: remove usage of lwc:dynamic in 246
     *
     * Enable lwc:dynamic directive - Deprecated
     *
     * <x-foo lwc:dynamic={expr}>
     */
    experimentalDynamicDirective?: boolean;
    /**
     * When true, enables `lwc:is` directive.
     *
     * <lwc:component lwc:is={expr}>
     */
    enableDynamicComponents?: boolean;
    /**
     * When true, HTML comments in the template will be preserved.
     */
    preserveHtmlComments?: boolean;
    /**
     * When false, the template compiler will not generate optimized code for static content.
     */
    enableStaticContentOptimization?: boolean;
    /**
     * @deprecated Spread operator is now always enabled.
     */
    enableLwcSpread?: boolean;
    /**
     * Config to use to collect metrics and logs
     */
    instrumentation?: InstrumentationObject;
    /**
     * The API version to associate with the compiled template
     */
    apiVersion?: number;
    /** Set to true if synthetic shadow DOM support is not needed, which can result in smaller/faster output. */
    disableSyntheticShadowSupport?: boolean;
}
type OptionalConfigNames = 'customRendererConfig' | 'instrumentation' | 'namespace' | 'name';
type RequiredConfigOptions = Required<Omit<Config, OptionalConfigNames>>;
type OptionalConfigOptions = Partial<Pick<Config, OptionalConfigNames>>;
export type NormalizedConfig = RequiredConfigOptions & OptionalConfigOptions;
export declare function normalizeConfig(config: Config): NormalizedConfig;
export {};
//# sourceMappingURL=config.d.ts.map