import * as t from '../shared/estree';
import type { ChildNode, Node } from '../shared/types';
import type CodeGen from './codegen';
export declare function identifierFromComponentName(name: string): t.Identifier;
export declare function getMemberExpressionRoot(expression: t.MemberExpression): t.Identifier;
export declare function objectToAST(obj: object, valueMapper: (key: string) => t.Expression): t.ObjectExpression;
/**
 * Returns true if the children should be flattened.
 *
 * This function searches through the children to determine if flattening needs to occur in the runtime.
 * Children should be flattened if they contain an iterator, a dynamic directive or a slot inside a light dom element.
 * @param codeGen
 * @param children
 */
export declare function shouldFlatten(codeGen: CodeGen, children: ChildNode[]): boolean;
/**
 * Returns true if the AST element or any of its descendants use an id attribute.
 * @param node
 */
export declare function hasIdAttribute(node: Node): boolean;
export declare function generateTemplateMetadata(codeGen: CodeGen): t.Statement[];
export declare function styleMapToStyleDeclsAST(styleMap: {
    [name: string]: string;
}): t.ArrayExpression;
export declare function parseClassNames(classNames: string): string[];
//# sourceMappingURL=helpers.d.ts.map