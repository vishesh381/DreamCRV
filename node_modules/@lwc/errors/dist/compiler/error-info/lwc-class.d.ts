import { DiagnosticLevel } from '../../shared/types';
export declare const LWCClassErrors: {
    INVALID_DYNAMIC_IMPORT_SOURCE_STRICT: {
        code: number;
        message: string;
        url: string;
        level: DiagnosticLevel;
    };
};
export declare const DecoratorErrors: {
    readonly ADAPTER_SHOULD_BE_FIRST_PARAMETER: {
        readonly code: 1092;
        readonly message: "@wire expects an adapter as first parameter. @wire(adapter: WireAdapter, config?: any).";
        readonly level: DiagnosticLevel.Error;
        readonly url: "";
    };
    readonly API_AND_TRACK_DECORATOR_CONFLICT: {
        readonly code: 1093;
        readonly message: "@api method or property cannot be used with @track";
        readonly level: DiagnosticLevel.Error;
        readonly url: "";
    };
    readonly CONFIG_OBJECT_SHOULD_BE_SECOND_PARAMETER: {
        readonly code: 1094;
        readonly message: "@wire expects a configuration object expression as second parameter.";
        readonly level: DiagnosticLevel.Error;
        readonly url: "";
    };
    readonly CONFLICT_WITH_ANOTHER_DECORATOR: {
        readonly code: 1095;
        readonly message: "@wire method or property cannot be used with @{0}";
        readonly level: DiagnosticLevel.Error;
        readonly url: "";
    };
    readonly DUPLICATE_API_PROPERTY: {
        readonly code: 1096;
        readonly message: "Duplicate @api property \"{0}\".";
        readonly level: DiagnosticLevel.Error;
        readonly url: "";
    };
    readonly FUNCTION_IDENTIFIER_SHOULD_BE_FIRST_PARAMETER: {
        readonly code: 1097;
        readonly message: "@wire expects a function identifier as first parameter.";
        readonly level: DiagnosticLevel.Error;
        readonly url: "";
    };
    readonly IMPORTED_FUNCTION_IDENTIFIER_SHOULD_BE_FIRST_PARAMETER: {
        readonly code: 1098;
        readonly message: "@wire expects a function identifier to be imported as first parameter.";
        readonly level: DiagnosticLevel.Error;
        readonly url: "";
    };
    readonly INVALID_BOOLEAN_PUBLIC_PROPERTY: {
        readonly code: 1099;
        readonly message: "Boolean public property must default to false.";
        readonly level: DiagnosticLevel.Error;
        readonly url: "";
    };
    readonly INVALID_DECORATOR: {
        readonly code: 1100;
        readonly message: "Invalid decorator usage. Supported decorators ({0}) should be imported from \"{1}\"";
        readonly level: DiagnosticLevel.Error;
        readonly url: "";
    };
    readonly INVALID_DECORATOR_TYPE: {
        readonly code: 1101;
        readonly message: "Invalid property of field type";
        readonly level: DiagnosticLevel.Error;
        readonly url: "";
    };
    readonly INVALID_DECORATOR_WITH_NAME: {
        readonly code: 1102;
        readonly message: "Invalid '{0}' decorator usage. Supported decorators ({1}) should be imported from \"{2}\"";
        readonly level: DiagnosticLevel.Error;
        readonly url: "";
    };
    readonly IS_NOT_CLASS_PROPERTY_OR_CLASS_METHOD: {
        readonly code: 1103;
        readonly message: "\"@{0}\" can only be applied on class properties";
        readonly level: DiagnosticLevel.Error;
        readonly url: "";
    };
    readonly IS_NOT_DECORATOR: {
        readonly code: 1104;
        readonly message: "\"{0}\" can only be used as a class decorator";
        readonly level: DiagnosticLevel.Error;
        readonly url: "";
    };
    readonly ONE_WIRE_DECORATOR_ALLOWED: {
        readonly code: 1105;
        readonly message: "Method or property can only have 1 @wire decorator";
        readonly level: DiagnosticLevel.Error;
        readonly url: "";
    };
    readonly PROPERTY_CANNOT_BE_COMPUTED: {
        readonly code: 1106;
        readonly message: "@api cannot be applied to a computed property, getter, setter or method.";
        readonly level: DiagnosticLevel.Error;
        readonly url: "";
    };
    readonly PROPERTY_NAME_CANNOT_START_WITH_DATA: {
        readonly code: 1107;
        readonly message: "Invalid property name \"{0}\". Properties starting with \"data\" are reserved attributes.";
        readonly level: DiagnosticLevel.Error;
        readonly url: "";
    };
    readonly PROPERTY_NAME_CANNOT_START_WITH_ON: {
        readonly code: 1108;
        readonly message: "Invalid property name \"{0}\". Properties starting with \"on\" are reserved for event handlers.";
        readonly level: DiagnosticLevel.Error;
        readonly url: "";
    };
    readonly PROPERTY_NAME_IS_AMBIGUOUS: {
        readonly code: 1109;
        readonly message: "Ambiguous attribute name \"{0}\". \"{0}\" will never be called from template because its corresponding property is camel cased. Consider renaming to \"{1}\".";
        readonly level: DiagnosticLevel.Error;
        readonly url: "";
    };
    readonly PROPERTY_NAME_IS_RESERVED: {
        readonly code: 1110;
        readonly message: "Invalid property name \"{0}\". \"{0}\" is a reserved attribute.";
        readonly level: DiagnosticLevel.Error;
        readonly url: "";
    };
    readonly PROPERTY_NAME_PART_IS_RESERVED: {
        readonly code: 1111;
        readonly message: "Invalid property name \"{0}\". \"part\" is a future reserved attribute for web components.";
        readonly level: DiagnosticLevel.Error;
        readonly url: "";
    };
    readonly SINGLE_DECORATOR_ON_SETTER_GETTER_PAIR: {
        readonly code: 1112;
        readonly message: "@api get {0} and @api set {0} detected in class declaration. Only one of the two needs to be decorated with @api.";
        readonly level: DiagnosticLevel.Error;
        readonly url: "";
    };
    readonly TRACK_ONLY_ALLOWED_ON_CLASS_PROPERTIES: {
        readonly code: 1113;
        readonly message: "@track decorator can only be applied to class properties.";
        readonly level: DiagnosticLevel.Error;
        readonly url: "";
    };
    readonly WIRE_ADAPTER_SHOULD_BE_IMPORTED: {
        readonly code: 1119;
        readonly message: "Failed to resolve @wire adapter \"{0}\". Ensure it is imported.";
        readonly level: DiagnosticLevel.Error;
        readonly url: "";
    };
    readonly FUNCTION_IDENTIFIER_CANNOT_HAVE_COMPUTED_PROPS: {
        readonly code: 1131;
        readonly message: "@wire identifier cannot contain computed properties";
        readonly level: DiagnosticLevel.Error;
        readonly url: "";
    };
    readonly FUNCTION_IDENTIFIER_CANNOT_HAVE_NESTED_MEMBER_EXRESSIONS: {
        readonly code: 1132;
        readonly message: "@wire identifier cannot contain nested member expressions";
        readonly level: DiagnosticLevel.Error;
        readonly url: "";
    };
    readonly COMPUTED_PROPERTY_CANNOT_BE_TEMPLATE_LITERAL: {
        readonly code: 1199;
        readonly message: "Cannot use a template literal as a computed property key. Instead, use a string or extract the value to a constant.";
        readonly level: DiagnosticLevel.Error;
        readonly url: "";
    };
    readonly COMPUTED_PROPERTY_MUST_BE_CONSTANT_OR_LITERAL: {
        readonly code: 1200;
        readonly message: "Computed property in @wire config must be a constant or primitive literal.";
        readonly level: DiagnosticLevel.Error;
        readonly url: "";
    };
};
//# sourceMappingURL=lwc-class.d.ts.map