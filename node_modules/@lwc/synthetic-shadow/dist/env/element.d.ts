declare const getAttribute: (qualifiedName: string) => string | null, getBoundingClientRect: () => DOMRect, getElementsByTagName: {
    <K extends keyof HTMLElementTagNameMap>(qualifiedName: K): HTMLCollectionOf<HTMLElementTagNameMap[K]>;
    <K extends keyof SVGElementTagNameMap>(qualifiedName: K): HTMLCollectionOf<SVGElementTagNameMap[K]>;
    <K extends keyof MathMLElementTagNameMap>(qualifiedName: K): HTMLCollectionOf<MathMLElementTagNameMap[K]>;
    <K extends keyof HTMLElementDeprecatedTagNameMap>(qualifiedName: K): HTMLCollectionOf<HTMLElementDeprecatedTagNameMap[K]>;
    (qualifiedName: string): HTMLCollectionOf<Element>;
}, getElementsByTagNameNS: {
    (namespaceURI: "http://www.w3.org/1999/xhtml", localName: string): HTMLCollectionOf<HTMLElement>;
    (namespaceURI: "http://www.w3.org/2000/svg", localName: string): HTMLCollectionOf<SVGElement>;
    (namespaceURI: "http://www.w3.org/1998/Math/MathML", localName: string): HTMLCollectionOf<MathMLElement>;
    (namespace: string | null, localName: string): HTMLCollectionOf<Element>;
}, hasAttribute: (qualifiedName: string) => boolean, querySelector: {
    <K extends keyof HTMLElementTagNameMap>(selectors: K): HTMLElementTagNameMap[K] | null;
    <K extends keyof SVGElementTagNameMap>(selectors: K): SVGElementTagNameMap[K] | null;
    <K extends keyof MathMLElementTagNameMap>(selectors: K): MathMLElementTagNameMap[K] | null;
    <K extends keyof HTMLElementDeprecatedTagNameMap>(selectors: K): HTMLElementDeprecatedTagNameMap[K] | null;
    <E extends Element = Element>(selectors: string): E | null;
}, querySelectorAll: {
    <K extends keyof HTMLElementTagNameMap>(selectors: K): NodeListOf<HTMLElementTagNameMap[K]>;
    <K extends keyof SVGElementTagNameMap>(selectors: K): NodeListOf<SVGElementTagNameMap[K]>;
    <K extends keyof MathMLElementTagNameMap>(selectors: K): NodeListOf<MathMLElementTagNameMap[K]>;
    <K extends keyof HTMLElementDeprecatedTagNameMap>(selectors: K): NodeListOf<HTMLElementDeprecatedTagNameMap[K]>;
    <E extends Element = Element>(selectors: string): NodeListOf<E>;
}, removeAttribute: (qualifiedName: string) => void, setAttribute: (qualifiedName: string, value: string) => void;
declare const attachShadow: (init: ShadowRootInit) => ShadowRoot;
declare const childElementCountGetter: (this: ParentNode) => number;
declare const firstElementChildGetter: (this: ParentNode) => Element | null;
declare const lastElementChildGetter: (this: ParentNode) => Element | null;
declare const innerTextGetter: ((this: Element) => string) | null;
declare const innerTextSetter: ((this: Element, s: string) => void) | null;
declare const outerTextGetter: ((this: Element) => string) | null;
declare const outerTextSetter: ((this: Element, s: string) => void) | null;
declare const innerHTMLGetter: (this: Element) => string;
declare const innerHTMLSetter: (this: Element, s: string) => void;
declare const outerHTMLGetter: (this: Element) => string;
declare const outerHTMLSetter: (this: Element, s: string) => void;
declare const tagNameGetter: (this: Element) => string;
declare const tabIndexGetter: (this: HTMLElement) => number;
declare const tabIndexSetter: (this: HTMLElement, v: any) => void;
declare const matches: (this: Element, selector: string) => boolean;
declare const childrenGetter: (this: ParentNode) => HTMLCollectionOf<Element>;
declare const getElementsByClassName: (classNames: string) => HTMLCollectionOf<Element>;
declare const shadowRootGetter: (this: Element) => ShadowRoot | null;
declare const assignedSlotGetter: (this: Element) => HTMLSlotElement | null;
export { attachShadow, childrenGetter, childElementCountGetter, firstElementChildGetter, getAttribute, getBoundingClientRect, getElementsByClassName, getElementsByTagName, getElementsByTagNameNS, hasAttribute, innerHTMLGetter, innerHTMLSetter, innerTextGetter, innerTextSetter, lastElementChildGetter, matches, outerHTMLGetter, outerHTMLSetter, outerTextGetter, outerTextSetter, querySelector, querySelectorAll, removeAttribute, setAttribute, shadowRootGetter, tagNameGetter, tabIndexGetter, tabIndexSetter, assignedSlotGetter, };
//# sourceMappingURL=element.d.ts.map