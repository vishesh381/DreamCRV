import type { FeatureFlagMap, FeatureFlagName, FeatureFlagValue } from './types';
/** List of all feature flags available, with the default value `null`. */
declare const features: FeatureFlagMap;
/** Feature flags that have been set. */
declare const flags: Partial<FeatureFlagMap>;
/**
 * Set the value at runtime of a given feature flag. This method only be invoked once per feature
 * flag. It is meant to be used during the app initialization.
 * @param name Name of the feature flag to set
 * @param value Whether the feature flag should be enabled
 * @throws Will throw if a non-boolean value is provided when running in production.
 * @example setFeatureFlag("DISABLE_NATIVE_CUSTOM_ELEMENT_LIFECYCLE", true)
 */
export declare function setFeatureFlag(name: FeatureFlagName, value: FeatureFlagValue): void;
/**
 * Set the value at runtime of a given feature flag. This method should only be used for testing
 * purposes. It is a no-op when invoked in production mode.
 * @param name Name of the feature flag to enable or disable
 * @param value Whether the feature flag should be enabled
 * @example setFeatureFlag("DISABLE_NATIVE_CUSTOM_ELEMENT_LIFECYCLE", true)
 */
export declare function setFeatureFlagForTest(name: FeatureFlagName, value: FeatureFlagValue): void;
export default features;
export { flags as runtimeFlags, // backwards compatibility for before this was renamed
flags as lwcRuntimeFlags, };
export type { FeatureFlagMap };
declare global {
    /** Feature flags that have been set. */
    const lwcRuntimeFlags: Partial<FeatureFlagMap>;
}
//# sourceMappingURL=index.d.ts.map