export declare const ElementDescriptors: {
    readonly attributes: TypedPropertyDescriptor<NamedNodeMap>;
    readonly classList: TypedPropertyDescriptor<DOMTokenList>;
    className: TypedPropertyDescriptor<string>;
    readonly clientHeight: TypedPropertyDescriptor<number>;
    readonly clientLeft: TypedPropertyDescriptor<number>;
    readonly clientTop: TypedPropertyDescriptor<number>;
    readonly clientWidth: TypedPropertyDescriptor<number>;
    readonly currentCSSZoom: TypedPropertyDescriptor<number>;
    id: TypedPropertyDescriptor<string>;
    innerHTML: TypedPropertyDescriptor<string>;
    readonly localName: TypedPropertyDescriptor<string>;
    readonly namespaceURI: TypedPropertyDescriptor<string | null>;
    onfullscreenchange: TypedPropertyDescriptor<((this: Element, ev: Event) => any) | null>;
    onfullscreenerror: TypedPropertyDescriptor<((this: Element, ev: Event) => any) | null>;
    outerHTML: TypedPropertyDescriptor<string>;
    readonly ownerDocument: TypedPropertyDescriptor<Document>;
    readonly part: TypedPropertyDescriptor<DOMTokenList>;
    readonly prefix: TypedPropertyDescriptor<string | null>;
    readonly scrollHeight: TypedPropertyDescriptor<number>;
    scrollLeft: TypedPropertyDescriptor<number>;
    scrollTop: TypedPropertyDescriptor<number>;
    readonly scrollWidth: TypedPropertyDescriptor<number>;
    readonly shadowRoot: TypedPropertyDescriptor<ShadowRoot | null>;
    slot: TypedPropertyDescriptor<string>;
    readonly tagName: TypedPropertyDescriptor<string>;
    attachShadow: TypedPropertyDescriptor<(init: ShadowRootInit) => ShadowRoot>;
    checkVisibility: TypedPropertyDescriptor<(options?: CheckVisibilityOptions) => boolean>;
    closest: TypedPropertyDescriptor<{
        <K extends keyof HTMLElementTagNameMap>(selector: K): HTMLElementTagNameMap[K] | null;
        <K extends keyof SVGElementTagNameMap>(selector: K): SVGElementTagNameMap[K] | null;
        <K extends keyof MathMLElementTagNameMap>(selector: K): MathMLElementTagNameMap[K] | null;
        <E extends Element = Element>(selectors: string): E | null;
    }>;
    computedStyleMap: TypedPropertyDescriptor<() => StylePropertyMapReadOnly>;
    getAttribute: TypedPropertyDescriptor<(qualifiedName: string) => string | null>;
    getAttributeNS: TypedPropertyDescriptor<(namespace: string | null, localName: string) => string | null>;
    getAttributeNames: TypedPropertyDescriptor<() => string[]>;
    getAttributeNode: TypedPropertyDescriptor<(qualifiedName: string) => Attr | null>;
    getAttributeNodeNS: TypedPropertyDescriptor<(namespace: string | null, localName: string) => Attr | null>;
    getBoundingClientRect: TypedPropertyDescriptor<() => DOMRect>;
    getClientRects: TypedPropertyDescriptor<() => DOMRectList>;
    getElementsByClassName: TypedPropertyDescriptor<(classNames: string) => HTMLCollectionOf<Element>>;
    getElementsByTagName: TypedPropertyDescriptor<{
        <K extends keyof HTMLElementTagNameMap>(qualifiedName: K): HTMLCollectionOf<HTMLElementTagNameMap[K]>;
        <K extends keyof SVGElementTagNameMap>(qualifiedName: K): HTMLCollectionOf<SVGElementTagNameMap[K]>;
        <K extends keyof MathMLElementTagNameMap>(qualifiedName: K): HTMLCollectionOf<MathMLElementTagNameMap[K]>;
        <K extends keyof HTMLElementDeprecatedTagNameMap>(qualifiedName: K): HTMLCollectionOf<HTMLElementDeprecatedTagNameMap[K]>;
        (qualifiedName: string): HTMLCollectionOf<Element>;
    }>;
    getElementsByTagNameNS: TypedPropertyDescriptor<{
        (namespaceURI: "http://www.w3.org/1999/xhtml", localName: string): HTMLCollectionOf<HTMLElement>;
        (namespaceURI: "http://www.w3.org/2000/svg", localName: string): HTMLCollectionOf<SVGElement>;
        (namespaceURI: "http://www.w3.org/1998/Math/MathML", localName: string): HTMLCollectionOf<MathMLElement>;
        (namespace: string | null, localName: string): HTMLCollectionOf<Element>;
    }>;
    getHTML: TypedPropertyDescriptor<(options?: GetHTMLOptions) => string>;
    hasAttribute: TypedPropertyDescriptor<(qualifiedName: string) => boolean>;
    hasAttributeNS: TypedPropertyDescriptor<(namespace: string | null, localName: string) => boolean>;
    hasAttributes: TypedPropertyDescriptor<() => boolean>;
    hasPointerCapture: TypedPropertyDescriptor<(pointerId: number) => boolean>;
    insertAdjacentElement: TypedPropertyDescriptor<(where: InsertPosition, element: Element) => Element | null>;
    insertAdjacentHTML: TypedPropertyDescriptor<(position: InsertPosition, string: string) => void>;
    insertAdjacentText: TypedPropertyDescriptor<(where: InsertPosition, data: string) => void>;
    matches: TypedPropertyDescriptor<(selectors: string) => boolean>;
    releasePointerCapture: TypedPropertyDescriptor<(pointerId: number) => void>;
    removeAttribute: TypedPropertyDescriptor<(qualifiedName: string) => void>;
    removeAttributeNS: TypedPropertyDescriptor<(namespace: string | null, localName: string) => void>;
    removeAttributeNode: TypedPropertyDescriptor<(attr: Attr) => Attr>;
    requestFullscreen: TypedPropertyDescriptor<(options?: FullscreenOptions) => Promise<void>>;
    requestPointerLock: TypedPropertyDescriptor<(options?: PointerLockOptions) => Promise<void>>;
    scroll: TypedPropertyDescriptor<{
        (options?: ScrollToOptions): void;
        (x: number, y: number): void;
    }>;
    scrollBy: TypedPropertyDescriptor<{
        (options?: ScrollToOptions): void;
        (x: number, y: number): void;
    }>;
    scrollIntoView: TypedPropertyDescriptor<(arg?: boolean | ScrollIntoViewOptions) => void>;
    scrollTo: TypedPropertyDescriptor<{
        (options?: ScrollToOptions): void;
        (x: number, y: number): void;
    }>;
    setAttribute: TypedPropertyDescriptor<(qualifiedName: string, value: string) => void>;
    setAttributeNS: TypedPropertyDescriptor<(namespace: string | null, qualifiedName: string, value: string) => void>;
    setAttributeNode: TypedPropertyDescriptor<(attr: Attr) => Attr | null>;
    setAttributeNodeNS: TypedPropertyDescriptor<(attr: Attr) => Attr | null>;
    setHTMLUnsafe: TypedPropertyDescriptor<(html: string) => void>;
    setPointerCapture: TypedPropertyDescriptor<(pointerId: number) => void>;
    toggleAttribute: TypedPropertyDescriptor<(qualifiedName: string, force?: boolean) => boolean>;
    webkitMatchesSelector: TypedPropertyDescriptor<(selectors: string) => boolean>;
    addEventListener: TypedPropertyDescriptor<{
        <K extends keyof ElementEventMap>(type: K, listener: (this: Element, ev: ElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        (type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    }>;
    removeEventListener: TypedPropertyDescriptor<{
        <K extends keyof ElementEventMap>(type: K, listener: (this: Element, ev: ElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        (type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }>;
    readonly baseURI: TypedPropertyDescriptor<string>;
    readonly childNodes: TypedPropertyDescriptor<NodeListOf<ChildNode>>;
    readonly firstChild: TypedPropertyDescriptor<ChildNode | null>;
    readonly isConnected: TypedPropertyDescriptor<boolean>;
    readonly lastChild: TypedPropertyDescriptor<ChildNode | null>;
    readonly nextSibling: TypedPropertyDescriptor<ChildNode | null>;
    readonly nodeName: TypedPropertyDescriptor<string>;
    readonly nodeType: TypedPropertyDescriptor<number>;
    nodeValue: TypedPropertyDescriptor<string | null>;
    readonly parentElement: TypedPropertyDescriptor<HTMLElement | null>;
    readonly parentNode: TypedPropertyDescriptor<ParentNode | null>;
    readonly previousSibling: TypedPropertyDescriptor<ChildNode | null>;
    textContent: TypedPropertyDescriptor<string | null>;
    appendChild: TypedPropertyDescriptor<(<T extends Node>(node: T) => T)>;
    cloneNode: TypedPropertyDescriptor<(deep?: boolean) => Node>;
    compareDocumentPosition: TypedPropertyDescriptor<(other: Node) => number>;
    contains: TypedPropertyDescriptor<(other: Node | null) => boolean>;
    getRootNode: TypedPropertyDescriptor<(options?: GetRootNodeOptions) => Node>;
    hasChildNodes: TypedPropertyDescriptor<() => boolean>;
    insertBefore: TypedPropertyDescriptor<(<T extends Node>(node: T, child: Node | null) => T)>;
    isDefaultNamespace: TypedPropertyDescriptor<(namespace: string | null) => boolean>;
    isEqualNode: TypedPropertyDescriptor<(otherNode: Node | null) => boolean>;
    isSameNode: TypedPropertyDescriptor<(otherNode: Node | null) => boolean>;
    lookupNamespaceURI: TypedPropertyDescriptor<(prefix: string | null) => string | null>;
    lookupPrefix: TypedPropertyDescriptor<(namespace: string | null) => string | null>;
    normalize: TypedPropertyDescriptor<() => void>;
    removeChild: TypedPropertyDescriptor<(<T extends Node>(child: T) => T)>;
    replaceChild: TypedPropertyDescriptor<(<T extends Node>(node: Node, child: T) => T)>;
    readonly ELEMENT_NODE: TypedPropertyDescriptor<1>;
    readonly ATTRIBUTE_NODE: TypedPropertyDescriptor<2>;
    readonly TEXT_NODE: TypedPropertyDescriptor<3>;
    readonly CDATA_SECTION_NODE: TypedPropertyDescriptor<4>;
    readonly ENTITY_REFERENCE_NODE: TypedPropertyDescriptor<5>;
    readonly ENTITY_NODE: TypedPropertyDescriptor<6>;
    readonly PROCESSING_INSTRUCTION_NODE: TypedPropertyDescriptor<7>;
    readonly COMMENT_NODE: TypedPropertyDescriptor<8>;
    readonly DOCUMENT_NODE: TypedPropertyDescriptor<9>;
    readonly DOCUMENT_TYPE_NODE: TypedPropertyDescriptor<10>;
    readonly DOCUMENT_FRAGMENT_NODE: TypedPropertyDescriptor<11>;
    readonly NOTATION_NODE: TypedPropertyDescriptor<12>;
    readonly DOCUMENT_POSITION_DISCONNECTED: TypedPropertyDescriptor<1>;
    readonly DOCUMENT_POSITION_PRECEDING: TypedPropertyDescriptor<2>;
    readonly DOCUMENT_POSITION_FOLLOWING: TypedPropertyDescriptor<4>;
    readonly DOCUMENT_POSITION_CONTAINS: TypedPropertyDescriptor<8>;
    readonly DOCUMENT_POSITION_CONTAINED_BY: TypedPropertyDescriptor<16>;
    readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: TypedPropertyDescriptor<32>;
    dispatchEvent: TypedPropertyDescriptor<(event: Event) => boolean>;
    ariaAtomic: TypedPropertyDescriptor<string | null>;
    ariaAutoComplete: TypedPropertyDescriptor<string | null>;
    ariaBrailleLabel: TypedPropertyDescriptor<string | null>;
    ariaBrailleRoleDescription: TypedPropertyDescriptor<string | null>;
    ariaBusy: TypedPropertyDescriptor<string | null>;
    ariaChecked: TypedPropertyDescriptor<string | null>;
    ariaColCount: TypedPropertyDescriptor<string | null>;
    ariaColIndex: TypedPropertyDescriptor<string | null>;
    ariaColIndexText: TypedPropertyDescriptor<string | null>;
    ariaColSpan: TypedPropertyDescriptor<string | null>;
    ariaCurrent: TypedPropertyDescriptor<string | null>;
    ariaDescription: TypedPropertyDescriptor<string | null>;
    ariaDisabled: TypedPropertyDescriptor<string | null>;
    ariaExpanded: TypedPropertyDescriptor<string | null>;
    ariaHasPopup: TypedPropertyDescriptor<string | null>;
    ariaHidden: TypedPropertyDescriptor<string | null>;
    ariaInvalid: TypedPropertyDescriptor<string | null>;
    ariaKeyShortcuts: TypedPropertyDescriptor<string | null>;
    ariaLabel: TypedPropertyDescriptor<string | null>;
    ariaLevel: TypedPropertyDescriptor<string | null>;
    ariaLive: TypedPropertyDescriptor<string | null>;
    ariaModal: TypedPropertyDescriptor<string | null>;
    ariaMultiLine: TypedPropertyDescriptor<string | null>;
    ariaMultiSelectable: TypedPropertyDescriptor<string | null>;
    ariaOrientation: TypedPropertyDescriptor<string | null>;
    ariaPlaceholder: TypedPropertyDescriptor<string | null>;
    ariaPosInSet: TypedPropertyDescriptor<string | null>;
    ariaPressed: TypedPropertyDescriptor<string | null>;
    ariaReadOnly: TypedPropertyDescriptor<string | null>;
    ariaRequired: TypedPropertyDescriptor<string | null>;
    ariaRoleDescription: TypedPropertyDescriptor<string | null>;
    ariaRowCount: TypedPropertyDescriptor<string | null>;
    ariaRowIndex: TypedPropertyDescriptor<string | null>;
    ariaRowIndexText: TypedPropertyDescriptor<string | null>;
    ariaRowSpan: TypedPropertyDescriptor<string | null>;
    ariaSelected: TypedPropertyDescriptor<string | null>;
    ariaSetSize: TypedPropertyDescriptor<string | null>;
    ariaSort: TypedPropertyDescriptor<string | null>;
    ariaValueMax: TypedPropertyDescriptor<string | null>;
    ariaValueMin: TypedPropertyDescriptor<string | null>;
    ariaValueNow: TypedPropertyDescriptor<string | null>;
    ariaValueText: TypedPropertyDescriptor<string | null>;
    role: TypedPropertyDescriptor<string | null>;
    animate: TypedPropertyDescriptor<(keyframes: Keyframe[] | PropertyIndexedKeyframes | null, options?: number | KeyframeAnimationOptions) => Animation>;
    getAnimations: TypedPropertyDescriptor<(options?: GetAnimationsOptions) => Animation[]>;
    after: TypedPropertyDescriptor<(...nodes: (Node | string)[]) => void>;
    before: TypedPropertyDescriptor<(...nodes: (Node | string)[]) => void>;
    remove: TypedPropertyDescriptor<() => void>;
    replaceWith: TypedPropertyDescriptor<(...nodes: (Node | string)[]) => void>;
    readonly nextElementSibling: TypedPropertyDescriptor<Element | null>;
    readonly previousElementSibling: TypedPropertyDescriptor<Element | null>;
    readonly childElementCount: TypedPropertyDescriptor<number>;
    readonly children: TypedPropertyDescriptor<HTMLCollection>;
    readonly firstElementChild: TypedPropertyDescriptor<Element | null>;
    readonly lastElementChild: TypedPropertyDescriptor<Element | null>;
    append: TypedPropertyDescriptor<(...nodes: (Node | string)[]) => void>;
    prepend: TypedPropertyDescriptor<(...nodes: (Node | string)[]) => void>;
    querySelector: TypedPropertyDescriptor<{
        <K extends keyof HTMLElementTagNameMap>(selectors: K): HTMLElementTagNameMap[K] | null;
        <K extends keyof SVGElementTagNameMap>(selectors: K): SVGElementTagNameMap[K] | null;
        <K extends keyof MathMLElementTagNameMap>(selectors: K): MathMLElementTagNameMap[K] | null;
        <K extends keyof HTMLElementDeprecatedTagNameMap>(selectors: K): HTMLElementDeprecatedTagNameMap[K] | null;
        <E extends Element = Element>(selectors: string): E | null;
    }>;
    querySelectorAll: TypedPropertyDescriptor<{
        <K extends keyof HTMLElementTagNameMap>(selectors: K): NodeListOf<HTMLElementTagNameMap[K]>;
        <K extends keyof SVGElementTagNameMap>(selectors: K): NodeListOf<SVGElementTagNameMap[K]>;
        <K extends keyof MathMLElementTagNameMap>(selectors: K): NodeListOf<MathMLElementTagNameMap[K]>;
        <K extends keyof HTMLElementDeprecatedTagNameMap>(selectors: K): NodeListOf<HTMLElementDeprecatedTagNameMap[K]>;
        <E extends Element = Element>(selectors: string): NodeListOf<E>;
    }>;
    replaceChildren: TypedPropertyDescriptor<(...nodes: (Node | string)[]) => void>;
    readonly assignedSlot: TypedPropertyDescriptor<HTMLSlotElement | null>;
} & {
    [x: string]: PropertyDescriptor;
};
export declare const ElementAttachShadow: (init: ShadowRootInit) => ShadowRoot;
export declare const ElementShadowRootGetter: () => ShadowRoot | null;
//# sourceMappingURL=language.d.ts.map